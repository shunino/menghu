var anyStartTime = null, anyEndTime = null;//任意时段开始时间，结束时间
var rainAreaGraphic = [];//降水等值面
var isRainfallFunc = false;//是否开启任意时段降水查询
$(function () {
  //任意时段降水查询
  note.on("rainfall.query", function () {
    note.notify("time.interval.player.close");
    isRainfallFunc = true;
    anyStartTime = moment(moment(SYSTEM_TIME).format('YYYY-MM-DD')).subtract(3, 'days').format('YYYY-MM-DD');
    anyEndTime = moment(SYSTEM_TIME).format('YYYY-MM-DD');
    getRainPolygonQuery();
    layui.use('laydate', function () {
      var laydate = layui.laydate;
      //日期范围
      laydate.render({
        elem: '#timeSelectQuery',
        range: true,//开启范围选择(range: true)
        max: moment(SYSTEM_TIME).format('YYYY-MM-DD'),
        value: anyStartTime + ' - ' + anyEndTime,
        done: function (value, date, endDate) {
          anyStartTime = moment(value.substring(0, 10)).format("YYYY-MM-DD 00:00:00");
          anyEndTime = moment(value.substring(13, 23)).format("YYYY-MM-DD 00:00:00");
          getRainPolygonQuery();
        }
      })
    })
    $("#timeSelect").show();
  });

  //监听任意时段降水查询时 监控对象中的 雨量站 和 气象站 点击
  note.on("subject.station.rainfall.checked", (event, checked, station) => {
    var obj = {
      motype: station.code,
      sttype: station.value
    }
    if ((station.code == "04" && station.value == "1") || ((station.code == "04" && station.value == "2"))) {
      addMapRainFallPoint(checked, obj);
    }
  })
})

// $("#041clickbtn").trigger('click')

function getRainPolygonQuery() {
  let body = {
    interface: "com.ec.ws.service.def.transfer.TransferService",
    method: "rainPolygonQuery",
    args: [anyStartTime, anyEndTime, viewBox[0], viewBox[1], viewBox[2], viewBox[3]]
  };
  ajaxCallJson(body, "/rpc", ({ data }) => {
    var info = JSON.parse(data);
    if (rainAreaGraphic) rainAreaGraphic.map((ele) => { graphicsLayer.removeMany(ele) });
    addRainArea(info);
  })
}

function addRainArea(info) {
  var arr = [];
  for (var i = 0; i < info.length; i++) {
    var wkt = info[i].wkt;
    var str = wkt.replace('MULTIPOLYGON(((', '').replace(')))', '');
    var arrTemp = str.split(',');
    var arrNew = arrTemp.map((ele) => ele.split(' '));
    arr.push(arrNew)
    addRainAreaToMap([arrNew]);
  }
  // addRainAreaToMap(arr);
}

function addRainAreaToMap(wktArr) {
  require([
    "esri/Graphic"
  ], function (Graphic) {
    var polygon = {
      type: "polygon", // autocasts as new Polygon()
      rings: wktArr,
    };
    var fillSymbol = {
      type: "simple-fill", // autocasts as new SimpleFillSymbol()
      color: userAreaColor,
      width: "3px"
    };
    var graphicTemp = new Graphic({
      geometry: polygon,
      symbol: fillSymbol,
    });
    rainAreaGraphic.push(graphicTemp);
    graphicsLayer.add(graphicTemp);
  })
}


