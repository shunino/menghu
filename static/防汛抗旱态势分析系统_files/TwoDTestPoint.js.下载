// 山洪/中小流域地图点
define([
  "esri/layers/FeatureLayer",
  "esri/layers/support/LabelClass",
  "esri/geometry/Point",
],
  function (FeatureLayer, LabelClass, Point) {
    /**
     * mapPointArr点数据数组，classBreakInfosArr 渲染器数组,featureLayerID 
     */
    return function (mapPointArr, classBreakInfosArr, uniqueValuesInfos, featureLayerID) {
      const minScale = 250000000;

      //定义需要显示的字段
      var fields = [{
        name: "ObjectID",
        alias: "ObjectID",
        type: "oid"
      },
      {
        name: "id", //id
        alias: "id",
        type: "string"
      },
      {
        name: "topoid", //topoid
        alias: "topoid",
        type: "string"
      },
      {
        name: "mname", //名称
        alias: "mname",
        type: "string"
      },
      {
        name: "level", //预警级别
        alias: "level",
        type: "double"
      },
      {
        name: "levelname", //预警名称
        alias: "levelname",
        type: "string"
      },
      {
        name: "lgtd", //经度
        alias: "lgtd",
        type: "double"
      },
      {
        name: "lttd", //纬度
        alias: "lttd",
        type: "double"
      },
      {
        name: "motype", //类型
        alias: "motype",
        type: "string"
      },
      {
        name: "rp", //洪水等级
        alias: "rp",
        type: "double"
      },
      {
        name: "fp",
        alias: "fp",
        type: "double"
      },
      {
        name: "maxflow", //最大流量
        alias: "maxflow",
        type: "double"
      },
      {
        name: "warntime", //发生时间
        alias: "warntime",
        type: "double"
      },
      {
        name: "fptrdesc", //预见期
        alias: "fptrdesc",
        type: "string"
      },
      {
        name: "typeid", //typeId
        alias: "typeid",
        type: "string"
      }
      ];

      //定义渲染器
      var pointRenderer = {
        type: "class-breaks", // autocasts as new ClassBreaksRenderer()
        field: "level",
        classBreakInfos: classBreakInfosArr,
      }


      //创建点的label标注
      var statesLabelClass = {
        symbol: {
          type: "text",  // autocasts as new TextSymbol()
          color: "black",
          haloSize: 1,
          haloColor: "white",
          size: 10
        },
        minScale: minScale,
        labelExpressionInfo: {
          expression: "$feature.mname"
        },
        labelPlacement: "above-center",
      }

      var sourceObj = pointCreateGraphicsObj(mapPointArr);
      var pointLayer = new FeatureLayer({
        id: featureLayerID,
        source: sourceObj,
        fields: fields,
        objectIdField: "ObjectID",
        renderer: pointRenderer,
        labelingInfo: [statesLabelClass],
      });

      var obj = {
        pointLayer: pointLayer,
        renderer: pointRenderer,
        source: sourceObj,
        labelClass: statesLabelClass,
        fields: fields,
        classBreakInfosArr: classBreakInfosArr
      }
      return obj;
    }

    //创建点图形对象source
    function pointCreateGraphicsObj(mapPointArrParam) {
      return mapPointArrParam.map(function (ele, i) {
        return {
          geometry: new Point({
            x: ele.lgtd,
            y: ele.lttd,
          }),
          attributes: {
            ObjectID: i,
            id: ele.id,
            topoid: ele.topoid,
            mname: ele.mname,
            level: ele.level,
            levelname: ele.levelname,
            lgtd: ele.lgtd,
            lttd: ele.lttd,
            motype: ele.motype,
            rp: ele.rp,
            fp: ele.fp,
            maxflow: ele.maxflow,
            warntime: ele.warntime,
            fptrdesc: ele.fptrdesc,
            typeid: ele.typeid
          }
        }
      })
    }
  }
)