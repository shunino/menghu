//单位
function commonCompanyzTree(params) {
  loadingunit(params)
}

//加载数据
function loadingunit(params) {
  var id = params.treeId;
  var inputId = params.inputId;
  var data = {};
  data.username = "";
  $.ajax({
    type: 'post',
    dataType: 'json',
    url: '/register/loadingunit',
    data: JSON.stringify(data),
    contentType: "application/json; charset=utf-8",
    success: function (res) {
      if (res.flag) {
        var data = buildDomTree(res.data);
        var p = {
          id: id,
          data: data,
          onClick: params.onClick
        }
        dataTree.init(p);
        document.getElementById(inputId).value = ""; //清空搜索框中的内容
      }
    },
    error: function (err) {
    }
  });

  //输入搜索
  $("#" + inputId).keyup(function (event) {
    var searchValue = $("#" + inputId).val();
    var data = {};
    data.username = searchValue;
    $.ajax({
      type: 'post',
      dataType: 'json',
      url: '/register/loadingunit',
      data: JSON.stringify(data),
      contentType: "application/json; charset=utf-8",
      success: function (res) {
        if (res.flag) {
          var data = buildDomTree(res.data);
          var p = {
            id: id,
            data: data,
            onClick: params.onClick
          }
          dataTree.init(p)
        }
      },
      error: function (err) {
      }
    });
  });
}

function buildDomTree(data1) {
  var data = [];
  var root = "所有单位";

  function walk(nodes, data) {
    if (!nodes) {
      return;
    }
    $.each(nodes, function (id, node) {
      var obj = {
        id: node.orgcd,
        name: node.orgnm != null ? node.orgnm : root,
        pId: node.porgcd != null ? node.porgcd : root,
      };
      data.push(obj);
    });
  }

  walk(data1, data);
  return data;
}

////点击节点动作
//function onClick(treeNode) {
//    console.log(treeNode)
//    $('#keya').val(treeNode.name);
//    $("#menuContent").fadeOut("fast");
//    $("#bodyId").unbind("mousedown", onBodyDown);
//}
////function onDblClick(e, treeId, treeNode) {
////    var treeObj = $.fn.zTree.getZTreeObj("areaTree");
////    $('#areaSel').val("");
////    treeObj.cancelSelectedNode(treeNode);
////}
////关闭下拉树的事件
//function onBodyDown(event) {
//    if (!( event.target.id == "areaSel" ||  event.target.id == "menuContent" || $(event.target).parents("#menuContent").length>0)) {
//        hideMenu();
//    }
//}
/**
 * 数据树装结构封装
 * init Func @param Object对象，属性说明如下
 *             data:相关数据（格式如：{ id:1, pId:0, name:"可折腾的父节点 1",  open:false}）
 *            id:树装结构id，
 *            DblClick:Func 节点双击后的回调函数，回调返回该节点对象
 *            renameCallback:Func 节点编辑后的回调函数，回调返回该节点对象
 * add Func 增加节点  return true代表增加成功 return false 代表增加失败
 * edit Func 编辑节点  return true代表编辑成功 return false 代表编辑失败
 * remove Func 移出节点  return true代表删除成功 return false 代表删除失败
 * **/
var dataTree = {
  init: function (params) {
    var id = params.id,
      data = params.data,
      DblClick = params.DblClick,
      click = params.onClick,
      fontCss = params.fontCss ? params.fontCss : {color: '#00A8FF'},
      selectedMulti = params.selectedMulti ? params.selectedMulti : false,
      check = params.check ? params.check : false,
      renameCallback = params.renameCallback;
    var setting = {
      view: {
        selectedMulti: selectedMulti,
        fontCss: fontCss
      },
      check: {
        enable: check
      },
      edit: {
        enable: true,
        showRemoveBtn: false,
        showRenameBtn: false,
        drag: {
          isCopy: false,
          isMove: false
        }
      },
      data: {
        simpleData: {
          enable: true
        }
      },
      callback: {
        beforeRename: beforeRename,
        onRename: onRename,
        onClick: onClick,
        onDblClick: onDblClick
      }
    };

    function beforeRename(treeId, treeNode, newName) {
      if (newName.length == 0) {
        var zTree = $.fn.zTree.getZTreeObj(id);
        setTimeout(function () {
          zTree.editName(treeNode)
        }, 10);
        layer.msg("节点名称不能为空.");
        return false;
      }
      return true;
    }

    function onDblClick(event, treeId, treeNode) {
      if (DblClick) {
        DblClick(treeNode);
      }
    }

    function onClick(event, treeId, treeNode) {
      if (click) {
        click(treeNode);
      }

    }

    function onRename(event, treeId, treeNode) {
      if (renameCallback) {
        renameCallback(treeNode)
      }
    }

    $.fn.zTree.init($("#" + id), setting, data);
  },
  add: function (id, data) {
    var newCount = parseInt(Math.random() * 10000);
    var isParent = false;
    if (data) {
      isParent = data.isParent ? data.isParent : false
    }
    var zTree = $.fn.zTree.getZTreeObj(id),
      nodes = zTree.getSelectedNodes(),
      treeNode = nodes[0];
    ;
    if (treeNode) {
      treeNode = zTree.addNodes(treeNode, {id: ("FDW" + newCount), pId: treeNode.id, isParent: isParent, name: "新节点"});
    } else {
      treeNode = zTree.addNodes(null, {id: ("FDW" + newCount), pId: 0, isParent: isParent, name: "新节点"});
    }
    if (treeNode) {
      zTree.selectNode(treeNode[0])
      return this.edit(id);
    } else {
      layer.msg("叶子节点被锁定，无法增加子节点", {time: 2000});
      return false;
    }
  },
  edit: function (id) {
    var zTree = $.fn.zTree.getZTreeObj(id),
      nodes = zTree.getSelectedNodes(),
      treeNode = nodes[0];
    if (nodes.length == 0) {
      layer.msg("请先选择一个节点");
      return false;
    }
    zTree.editName(treeNode);
    return true;
  },
  remove: function (id) {
    var zTree = $.fn.zTree.getZTreeObj(id),
      nodes = zTree.getSelectedNodes(),
      treeNode = nodes[0];
    if (nodes.length == 0) {

      return false;
    }
    zTree.removeNode(treeNode);
    return treeNode;
  },
  getSelectNode: function (id) {
    var zTree = $.fn.zTree.getZTreeObj(id),
      nodes = zTree.getSelectedNodes();
    return nodes;
  },
  getCheckNode: function (id) {
    var zTree = $.fn.zTree.getZTreeObj(id),
      nodes = zTree.getCheckedNodes(true);
    return nodes;
  }
}
