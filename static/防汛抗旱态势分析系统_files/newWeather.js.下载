var weatherLayers = [];
var weatherPointLayerOne, weatherPointLayerTwo, weatherPointLayerThree,weatherPointLayerFour;
var weatherShow7day=false;
function hideWeatherLayer() {
  hideWeatherForecastLayer();
}
function hideWeatherForecastLayer() {
  if(weatherLayers){
    for(var i=0;i<weatherLayers.length;i++){
      if(map.findLayerById(weatherLayers[i].id)!=undefined){
        map.findLayerById(weatherLayers[i].id).visible=false;
      }
    }
    if(map.findLayerById("clickNewWeatherLayer")){
      map.findLayerById("clickNewWeatherLayer").visible=false;
      map.findLayerById("clickNewWeatherLayer").opacity=0;
    }
  }
}
var newWeatherDataIndexMap=new Map(),saveWeatherIDList=[];
var weatherDataLabelListOne="",weatherDataLabelListTwo="",weatherDataLabelListThree="",weatherDataLabelListFour="";
function initOnLoadWeather(zoom,subjectType) {
  if(zoom==""){
    zoom=6;
  }
  let param = {
    adcd   : userPrivilege,
    level  : zoom ,
    viewBox: viewBox||[]
  };
  ajaxCallJson(param, '/weather/getForeWeatherByAdcd', function (_data) {
    if (_data && _data.flag) {
      if(_data.data1){
        weatherDataLabelListOne="";
        weatherDataLabelListTwo="";
        weatherDataLabelListThree="";
        weatherDataLabelListFour="";
        weatherDataLabelListOne = Object.assigns({}, _data.data1);
        weatherDataLabelListTwo = Object.assigns({}, _data.data2);
        weatherDataLabelListThree = Object.assigns({}, _data.data3);
        weatherDataLabelListFour = Object.assigns({}, _data.data4);
        require(["myMap/layer/PointLayer"], function (PointLayer) {
          weatherPointLayerOne = new PointLayer(_data.data1.mapPointArr, _data.data1.classBreakInfos, "weatherLayerID1");
          weatherPointLayerTwo= new PointLayer(_data.data2.mapPointArr, _data.data2.classBreakInfos, "weatherLayerID2");
          weatherPointLayerThree = new PointLayer(_data.data3.mapPointArr, _data.data3.classBreakInfos, "weatherLayerID3");
          weatherPointLayerFour = new PointLayer(_data.data4.mapPointArr, _data.data4.classBreakInfos, "weatherLayerID4");
          if(subjectType=="subject"){
            weatherPointLayerOne.pointLayer.visible = false;
            weatherPointLayerTwo.pointLayer.visible = false;
            weatherPointLayerThree.pointLayer.visible = false;
            weatherPointLayerFour.pointLayer.visible = false;
            weatherLayers[0]=(weatherPointLayerOne.pointLayer);
            weatherLayers[1]=(weatherPointLayerTwo.pointLayer);
            weatherLayers[2]=(weatherPointLayerThree.pointLayer);
            weatherLayers[3]=(weatherPointLayerFour.pointLayer);
          }else{
            if (map.findLayerById("weatherLayerID1")&&checkNewWeatherIndex===0){
              if(saveWeatherIDList.length>0){
                for (var i = 0; i < saveWeatherIDList.length; i++) {
                  clearInterval(newWeatherDataIndexMap.get(saveWeatherIDList[i]));
                }
              }
              startWeatherPointTimer(_data.data1,"one34");
              onLoadWeatherLabel(Object.assigns({}, _data.data1), 0);
            }
            if (map.findLayerById("weatherLayerID2")&&checkNewWeatherIndex===1){
              if(saveWeatherIDList.length>0){
                for (var i = 0; i < saveWeatherIDList.length; i++) {
                  clearInterval(newWeatherDataIndexMap.get(saveWeatherIDList[i]));
                }
              }
              startWeatherPointTimer(_data.data2,"two34");
              onLoadWeatherLabel(Object.assigns({}, _data.data2), 0);
            }
            if (map.findLayerById("weatherLayerID3")&&checkNewWeatherIndex===2){
              if(saveWeatherIDList.length>0){
                for (var i = 0; i < saveWeatherIDList.length; i++) {
                  clearInterval(newWeatherDataIndexMap.get(saveWeatherIDList[i]));
                }
              }
              startWeatherPointTimer(_data.data3,"three34");
              onLoadWeatherLabel(Object.assigns({}, _data.data3), 0);
            }
            if (map.findLayerById("weatherLayerID4")&&checkNewWeatherIndex===3){
              if(saveWeatherIDList.length>0){
                for (var i = 0; i < saveWeatherIDList.length; i++) {
                  clearInterval(newWeatherDataIndexMap.get(saveWeatherIDList[i]));
                }
              }
              startWeatherPointTimer(_data.data4,"four34");
              onLoadWeatherLabel(Object.assigns({}, _data.data4), 0);
            }
          }
        });
      }
    }
  });
}

function initNewWeatherForecast(obj, mapPoint) {
  let param = {
    wrcd: obj.mocd
  };
  var name=obj.stcd;
  var weatherRealityData;
  ajaxCallJson(param, '/weather/getForAndRealWeather', function (_data) {
    if (_data && _data.data) {
      var data = JSON.parse(_data.data);
      weatherRealityData=data;
      var count = 0;
      var todayDataObj = [], tomorrowDataObj = [], afterTomorrowDataObj = [],afterTomorrowTimeDateObj=[];
      var monthTime = moment(SYSTEM.getSystemTime()).format('YYYY-MM-DD');
      var tomorrowTime = moment(monthTime).add(1, 'd').format("YYYY-MM-DD");
      var afterTomorrow = moment(monthTime).add(2, 'd').format("YYYY-MM-DD");
      var afterTomorrowTime = moment(monthTime).add(3, 'd').format("YYYY-MM-DD");
      var todayDate = [], tomorrowDate = [], afterTomorrowDate = [],afterTomorrowTimeDate = [],liveituation=[];
      if (data.resflag) {
        for (var i = 0; i < data.data.length; i++) {
          if(data.data[i].subsec==2){//实况
            todayDataObj.push(data.data[i].temperature);
            todayDate.push(data.data[i].phenomena);
          }
          if (moment(parseInt(data.data[i].tm)).format('YYYY-MM-DD')== monthTime) {
            todayDataObj.push(data.data[i].temperature);
          }
          if (moment(parseInt(data.data[i].tm)).format('YYYY-MM-DD')== tomorrowTime) {
            tomorrowDataObj.push(data.data[i].temperature);
            tomorrowDate.push(data.data[i].phenomena);
          }
          if (moment(parseInt(data.data[i].tm)).format('YYYY-MM-DD') == afterTomorrow) {
            afterTomorrowDataObj.push(data.data[i].temperature);
            afterTomorrowDate.push(data.data[i].phenomena);
          }
          if (moment(parseInt(data.data[i].tm)).format('YYYY-MM-DD') == afterTomorrowTime) {
            afterTomorrowTimeDateObj.push(data.data[i].temperature);
            afterTomorrowTimeDate.push(data.data[i].phenomena);
          }
        }
        var showDataObj;
        if(todayDataObj[1]==""){
          showDataObj=todayDataObj[0];
        }else{
          showDataObj=todayDataObj[1] + '℃ / ' + todayDataObj[0];
        }
        var obj = {
          monm:name,
          liveituation:weatherRealityData,
          todayDate: todayDate ? todayDate[0] : '-',
          tomorrowDate: tomorrowDate ? tomorrowDate[0] : '-',
          afterTomorrowDate: afterTomorrowDate ? afterTomorrowDate[0] : '-',
          afterTomorrowTimeDate:afterTomorrowTimeDate ? afterTomorrowTimeDate[0] : '-',
          todayTemperature: showDataObj,
          tomorrowTemperature: tomorrowDataObj ? tomorrowDataObj[1] + '℃ / ' + tomorrowDataObj[0] : '-',
          afterTomorrowTemperature: afterTomorrowDataObj ? afterTomorrowDataObj[1] + ' ℃/ ' + afterTomorrowDataObj[0] : '-',
          afterTomorrowsTemperature: afterTomorrowTimeDateObj ? afterTomorrowTimeDateObj[1] + ' ℃/ ' + afterTomorrowTimeDateObj[0] : '-',
          mapPoint: mapPoint
        };
        var liveSrc=weatherTypeImage((obj.liveituation.data[0].phenomena).split("转")[0]);
        var toDateSrc=weatherTypeImage((obj.todayDate).split("转")[0]);
        var tomorrowToDateSrc=weatherTypeImage((obj.tomorrowDate).split("转")[0]);
        var tomorrowAfterToDateSrc=weatherTypeImage((obj.afterTomorrowDate).split("转")[0]);
        var src=weatherTypeImage((obj.afterTomorrowTimeDate).split("转")[0]);
        var html = '';
        html += '<div id="popup" class="pointlayer-popup">' +
          '<div class="pointlayer-popup-item">' +
          '<div class="popup-item-name popup-item">实况</div>' +
          '<div class="popup-item-vlaue popup-item">'+'<img src='+liveSrc+' style="width: 20px"/>' + obj.liveituation.data[0].phenomena+ '</div>' +
          '<div class="popup-item-vlaue popup-item">' + obj.liveituation.data[0].temperature+'℃' + '</div>' +
          '</div>' +
          '<div class="pointlayer-popup-item">' +
          '<div class="popup-item-name popup-item">今天</div>' +
          '<div class="popup-item-vlaue popup-item">'+'<img src='+toDateSrc+' style="width: 20px"/>' + obj.todayDate + '</div>' +
          '<div class="popup-item-vlaue popup-item">' + obj.todayTemperature+'℃' + '</div>' +
          '</div>' +
          '<div class="pointlayer-popup-item">' +
          '<div class="popup-item-name popup-item">明天</div>' +
          '<div class="popup-item-vlaue popup-item">'+'<img src='+tomorrowToDateSrc+' style="width: 20px"/>' + obj.tomorrowDate + '</div>' +
          '<div class="popup-item-vlaue popup-item">' + obj.tomorrowTemperature + '</div>' +
          '</div>' +
          '<div class="pointlayer-popup-item">' +
          '<div class="popup-item-name popup-item">后天</div>' +
          '<div class="popup-item-vlaue popup-item">'+'<img src='+tomorrowAfterToDateSrc+' style="width: 20px"/>' + obj.afterTomorrowDate + '</div>' +
          '<div class="popup-item-vlaue popup-item">' + obj.afterTomorrowTemperature + '</div>' +
          '</div>'+
          '<div class="pointlayer-popup-item">' +
          '<div class="popup-item-name popup-item">' + moment(afterTomorrowTime).format("MM") + '月'+moment(afterTomorrowTime).format("DD") + '日' + '</div>' +
          '<div class="popup-item-vlaue popup-item">'+'<img src='+src+' style="width: 20px"/>' + obj.afterTomorrowTimeDate + '</div>' +
          '<div class="popup-item-vlaue popup-item">' + obj.afterTomorrowsTemperature + '</div>' +
          '</div>'
        ;
        html += '</div>';
        showPopup(html, obj);
      }
    }
  });
}
function weatherTypeImage(obj){
  var url;
  $.ajaxSettings.async = false;
  $.getJSON("json/mapjson/weather.json", function(weatherJson) {
    for (var i=0;i<weatherJson.length;i++) {
      if(obj.indexOf(weatherJson[i].name)!=-1){
        url="/images/weather/"+weatherJson[i].code;
        break
      }
    }
  });
  return url

}
var checkNewWeatherIndex;
$(function () {
  note.on("subject.change", (e, subject) => {
    if (subject.id === "7") {
      weatherIsShow = true;
      weatherShow7day=false;
      if(map.findLayerById("clickNewWeatherLayer")){
        map.findLayerById("clickNewWeatherLayer").visible=true;
      }
      initOnLoadWeather("","subject");
    }else{
      weatherIsShow = false;
      hideWeatherLayer();
    }
  });
  note.on("layer.play.frame", function (event, index, provider) {
    checkNewWeatherIndex=index;
    if(index===0){
        if(saveWeatherIDList.length>0){
          for (var i = 0; i < saveWeatherIDList.length; i++) {
            clearInterval(newWeatherDataIndexMap.get(saveWeatherIDList[i]));
          }
        }
      // map.findLayerById("weatherLayerID1").visible=false;
      if(map.findLayerById("weatherLayerID2")){
        map.findLayerById("weatherLayerID2").visible=false;
      }
      if(map.findLayerById("weatherLayerID3")){
        map.findLayerById("weatherLayerID3").visible=false;
      }
      if(map.findLayerById("weatherLayerID4")){
        map.findLayerById("weatherLayerID4").visible=false;
      }
      newWeatherDataIndexMap.delete("one34");
      startWeatherPointTimer(weatherDataLabelListOne,"one34");
      onLoadWeatherLabel(Object.assigns({}, weatherDataLabelListOne), 0);
    }
    if(index===1){
        if(saveWeatherIDList.length>0){
          for (var i = 0; i < saveWeatherIDList.length; i++) {
            clearInterval(newWeatherDataIndexMap.get(saveWeatherIDList[i]));
          }
        }
      if(map.findLayerById("weatherLayerID1")){
        map.findLayerById("weatherLayerID1").visible=false;
      }
      if(map.findLayerById("weatherLayerID2")){
        map.findLayerById("weatherLayerID2").visible=true;
      }
      if(map.findLayerById("weatherLayerID3")){
        map.findLayerById("weatherLayerID3").visible=false;
      }
      if(map.findLayerById("weatherLayerID4")){
        map.findLayerById("weatherLayerID4").visible=false;
      }
      newWeatherDataIndexMap.delete("two34");
      startWeatherPointTimer(weatherDataLabelListTwo,"two34");
      onLoadWeatherLabel(Object.assigns({}, weatherDataLabelListTwo), 0);
    }
    if(index===2){
      if(saveWeatherIDList.length>0){
        for (var i = 0; i < saveWeatherIDList.length; i++) {
          clearInterval(newWeatherDataIndexMap.get(saveWeatherIDList[i]));
        }
      }
      if(map.findLayerById("weatherLayerID1")){
        map.findLayerById("weatherLayerID1").visible=false;
      }
      if(map.findLayerById("weatherLayerID2")){
        map.findLayerById("weatherLayerID2").visible=false;
      }
      if(map.findLayerById("weatherLayerID3")){
        map.findLayerById("weatherLayerID3").visible=true;
      }
      if(map.findLayerById("weatherLayerID4")){
        map.findLayerById("weatherLayerID4").visible=false;
      }
      newWeatherDataIndexMap.delete("three34");
      startWeatherPointTimer(weatherDataLabelListThree,"three34");
      onLoadWeatherLabel(Object.assigns({}, weatherDataLabelListThree), 0);
    }
    if(index===3){
      if(saveWeatherIDList.length>0){
        for (var i = 0; i < saveWeatherIDList.length; i++) {
          clearInterval(newWeatherDataIndexMap.get(saveWeatherIDList[i]));
        }
      }
      if(map.findLayerById("weatherLayerID1")){
        map.findLayerById("weatherLayerID1").visible=false;
      }
      if(map.findLayerById("weatherLayerID2")){
        map.findLayerById("weatherLayerID2").visible=false;
      }
      if(map.findLayerById("weatherLayerID3")){
        map.findLayerById("weatherLayerID3").visible=false;
      }
      if(map.findLayerById("weatherLayerID4")){
        map.findLayerById("weatherLayerID4").visible=true;
      }
      newWeatherDataIndexMap.delete("four34");
      startWeatherPointTimer(weatherDataLabelListFour,"four34");
      onLoadWeatherLabel(Object.assigns({}, weatherDataLabelListFour), 0);
    }
  });
});

function onLoadWeatherLabel(_data, show) {
  if(map.findLayerById("clickNewWeatherLayer")){
    if(window.dimension==="2D"){
      if(map.findLayerById("clickNewWeatherLayer")){
        map.findLayerById("clickNewWeatherLayer").visible=false;
        map.remove(map.findLayerById("clickNewWeatherLayer"))
      }
      require(["myMap/layer/PointLayer"], function (PointLayer) {
        for (var i = 0; i < _data.mapPointArr.length; i++) {
          _data.mapPointArr[i].monm = _data.mapPointArr[i].stcd;
        }
        var pointLayerObj = new PointLayer(_data.mapPointArr,_data.classBreakInfos, "clickNewWeatherLayer");
        map.add(pointLayerObj.pointLayer);
      });
      return;
    }else{
      require(["myMap/layer/PointLayer"], function (PointLayer) {
        for (var i = 0; i < _data.mapPointArr.length; i++) {
          _data.mapPointArr[i].monm = _data.mapPointArr[i].stcd;
        }
        var pointLayerObj = new PointLayer(_data.mapPointArr,_data.classBreakInfos, "clickNewWeatherLayer11");
        map.findLayerById("clickNewWeatherLayer").source.items = pointLayerObj.source;
        map.findLayerById("clickNewWeatherLayer").renderer.classBreakInfos = pointLayerObj.classBreakInfosArr;
      });
      return;
    }
  }
  if(weatherShow7day===false){
    require(["myMap/layer/PointLayer"], function (PointLayer) {
      for (var i = 0; i < _data.mapPointArr.length; i++) {
        _data.mapPointArr[i].monm = _data.mapPointArr[i].stcd;
      }
      var weatherPointLayerBigScreen = new PointLayer(_data.mapPointArr, _data.classBreakInfos, "clickNewWeatherLayer");
      map.add(weatherPointLayerBigScreen.pointLayer);
    });
  }
}

var weatherTimerFlag = 0,newWeatherDataIndexMap,saveWeatherIDList=[];
var startWeatherPointTimer = function (_data,id) {
  var classBreakInfos1 = [], mapPointArr = [];
  var dataListWeather = [];
  for (var j = 0; j < 5; j++) {
    var obj = {
      mapPointArr: [],
      classBreakInfos: []
    };
    for (var i = 0; i < _data.mapPointArr.length; i++) {
      classBreakInfos1 = [];
      mapPointArr = [];
      var dataUrl = Object.assigns({}, _data.classBreakInfos[i]);
      dataUrl.symbol.url = _data.pngDataListFile[i] + _data.pngDataList[i][j];
      obj.mapPointArr.push(_data.mapPointArr[i]);
      obj.classBreakInfos.push(dataUrl);
    }
    dataListWeather.push(obj);
  }
  initLoadNewWeatherSetInterval(id,dataListWeather);
};

function initLoadNewWeatherSetInterval(id,data) {
  if(window.dimension==="2D"){
    onClickDataRefresh(data[0],id);
  }else{
    var warmPointWeatherTimer2 = window.setInterval(function () {
      weatherTimerFlag++;
      if (weatherTimerFlag === 5) {
        weatherTimerFlag = 0;
      }
      onClickDataRefresh(data[weatherTimerFlag],id);
    }, 400);
    if (saveWeatherIDList.indexOf(id) == -1) {
      saveWeatherIDList.push(id);
    }
    newWeatherDataIndexMap.set(id , warmPointWeatherTimer2);
  }
}

function onClickDataRefresh(data,id) {
  require(["myMap/layer/PointLayer"], function (PointLayer) {
    if(id==="one34"){
      let pointLayerObj1 = new PointLayer(data.mapPointArr, data.classBreakInfos, 'weatherLayerID1');
      if (map.findLayerById('weatherLayerID1')) {
        if(window.dimension==="2D"){
          map.remove(map.findLayerById('weatherLayerID1'));
          map.add(pointLayerObj1.pointLayer);
        }else{
          map.findLayerById('weatherLayerID1').source.items = pointLayerObj1.source;
          map.findLayerById('weatherLayerID1').renderer.classBreakInfos = pointLayerObj1.classBreakInfosArr;
          map.findLayerById('weatherLayerID1').fields = pointLayerObj1.fields;
          map.findLayerById('weatherLayerID1').labelingInfo = [pointLayerObj1.labelClass];
        }
      }
    }
    if(id==="two34"){
      let pointLayerObj1 = new PointLayer(data.mapPointArr, data.classBreakInfos, 'weatherLayerID2');
      if (map.findLayerById('weatherLayerID2')) {
        if(window.dimension==="2D"){
          map.remove(map.findLayerById('weatherLayerID2'));
          map.add(pointLayerObj1.pointLayer);
        }else{
          map.findLayerById('weatherLayerID2').source.items = pointLayerObj1.source;
          map.findLayerById('weatherLayerID2').renderer.classBreakInfos = pointLayerObj1.classBreakInfosArr;
        }
      }
    }
    if(id==="three34"){
      let pointLayerObj1 = new PointLayer(data.mapPointArr, data.classBreakInfos, 'weatherLayerID3');
      if (map.findLayerById('weatherLayerID3')) {
        if(window.dimension==="2D"){
          map.remove(map.findLayerById('weatherLayerID3'));
          map.add(pointLayerObj1.pointLayer);
        }else{
          map.findLayerById('weatherLayerID3').source.items = pointLayerObj1.source;
          map.findLayerById('weatherLayerID3').renderer.classBreakInfos = pointLayerObj1.classBreakInfosArr;
        }
      }
    }
    if(id==="four34"){
      let pointLayerObj1 = new PointLayer(data.mapPointArr, data.classBreakInfos, 'weatherLayerID4');
      if (map.findLayerById('weatherLayerID4')) {
        if(window.dimension==="2D"){
          map.remove(map.findLayerById('weatherLayerID4'));
          map.add(pointLayerObj1.pointLayer);
        }else{
          map.findLayerById('weatherLayerID4').source.items = pointLayerObj1.source;
          map.findLayerById('weatherLayerID4').renderer.classBreakInfos = pointLayerObj1.classBreakInfosArr;
        }
      }
    }

  })
}