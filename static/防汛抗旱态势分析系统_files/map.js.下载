var map, view, iHome, graphicsLayer; // 地图容器、视图容器、用户主视角、graphics容器，河网单独处理操作
var mapCurrentPoint = [];
var windowWidth = 1920;
var viewBox = [];
var weatherIsShow; //实时天气
var reservoir = [];
var layerID
var extent = {
  xmin: 72.40,
  ymin: 5.52,
  xmax: 134.230,
  ymax: 50.33,
  spatialReference: {
    wkid: 3857
  }
}; //初始化显示范围
var gloableZoom = 3;
var center = ([104.2663955, 28.4832015]); //中国区经纬度为中心点
var chinaCenter = [104.2663955, 28.4832015];
var showTabel;
require([
  "esri/Map",
  "esri/views/MapView", //3D地图
  "esri/views/SceneView", //3D地图
  "myMap/layer/GoogleAnnoLayer", //引用自定义谷歌地图标注
  "esri/layers/BaseTileLayer",
  "esri/widgets/Zoom",
  "esri/layers/WMSLayer",
  "esri/layers/GraphicsLayer",
  "esri/layers/GroupLayer",
  "esri/core/watchUtils",
  "esri/geometry/support/webMercatorUtils",
  "myMap/layer/GoogleImageLayerBaseMap", //引用加载地图点模块
  "esri/widgets/Home",
  "esri/Viewpoint",
  "esri/Camera",
  "myMap/layer/MapToolBar",
  "dojo/domReady!"
], function (Map, MapView, SceneView, GoogleAnnoLayer, BaseTileLayer, Zoom, WMSLayer, GraphicsLayer, GroupLayer,
  watchUtils, webMercatorUtils, GoogleImageLayerBaseMap, Home, Viewpoint, Camera, MapToolBar) {

  window.WMSLayer = WMSLayer;
  window.GroupLayer = GroupLayer;
  window.BaseTileLayer = BaseTileLayer;
  window.watchUtils = watchUtils;


  //实例化谷歌影像图模块
  var googleImageLayerBaseMap = window.basemap = new GoogleImageLayerBaseMap();


  map = new Map({
    basemap: googleImageLayerBaseMap
  });

  graphicsLayer = new GraphicsLayer({
    id: "tempGraphics"
  });

  note.on("view.ready", function () {
    // //实例化图层工具箱模块
    var mapToolBar = new MapToolBar(view, graphicsLayer);
    map.add(graphicsLayer);
  })
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // 3D/3D switch
  //

  window.dimensionSwitch = function (dimension, position) {
    let zoom = view && view.zoom || 4;
    if (position == null) {
      position = view.camera && view.camera.position || view.center;
    }
    view && view.destroy();
    if (dimension === "2D") {
      view = new MapView({
        container: "viewDiv",
        center: position,
        map: map,
        ui: {
          components: []
        },
        constraints: {
          minZoom: 3
        },
        // spatialReference:
        // spatialReference: {
        //   wkid: 4326
        // },
        rotationEnabled: false
      });
    } else if (dimension === "3D") {
      view = new SceneView({
        container: "viewDiv",
        camera: {
          position
        },
        map: map,
        environment: {
          starsEnabled: false
        },
        ui: {
          components: []
        }
      });
      view.when(() => {
        view._stage.setRenderParams({
          idleSuspend: false
        });
      })
    } else {
      throw new Error("Unknown dimension:" + dimension);
    }
    note.notify("view.ready");
    return new Promise(resolve => {
      initView(view).then(() => {
        view.zoom = zoom;
        resolve(window.dimension = dimension);
        localStorage.setItem("map.dimension", dimension);
        note.notify("map.dimension.switched", view, dimension);
        if (dimension === "3D") {
          var chinaCenter = [104.2663955, 28.4832015];
          var userCamera = new Camera({
            position: {
              x: chinaCenter[0], // lon
              y: chinaCenter[1], // lat
              z: 10000000, // elevation in meters
            },
            heading: 0, // facing due south
            tilt: 3 // bird's eye view
          });

          let viewpoint = new Viewpoint({
            camera: userCamera
          });
          iHome = new Home({
            view: view,
            viewpoint: viewpoint
          });
        } else {
          var chinaCenter = [104.2663955, 35.4832015];
          view.zoom = 4;
          view.goTo(chinaCenter);
        }
      })
    });
  };

  function initView(view) {
    //获取当前窗口的width和box,并监听拖动重载地图点
    watchUtils.whenTrue(view, "stationary", function () {
      currentZoom = view.zoom; //当前缩放级别
      if (view.extent) {
        var geographic = webMercatorUtils.webMercatorToGeographic(view.extent); //将墨卡托范围转换为地理范围
        var xmin = geographic.xmin;
        var ymin = geographic.ymin;
        var xmax = geographic.xmax;
        var ymax = geographic.ymax;
        var box = [xmin, ymin, xmax, ymax];
        windowWidth = view.width;
        viewBox = box;

        if (gloablePointTypeObj.length > 0) {
          for (var i = 0; i < gloablePointTypeObj.length; i++) {
            toAddMap(gloablePointTypeObj[i], "mapDrag");
          }
        }
        if (weatherIsShow == true) {
          console.info(parseInt(view.zoom));
          if (parseInt(view.zoom) <= 5) {
            initOnLoadWeather(5);
          } else if (5 < parseInt(view.zoom) && parseInt(view.zoom) <= 8) {
            initOnLoadWeather(7);
          } else {
            initOnLoadWeather(11);
          }
        }
        // toAddMap(gloableStation,"mapDrag");

        // mapDragAddPoint("mapDrag", typeArr);
        // if (isLoadMapPoint) {
        //   // toRemoveMapPointMany(currentLayerParamArr);
        //   var typeArr = [];
        //   currentLayerParamArr.map(function (ele) {
        //     typeArr.push(ele);
        //   });
        //   mapDragAddPoint("mapDrag", typeArr);
        // }
        view.on("mouse-wheel", function (event) {
        });
      } else {
        windowWidth = 1920;
        viewBox = [];
      }
    });

    //监听鼠标移动事件
    view.on('pointer-move', function (event) {
      clearTimeout(showTabel);
      if (!isRiverNetworkSelect) view.popup.close();
      showTabel = setTimeout(function () {
        var screenPoint = {
          x: event.x,
          y: event.y
        };
        // event.stopPropagation();
        // 在点击的位置搜索图形
        view.hitTest(screenPoint).then(function (response) {
          var result = response.results[0];
          if (result) {
            var pointObj = {
              type: result.graphic.attributes.motype,
              mocd: result.graphic.attributes.mocd,
              name: result.graphic.attributes.monm,
              stcd: result.graphic.attributes.stcd,
              id: result.graphic.attributes.id
            };
            //如果有添加的图形对象才执行
            var type = pointObj.type;
            if (type == "111") {
              showMapEarlyWarin(pointObj);
            } else if (type == "98") {
              // initWeatherForecast(pointObj, result.mapPoint);
              initNewWeatherForecast(pointObj, result.mapPoint);
            } else if (type == "hpzhd") {
              clickHpzhdStation(result.graphic.attributes, type, result.mapPoint)
            } else if (type == "hpzhyhd") {
              clickHpzhdStation(result.graphic.attributes, type, result.mapPoint)
            } else if (type == "TF-01") {
              initLoadTyphoon(result.graphic.attributes, result.mapPoint);
            } else if (type == "TF-02") {
              initLoadPredictionTyphoon(result.graphic.attributes, result.mapPoint);
            } else if (type == "khwz") {
              clickKhwzStation(result.graphic.attributes, result.mapPoint);
            } else if (type == "qsydw") {
              clickQsydwStation(result.graphic.attributes, result.mapPoint);
            } else if (type == "fhwz") {
              clickFhwzStation(result.graphic.attributes, result.mapPoint);
            } else if (type == "qxdw") {
              clickQxdwStation(result.graphic.attributes, result.mapPoint);
            } else if(type=='01'){
              clickFloodMapPoint(result.graphic.attributes, result.mapPoint);
            } else {
              if (result.graphic) {
                clickTypePoint(pointObj, result.mapPoint)
              }
            }
          }
        })
      }, 500);
    });

    //监听双击事件
    view.on("double-click", function (event) {
      var screenPoint = {
        x: event.x,
        y: event.y
      };
      event.stopPropagation();
    });

    //监听地图点单击事件
    view.on("click", function (event) {
      //原双击事件
      event.stopPropagation();
      var screenPoint = {
        x: event.x,
        y: event.y
      };
      event.stopPropagation();

      // 在点击的位置搜索图形
      view.hitTest(screenPoint).then(function (response) {
        var result = response.results[0];
        if (dimension !== '3D') {
          var point = view.toMap({ x: event.x, y: event.y })
          var lon = point.longitude.toFixed(6);
          var lat = point.latitude.toFixed(6);
          var obj = { 'mapPoint': { 'longitude': lon, 'latitude': lat } };
          result = obj;
        }
        if (mapMarkerFunc) addPointMarkerToMap(result);

        if (result) {
          reservoir = [];
          reservoir[0] = (result.graphic.attributes.lgtd);
          reservoir[1] = (result.graphic.attributes.lttd);
          console.info(result.graphic.attributes)
          var pointObj = {
            type: result.graphic.attributes.motype,
            mocd: result.graphic.attributes.mocd,
            name: result.graphic.attributes.monm,
            stcd: result.graphic.attributes.stcd,
            wscd: result.graphic.attributes.wscd,
            eacId: result.graphic.attributes.eacId,
          };


          //如果有添加的图形对象才执行
          if (result.graphic) {
            var type = pointObj.type;
            switch (type) {
              case "13":
                getEarlyWarningDbClickData(result.graphic.attributes, "mapPoint"); //山洪/中小流域
                break;
              case "31":
                loadRiverUnionDispatch(); //贵阳水库联合调度
                break;
              case "09":
                initVideoData(pointObj); //视频双击事件
                break;
              case "33":
                loadFloodAnalysis(result.graphic.attributes); //淹没分析
                break;
              case "04":
                doubleClickRain(result.graphic.attributes); //雨量站
                break;
              case "05":
                doubleClickMeteorological(result.graphic.attributes); //气象站
                break;
              case "30":
                doubleClickSoilMoisture(result.graphic.attributes); //土壤墒情站
                break;
              // case "31":
              //   if (pointObj.wscd != 0) {
              //     note.notify("scheduling.generalized.open", pointObj.wscd); //概化调度
              //   }
              //   break;
              case "32":
                if (pointObj.stcd != 0) {
                  note.notify("scheduling.generalized.open", pointObj.stcd); //概化调度
                }
                break;
              case "hpzhyhd":
                doubleClickHpzhyhd(result.graphic.attributes);
                break;
              case "hpzhd":
                doubleClickHpzhyhd(result.graphic.attributes);
                break;
              case "TF-01":
                // clickTyphoonData(result.graphic.attributes, result.mapPoint);
                break;
              default:
                monitorClick(pointObj, result.graphic.attributes);
                break
            }
          }
        }
      })

    });

    let loc = $("#lonlat");
    //显示经纬度
    view.on("pointer-move", function (event) {
      if (dimension !== "3D") {
        var point = view.toMap({ x: event.x, y: event.y })
        var lon = point.longitude.toFixed(6);
        var lat = point.latitude.toFixed(6);
        var txt = lon + ',' + lat;
        $('#boxLatLon-info').empty();
        $('#boxLatLon-info').append(txt);
      } else {
        var screenPoint = {
          x: event.x,
          y: event.y
        };
        view.hitTest(screenPoint).then(function (response) {
          var result = response.results[0];
          if (result) {
            var lon = result.mapPoint.longitude.toFixed(6);
            var lat = result.mapPoint.latitude.toFixed(6);
            var txt = lon + ',' + lat;
            $('#boxLatLon-info').empty();
            $('#boxLatLon-info').append(txt);
            //如果有添加的图形对象才执行
            if (result.graphic) { }
          } else {
            $('#boxLatLon-info').empty()
          }
        });
      }
    });
    return new Promise(resolve => view.when(resolve));
  }


  const center = {
    x: 164.2663955,
    y: 28.4832015,
    z: 35000000,
    spatialReference: 4326
  };
  window.dimension = localStorage.getItem("map.dimension") || "3D";
  if (THREE_DIMENSION_SUPPORT === false) window.dimension = "2D";
  dimensionSwitch(dimension, center).then(() => {
    getUserRegion();
    note.notify("map.ready");
  });
});

function loadMapLayers(_layers) {
  require([
    "esri/layers/WMSLayer",
    "esri/layers/TileLayer",
    "esri/layers/ImageryLayer",
    "esri/layers/MapImageLayer",
    "esri/layers/KMLLayer",
    "esri/layers/FeatureLayer",
    "esri/layers/WebTileLayer",
    "esri/layers/ElevationLayer",
    "esri/layers/WMTSLayer",
  ], function (WMSLayer, TileLayer, ImageryLayer, MapImageLayer, KMLLayer, FeatureLayer, WebTileLayer, ElevationLayer, WMTSLayer) {
    let layer = null,
      type = (_layers.maptype).toLowerCase();
    switch (type) {
      case "wms": {
        layer = new WMSLayer({
          id: _layers.id + "",
          url: _layers.url,
          sublayers: [{
            name: _layers.params
          }],
          fullExtent: _layers.extentVo || extent
        })
      }
        break;
      case "wmts": {
        layer = new WebTileLayer({
          id: _layers.id + "",
          urlTemplate: _layers.url,
          fullExtent: _layers.extentVo || extent
        })
      }
        break;
      case "elev": {
        layer = new ElevationLayer({
          id: _layers.id + "",
          url: _layers.url,
          fullExtent: _layers.extentVo || extent
        });
      }
        break;
      case "feature": {
        layer = new FeatureLayer({
          id: _layers.id + "",
          url: _layers.url,
          outFields: ["*"],
          fullExtent: _layers.extentVo || extent
        })
      }
        break;
      case "featurelayer": {
        addBaseMapByFeatureLayer(_layers);
        return
      }
      case "mapimage": {
        layer = new MapImageLayer({
          id: _layers.id + "",
          url: _layers.url,
          sublayers: [{
            id: _layers.params + ""
          }],
          fullExtent: _layers.extentVo || extent
        })
      }
        break;
      case "kml":
      case "tile": {
        layer = new WebTileLayer({
          id: _layers.id + "",
          urlTemplate: _layers.url,
          fullExtent: _layers.extentVo || extent
        })
      }
        break;
    }
    if (type === "elev") {
      let eleLayer = map.allLayers.find((item) => item.id === _layers.id);
      if (eleLayer) {
        map.ground.layers.forEach(function (item) {
          item.visible = true;
        });
      } else {
        map.ground.layers.add(layer);
      }
    } else {
      map.layers.add(layer);
    }
  });
}

function delMapLayersById(id) {
  let layer = map.allLayers.find((item) => item.id === id);
  if (layer && id !== "layer_base_elev") {
    map.layers.remove(layer);
  } else {
    map.ground.layers.forEach(function (item) {
      item.visible = false;
    });
  }
}

$(function () {
  note.on("layer.add", (event, params) => {
    if (params && params.maptype)
      loadMapLayers(params);
  });
  note.on("layer.remove", (event, id) => {
    delMapLayersById(id + "");
  });

  require(["esri/core/declare", "esri/layers/WMSLayer"], function (declare, WMSLayer) {
    window.StatusableWMSLayer = declare(WMSLayer, {
      properties: {
        fetchStatus: "unload",
        status: "unload",
        index: null
      },
      fetchImage: function (extent, width, height, option) {
        this.set("fetchStatus", "fetching");
        let promise = this.__proto__.__proto__.fetchImage.call(this, extent, width, height, option)
        promise.then(() => this.set("fetchStatus", "fetched"));
        promise.catch(() => this.set("fetchStatus", "error"));
        return promise;
      }
    });
  })

});
