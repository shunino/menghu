/*********  系统公用对象定义  start  xjg   **************/
var SYSTEM = function () {
};
SYSTEM.getSystemTime = getSystemTime;

SYSTEM.ALARM_COLOR_1 = 'RED';
SYSTEM.ALARM_COLOR_2 = 'ORANGE';
SYSTEM.ALARM_COLOR_3 = 'YELLOW';
SYSTEM.ALARM_COLOR_4 = 'BLUE';
SYSTEM.ALARM_CESIUM_COLOR_1 = {red: 1, green: 0, blue: 0, alpha: 0.5};
SYSTEM.ALARM_CESIUM_COLOR_2 = {red: 1, green: 0.7, blue: 0.1, alpha: 0.5};
SYSTEM.ALARM_CESIUM_COLOR_3 = {red: 1, green: 0.9, blue: 0, alpha: 0.5};
SYSTEM.ALARM_CESIUM_COLOR_4 = {red: 0, green: 0, blue: 1, alpha: 0.5};



//获取序列号
SYSTEM.getSequence = function () {
  return Guid.NewGuid().ToString();
}

THREE_DIMENSION_SUPPORT = true;
/*********  系统公用对象定义  end  xjg   **************/

/*********  地图对象定义  start  xjg   **************/
var obj_type_reservoir = '01';//水库 水库站
var obj_type_river = '02';//河道(河段)
var obj_type_city = '03';//防洪城镇
var obj_type_waterlogged = '16';//城市易涝点
var obj_type_mountain_torrents = '14';//山洪小流域
var obj_type_river_section = '15';//河道断面
var obj_type_rain_station = '04';//雨量站
var obj_type_weather_station = '05';//气象站
var obj_type_gate_station = '20';//闸位站
var obj_type_rain = '8';//暴雨预警
var obj_type_soilr = "30";//土壤墒情站

var obj_type_riverWaterLevelStation = '06';//河道水位站
var obj_type_riverHydrologyStation = '07';//河道水文站
var obj_type_weather_real = '105';//天气对象(天气实况)
var obj_type_weather_fore = '106';//天气对象(天气预报)
var obj_type_3d_chart = '107';//3d图标

var earth_obj_type_point = '0';//点
var earth_obj_type_polyline = '1';//线
var earth_obj_type_polygon = '2';//面
//图层属性
var startrows = '0';//行\数
var layerpagesize = '1000000000';//每页显示数
var type_river_section_layer = '201';//重点河道
var type_flood_control_town_layer = '202';//防洪城镇
var type_reservoir_hydropower_station_layer = '203';//水库水电站
var type_small_watershed_layer = '204';//山洪小流域
var type_urban_waterlogging_point_layer = '205';//城市易涝点
var type_administrative_division_layer = '206';//行政区划
var type_hidden_points_station_layer = '207';//隐患点
var type_administrative_resident_layer = '208';//行政驻地
var type_key_unit_layer = '209';//重点单位
var type_river_system_layer = '210';//河道水系
var type_beware_layer = '211';//提防
var type_traffic_road_layer = '212';//交通道路
var type_gate_dam_layer = '213';//闸坝
var type_scenic_spot_layer = '214';//旅游景点
var type_diversion_project_layer = '215';//引水工程
var type_construction_in_progress_layer = '14';//在建工程
var type_material_warehouse_layer = '216';//物资仓库
var type_rescue_team_layer = '104';//抢险队伍
var type_transfer_route_layer = '217';//转移路线
var type_settlement_point_layer = '218';//安置点
var type_water_source_layer = '219';//水源地
var type_sewage_treatment_plant_layer = '220';//污水处理厂
var type_outfall_layer = '221';//排污口
var type_water_station_layer = '222';//水务站
var type_rainfall_station_layer = '223'//雨量站'
var type_Flood_discharge_layer = '224'//泄流设施
var type_weather_station_layer = '225'//气象站
/*********  地图对象定义  end   xjg   **************/
//图层名称,dom Id
  //监控对象数据
var COMMON_LAYER_DATA = [
    {
      name: '水库水电站',
      id: 'small-watershed'
    }, {
      name: '防洪城镇',
      id: 'flood-control-town'
    }, {
      name: '山洪小流域',
      id: 'reservoir-hydropower-station'
    }, {
      name: '重点河道',
      id: 'key-channel'
    }, {
      name: '城市易涝点',
      id: 'urban-waterlogging-point'
    }, {
      name: '南明河干流',
      id: 'nanMingHe'
    }, {
      name: '视频图像',
      id: 'video-station'
    }, {
      name: '泄流设施',
      id: 'gate-station'
    }, {
      name: '雨量站',
      id: 'rain-station'
    }, {
      name: '气象站',
      id: 'weather -station'
    }
  ];
//基础图层
var WATER_PROJECT_DATA = [
  {
    name: '行政区划',
    id: 'administrative-division'
  }, {
    name: '隐患点',
    id: 'hidden-points'
  }, {
    name: '行政驻地',
    id: 'administrative-resident'
  }, {
    name: '重点单位',
    id: 'key-unit'
  }, {
    name: '河道水系',
    id: 'river-system'
  }, {
    name: '堤防',
    id: 'beware'
  }, {
    name: '交通道路',
    id: 'traffic-road'
  }, {
    name: '闸坝',
    id: 'gate-dam'
  }, {
    name: '旅游景点',
    id: 'scenic-spot'
  }, {
    name: '引水工程',
    id: 'diversion-project'
  }, {
    name: "在建工程",
    id: 'construction-in-progress'
  }
];
//专题图层
var FLOOD_DROUGHT_DATA = [
  {
    name: '安置点',
    id: 'settlement-point'
  }, {
    name: '抢险队伍',
    id: 'rescue-team'
  }, {
    name: '水务站',
    id: 'water-station'
  }, {
    name: '物资仓库',
    id: 'material-warehouse'
  }, {
    name: '水源地',
    id: 'water-source'
  }, {
    name: '转移路线',
    id: 'transfer-route'
  }, {
    name: '排污口',
    id: 'outfall'
  }, {
    name: '污水处理厂',
    id: 'sewage-treatment-plant'
  }/*,{
        name:'雨量站',
        id:'rainfall-station-plant'
    }*/
];


//表示全局唯一标识符 (GUID)。
function Guid(g) {
  var arr = new Array(); //存放32位数值的数组

  if (typeof (g) == "string") { //如果构造函数的参数为字符串
    InitByString(arr, g);
  }
  else {
    InitByOther(arr);
  }
  //返回一个值，该值指示 Guid 的两个实例是否表示同一个值。
  this.Equals = function (o) {
    if (o && o.IsGuid) {
      return this.ToString() == o.ToString();
    }
    else {
      return false;
    }
  }
  //Guid对象的标记
  this.IsGuid = function () {
  }
  //返回 Guid 类的此实例值的 String 表示形式。
  this.ToString = function (format) {
    if (typeof (format) == "string") {
      if (format == "N" || format == "D" || format == "B" || format == "P") {
        return ToStringWithFormat(arr, format);
      }
      else {
        return ToStringWithFormat(arr, "D");
      }
    }
    else {
      return ToStringWithFormat(arr, "D");
    }
  }

  //由字符串加载
  function InitByString(arr, g) {
    g = g.replace(/\{|\(|\)|\}|-/g, "");
    g = g.toLowerCase();
    if (g.length != 32 || g.search(/[^0-9,a-f]/i) != -1) {
      InitByOther(arr);
    }
    else {
      for (var i = 0; i < g.length; i++) {
        arr.push(g[i]);
      }
    }
  }

  //由其他类型加载
  function InitByOther(arr) {
    var i = 32;
    while (i--) {
      arr.push("0");
    }
  }

  /*
   根据所提供的格式说明符，返回此 Guid 实例值的 String 表示形式。
   N  32 位： xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   D  由连字符分隔的 32 位数字 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
   B  括在大括号中、由连字符分隔的 32 位数字：{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}
   P  括在圆括号中、由连字符分隔的 32 位数字：(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
   */
  function ToStringWithFormat(arr, format) {
    switch (format) {
      case "N":
        return arr.toString().replace(/,/g, "");
      case "D":
        var str = arr.slice(0, 8) + "-" + arr.slice(8, 12) + "-" + arr.slice(12, 16) + "-" + arr.slice(16, 20) + "-" + arr.slice(20, 32);
        str = str.replace(/,/g, "");
        return str;
      case "B":
        var str = ToStringWithFormat(arr, "D");
        str = "{" + str + "}";
        return str;
      case "P":
        var str = ToStringWithFormat(arr, "D");
        str = "(" + str + ")";
        return str;
      default:
        return new Guid();
    }
  }
}

//Guid 类的默认实例，其值保证均为零。
Guid.Empty = new Guid();
//初始化 Guid 类的一个新实例。
Guid.NewGuid = function () {
  var g = "";
  var i = 32;
  while (i--) {
    g += Math.floor(Math.random() * 16.0).toString(16);
  }
  return new Guid(g);
}

let canvas = document.createElement("canvas");
let gl = canvas.getContext("webgl");
if (gl === null) {
  THREE_DIMENSION_SUPPORT = false;
}