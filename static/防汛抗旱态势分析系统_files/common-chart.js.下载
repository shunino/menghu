/**
 * Created by Administrator on 2017/1/18.
 */
var chartArray = [],rightMaxChartArray=[];
var Kjfx1Chart1 = null, Kjfx1Chart2 = null, KjfxMaxChart1 = null, KjfxMaxChart2 = null;
var kjfxOpiton;
var resizeChart = function (chart) {
  for (var i = 0; i < chartArray.length; i++) {
    if (!$(chartArray[i].getDom()).is(":hidden")) {
      chartArray[i].resize();
    }
  }
}
var disposeChart = function (chart) {
  for (var i = 0; i < chartArray.length; i++) {
    if (!$(chartArray[i].getDom()).is(":hidden")) {
      chartArray[i].dispose();
    }
  }
}

function getArrayMax(arrayList) {
  if (!arrayList) {
    return 0;
  }
  if (arrayList.length == 0) {
    return 0;
  }
  var max = arrayList[0] || 0;
  if (max == "-") {
    max = Number.MIN_VALUE;
  }
  for (var i = 0; i < arrayList.length; i++) {
    if (arrayList[i] || arrayList[i] == 0 && arrayList[i] != "-") {
      var t = parseFloat(arrayList[i]);
      if (t > max) {
        max = arrayList[i];
      }
    }
  }
  if (max == Number.MIN_VALUE) {
    max = 5;
  }
  return max;
}

function getArrayMin(arrayList) {
  if (!arrayList) {
    return 0;
  }
  if (arrayList.length == 0) {
    return 0;
  }
  var min;
  if (arrayList[0] == null || arrayList[0] == undefined || isNaN(arrayList[0] || this[0] == "-")) {
    min = Number.MAX_VALUE;
  } else {
    min = arrayList[0];
  }
  for (var i = 0; i < arrayList.length; i++) {
    if (arrayList[i] || arrayList[i] == 0 && arrayList[i] != "-") {
      var t = parseFloat(arrayList[i]);
      if (t < min) {
        min = arrayList[i];
      }
    }
  }
  if (min == "-" || min == Number.MAX_VALUE) {
    min = 0;
  }
  return min;

}

function getDataMaxMin(max, min, type) { //根据最大最小值算出合适的图表y轴最大最小值
  var Max, Min;
  if (max == Number.NEGATIVE_INFINITY || max == undefined || max == null || parseInt(max) == 0) {
    max = 5;
  }
  if (min == Number.POSITIVE_INFINITY || min == undefined || min == null || parseInt(min) == 0) {
    min = 0;
  }
  max = Number(max), min = Number(min);
  Max = Math.ceil(max / 5) * 5;
  Min = Math.floor(min / 5) * 5;
  if (type) {
    Max += 5;
  } else {
    if (Max > 1000) {
      Max += 30;
      if (Min > 1000) {
        Min -= 30
      }
    }
    if (Max < 1000 && Max > 500) {
      Max += 10;
    }
    if (Max <= 500 && Max > 20) {
      Max += 5;
    }
  }
  if (min > 3) {
    if ((max - min) < 1) {
      Max = Math.ceil(max + 1);
      Min = Math.floor(min - 1);
    } else {
      Max = Math.ceil(max);
      Min = Math.floor(min);
    }
  }
  var interval = parseInt((Max - Min) / 5) == 0 ? 1 : parseInt((Max - Min) / 5);
  if (isNaN(Max)) {
    Max = 5;
  }
  if (isNaN(Min)) {
    Min = 0;
  }
  return {
    max: Max,
    min: Min,
    interval: interval
  }
}

//创建数据图表的表格
function createChartTable(params, win) {
  var id = params.id;
  $('#' + id).bootstrapTable('destroy');
  $('#' + id).bootstrapTable('load', params.data);
  var option = {
    height: params.height,
    columns: params.columns,
    data: params.data,
    pagination: true,
    pageNumber: 1, //初始化加载第一页，默认第一页
    pageSize: 50, //每页的记录行数（*）
    pageList: [20, 50, 100, 200],
  };
  $('#' + id).bootstrapTable(option);
  if (win) {
    resizeTablePaddingBottom(win);
  }
}

var CHART_COLOR = ['#0041FF', '#FF7E51', '#EE00EE', '#9DC70D', '#29FB07', '#0CC5FF', '#FFBED6', '#00FAFF', '#F9FBFF', '#FF13E3', '#EDFF00']; //公共图表颜色
var chartColor = {
  realRainColor: "#7bcce4",
  foreRainColor: '#3399ff',
  realInFlowColor: '#49c158',
  foreInFlowColor: '#ff3366',
  realOutFlowColor: '#fee0b9',
  foreOutFlowColor: '#fff585',
  realDamBeforeColor: '#bcdc5c',
  foreDamBeforeColor: '#4ff7b1',
  realDamAfterColor: '#ff7e51',
  foreDamAfterColor: '#f99f4e'
}
var title = { //标题
  show: false,
  text: "",
  textStyle: {
    color: '#fff',
    fontSize: 14
  },
  left: 'center'
};
var legend = { //图例
  type: 'scroll',
  show: false,
  left: 'center',
  top: 0,
  pageTextStyle: {
    color: '#ccc'
  },
  pageIconInactiveColor: '#2f4554',
  pageIconColor: '#fff',
  selected: {},
  textStyle: {
    color: '#fff',
    fontSize: 10
  },
  tooltip: {},
  data: []
};
var grid = { //表格
  left: '70px',
  right: '10%',
  top: '50px',
};
var xAxis = [{ //x轴
  boundary: true,
  axisLine: {
    onZero: false
  },
  nameLocation: 'middle',
  nameGap: 25,
  axisLine: {
    show:false,
    lineStyle: {
      color: '#71787f'
    },
  },
  axisTick: {
    lineStyle: {
      color: '#fff'
    },
    alignWithLabel: true,
  },
  axisLabel: {
    textStyle: {
      color: '#fff'
    },
  },
  splitLine: {
    show: false
  },
  nameTextStyle: {
    color: '#fff'
  }
}];
var yAxis = [ //y轴
  {
    type: 'value',
    nameLocation: 'middle',
    nameGap: 45,
    nameTextStyle: {
      color: '#fff'
    },
    splitLine: {
      show: false
    },
    axisLine: {
      show:false,
      lineStyle: {
        color: '#fff'
      }
    },
    axisTick: {
      lineStyle: {
        color: '#fff'
      }
    },
    axisLabel: {
      textStyle: {
        color: '#fff'
      },
      formatter: function (value, index) {
        var value = "" + value;
        return value;
      }
    },
    splitArea: {
      show: true,
      areaStyle: {
        color: ['rgba(17,85,127,0.3)', 'rgba(121,166,191,0.3)']
      }
    },

  },
  {
    nameLocation: 'middle',
    nameTextStyle: {
      color: '#fff'
    },
    nameGap: 45,
    axisLine: {
      show:false,
      lineStyle: {
        color: '#fff'
      }
    },
    axisTick: {
      lineStyle: {
        color: '#fff'
      },
      show: false
    },
    axisLabel: {
      textStyle: {
        color: '#fff'
      },
      show: false
    },
    splitLine: {
      show: false
    }
  }
];
var itemStyle = {
  normal: {
    opacity: 0 //拐点不显示
  }
};

function getChartMarkLine(xData, min, max, position) {
  var MarkLine = {
    silent: true,
    symbol: 'none',
    data: [
      [{
        coord: [xData, min],
      }, {
        coord: [xData, max],
        lineStyle: {
          normal: {
            color: '#e0db1e',
            type: 'dotted'
          }
        },
        label: {
          normal: {
            position: (position ? position : 'start'),
            formatter: xData
          }
        }
      }]
    ]
  };
  return MarkLine;
}

/**
 * 初始化来水预报
 * @param params数据对象 其中：id图表dom的id值 title图表标题 data图表数据 type:监控对象类型
 * **/
function initRainForecast(params, win, clickType) {
  var titleData = params.title;
  var xData = params.xData;
  if (!xData) {
    return null;
  }
  var rainData = params.rainData;
  var pt = params.publishTime;
  var fTime = params.publishTime;
  var oneTime = params.oneTime; //moment(fTime).add(3, 'hours').format("YYYY[-]MM[-]DD HH:mm");//params.oneTime;
  var twoTime = params.twoTime; //moment(fTime).add(5, 'hours').format("YYYY[-]MM[-]DD HH:mm");//params.twoTime;
  var threeTime = null; //moment(fTime).add(73, 'hours').format("YYYY[-]MM[-]DD HH:mm");//params.threeTime;
  var rainMarkLine, otherLeftMarkLine, otherRightMarkLine, markArea;
  var maxRain = getArrayMax(rainData);
  var minRain = 0;
  var rainYAxis = getDataMaxMin(maxRain, minRain);
  var rainId = params.rainId;
  var otherId = params.otherId;
  var rainLegend = ["降水(mm)"];
  // if(maxRain<15){
  //     maxRain=15;
  // }else{
  //     maxRain=Math.ceil(maxRain/5)*5;
  // }
  // var maxRain=
  var rd = [];
  var ptIndex;
  for (var i = 0; i < rainData.length; i++) {
    var t1 = moment(xData[i]).format();
    var t2 = moment(pt).format();
    rd[i] = {};
    rd[i].value = rainData[i];
    if (t1 < t2) {
      rd[i].itemStyle = {
        normal: {
          color: chartColor.foreRainColor
        }
      }
    } else {
      rd[i].itemStyle = {
        normal: {
          color: chartColor.foreRainColor
        }
      }
    }
    if (xData[i] == pt) {
      ptIndex = i;
    }
  }
  var otherOption = {};
  var top = "40px";
  var bottom="70px";
  var right="85px";
  var left="80px";
  if ($('#' + rainId).width() < 800) {
    top = "50px"
  }
  ;
  if ($('#' + rainId).width() < 600) {
    top = "65px"
  }
  ;
  if ($('#' + rainId).width() < 500) {
    top = "45px";
    bottom = "70px";
    right = "15px";
    left = "20px";
  }
  ;
  if ($('#' + rainId).width() < 400) {
    top = "10px";
    bottom = "70px";
    right = "15px";
    left = "20px";
  };
  var publishValue = xData[ptIndex];
  var startValue;
  var startIndex = ptIndex - 24 * 5;
  if (startIndex < 0) {
    startIndex = 0;
  }
  var endIndex = xData.length - 1;
  if (startIndex > 0 || startIndex == 0) {
    startValue = xData[startIndex];
  }
  var endValue = xData[endIndex];
  if (pt) {
    //  pt=pt.substring(5, 16);
    rainMarkLine = {
      silent: true,
      symbol: 'none',
      data: [
        [{
          coord: [pt, 0],
        }, {
          coord: [pt, rainYAxis.max],
          lineStyle: {
            normal: {
              color: '#e0db1e',
              type: 'dotted'
            }
          },
          label: {
            normal: {
              position: 'start',
              formatter: pt
            }
          }
        }]
      ]
    };
  }
  if (fTime != null && oneTime != null && twoTime != null) {
    markArea = getMarkArea(fTime, oneTime, twoTime, threeTime);
  }
  if (params.type === obj_type_river_section || params.type === obj_type_mountain_torrents) { //河道或山洪小流域
    rainLegend = ["降水(mm)", "实测流量(m³/s)", "预报流量(m³/s)"];
    var inflowssf = params.inflowssf; //短临预报入流
    var inflows72f = params.inflows72f; //短临72h预报入流
    var realFloodData = params.realFlood; //实时流量
    var forecastFloodData = params.forecastFlood; //预报流量
    var maxFlood, maxWater, minFlood, minWater;
    var realPartFlood = new Array,
      forePartFlood = new Array();
    if (realFloodData) {
      realPartFlood = realFloodData.slice(startIndex, endIndex);
    }
    if (forecastFloodData) {
      forePartFlood = forecastFloodData.slice(startIndex, endIndex);
    }
    var maxInflowssf = [];
    if (inflowssf) {
      maxInflowssf = inflowssf.slice(startIndex, endIndex);
    }
    var maxInflows72f = [];
    if (inflows72f) {
      maxInflows72f = inflows72f.slice(startIndex, endIndex);
    }
    //最大流量
    maxFlood = getArrayMax([getArrayMax(realPartFlood), getArrayMax(forePartFlood), getArrayMax(maxInflowssf), getArrayMax(maxInflows72f)]);
    //最小流量
    minFlood = getArrayMin([getArrayMin(forePartFlood), getArrayMin(realPartFlood), getArrayMin(maxInflowssf), getArrayMin(maxInflows72f)]);
    var floodYAxis = getDataMaxMin(maxFlood, minFlood);
    var maxLeft = floodYAxis.max;
    var minLeft = floodYAxis.min;
    if (pt) {
      otherLeftMarkLine = getChartMarkLine(pt, maxLeft, minLeft);
    }
    otherOption = {
      color: [chartColor.realInFlowColor, chartColor.foreInFlowColor, chartColor.realDamAfterColor],
      title: $.extend(true, {}, title, {
        text: titleData,
        show: false
      }),
      tooltip: {
        trigger: 'axis',
        formatter: function (params) {
          var html = "";
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              if (params[i].name) {
                html = params[i].name + "<br/>";
                break;
              }
            }
          }
          if (params[0] && params[0].data != undefined) {
            html += params[0].seriesName + ":" + (params[0].data ? params[0].data : "-") + "<br/>";
          }
          if (params[1] && params[1].data != undefined) {
            html += params[1].seriesName + ":" + (params[1].data ? params[1].data : "-") + "<br/>";
          }
          if (params[2] && params[2].data != undefined) {
            html += params[2].seriesName + ":" + (params[2].data ? params[2].data : "-") + "<br/>";
          }
          return html;
        }
      },
      xAxis: $.extend(true, [], xAxis, [{
        data: xData,
        name: "时间",
        nameGap: 35,
        axisLabel: {
          formatter: function (value, index) {
            return value.replace(' ', "\n");
          }
        }
      }]),
      yAxis: $.extend(true, [], yAxis, [{
        name: "流量(m³/s)",
        min: floodYAxis.min,
        max: floodYAxis.max,
        interval: floodYAxis.interval
      }]),
      grid: $.extend({}, grid, {
        containLabel: false,
        top: '20',
        bottom: bottom,
        right: right,
        left: left
      }),
      series: [{
        name: '实测流量(m³/s)',
        type: "line",
        symbol: 'none',
        data: realFloodData,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
      }, {
        name: '预报流量(m³/s)',
        type: "line",
        symbol: 'none',
        data: forecastFloodData,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
        markArea: markArea
      },
      {
        name: '短临预报入流(m³/s)',
        type: "line",
        symbol: 'none',
        data: inflowssf,
        smooth: true,
      },
      {
        name: '趋势预报入流(m³/s)',
        type: "line",
        symbol: 'none',
        data: inflows72f,
        smooth: true,
      },
      ]
    };
  }

  if (params.type === obj_type_reservoir) { //水库
    // var realInFlood = params.realInFlood; //实测入库
    var realInFlood = "";
    var foreInFlood = params.foreInFlood; //预报入库
    var realOutFlood = params.realOutFlood; //实测出库
    var inflowssf = params.inflowssf; //短临预报入流
    var inflows72f = params.inflows72f; //短临72h预报入流
    var realPartInFlood = new Array(),
      forePartInFlood = new Array(),
      realPartOutFlood = new Array();
    if (realInFlood) {
      realPartInFlood = realInFlood.slice(startIndex, endIndex);
    }
    if (foreInFlood) {
      forePartInFlood = foreInFlood.slice(startIndex, endIndex);
    }
    if (realOutFlood) {
      realPartOutFlood = realOutFlood.slice(startIndex, endIndex);
    }
    var maxInflowssf = [];
    if (inflowssf) {
      maxInflowssf = inflowssf.slice(startIndex, endIndex);
    }
    var maxInflows72f = [];
    if (inflows72f) {
      maxInflows72f = inflows72f.slice(startIndex, endIndex);
    }
    var maxFlood, minFlood;
    maxFlood = getArrayMax([getArrayMax(realPartInFlood), getArrayMax(forePartInFlood), getArrayMax(realPartOutFlood), getArrayMax(maxInflowssf), getArrayMax(maxInflows72f)]);
    minFlood = getArrayMin([getArrayMin(realPartInFlood), getArrayMin(forePartInFlood), getArrayMin(realPartOutFlood), getArrayMin(maxInflowssf), getArrayMin(maxInflows72f)]);
    var floodYAxis = getDataMaxMin(maxFlood, minFlood);
    var maxLeft = floodYAxis.max;
    var minLeft = floodYAxis.min;
    if (pt) {
      otherLeftMarkLine = getChartMarkLine(pt, maxLeft, minLeft)
    }
    otherOption = {
      color: [chartColor.realInFlowColor, chartColor.foreInFlowColor, chartColor.realOutFlowColor, chartColor.realDamAfterColor],
      title: $.extend(true, {}, title, {
        text: titleData,
        show: false
      }),
      tooltip: {
        trigger: 'axis',
        formatter: function (params) {
          var html = "";
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              if (params[i].name) {
                html = params[i].name + "<br/>";
                break;
              }
            }
          }
          if (params[0] && params[0].data != undefined) {
            html += params[0].seriesName + ":" + (params[0].data ? params[0].data : "-") + "<br/>";
          }
          if (params[1] && params[1].data != undefined) {
            html += params[1].seriesName + ":" + (params[1].data ? params[1].data : "-");
          }
          if (params[2] && params[2].data != undefined) {
            html += "<br/>" + params[2].seriesName + ":" + (params[2].data ? params[2].data : "-");
          }
          if (params[3] && params[3].data != undefined) {
            html += "<br/>" + params[3].seriesName + ":" + (params[3].data ? params[3].data : "-");
          }
          return html;
        }
      },
      xAxis: $.extend(true, [], xAxis, [{
        data: xData,
        name: "时间",
        nameGap: 35,
        axisLabel: {
          formatter: function (value, index) {
            return value.replace(' ', "\n");
          }
        }
      }]),
      yAxis: $.extend(true, [], yAxis, [{
        name: "流量(m³/s)",
        min: floodYAxis.min,
        max: floodYAxis.max,
        interval: floodYAxis.interval
      }]),
      grid: $.extend({}, grid, {
        containLabel: false,
        top: "20",
        bottom: bottom,
        right: right,
        left: left
      }),
      series: [{
        name: '实测入库(m³/s)',
        type: "line",
        symbol: 'none',
        data: realInFlood,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
      },
      {
        name: '预报入库(m³/s)',
        type: "line",
        symbol: 'none',
        data: foreInFlood,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
        markArea: markArea
      },
      {
        name: '实测出库(m³/s)',
        type: "line",
        symbol: 'none',
        data: realOutFlood,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
      },
      {
        name: '短临预报入流(m³/s)',
        type: "line",
        symbol: 'none',
        data: inflowssf,
        smooth: true,
      },
      {
        name: '趋势预报入流(m³/s)',
        type: "line",
        symbol: 'none',
        data: inflows72f,
        smooth: true,
      },
      ]
    };

  }

  if (params.type === obj_type_mountain_torrents) {
    if (params.ready) { //准备转移
      var ready = params.ready;
      for (var i = 0; i < ready.length; i++) {
        var value = rainData[ready[i]];
        var temp = {
          value: value,
          label: {
            normal: {
              color: 'yellow'
            }
          }
        };
        rainData[ready[i]] = temp;
      }
    }
    ;
    if (params.immediately) { //立即转移
      var immediately = params.immediately;
      for (var i = 0; i < immediately.length; i++) {
        var value = rainData[immediately[i]];
        var temp = {
          value: value,
          label: {
            normal: {
              color: 'red'
            }
          }
        };
        rainData[ready[i]] = temp;
      }
    }
    ;
  }

  var rainOption = {
    color: [chartColor.foreRainColor],
    title: $.extend(true, {}, title, {
      text: titleData,
      show: false
    }),
    legend: $.extend(true, {}, legend, {
      data: rainLegend,
      show: true
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0]) {
          return "-";
        }
        var html = "";
        html += params[0].name + "<br/>" + params[0].seriesName + ":" + (params[0].value == undefined ? "-" : params[0].value)
        return html;
      }
    },
    xAxis: $.extend(true, [], xAxis, [{
      data: xData,
      show: false,
      nameGap: 35,
      axisLabel: {
        formatter: function (value, index) {
          return value.replace(' ', "\n");
        }
      }
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "降水量(mm)",
      scale: true,
      max: rainYAxis.max,
      inverse: true,
      min: 0,
      interval: rainYAxis.interval
    }]),
    grid: $.extend({}, grid, {
      containLabel: false,
      bottom: "15",
      right: right,
      left: left,
      top: top
    }),
    series: [{
      name: '降水(mm)',
      type: "bar",
      data: rd,
      barWidth: 5,
      // barCategoryGap:0,
      markPoint: {
        symbol: 'circle',
        symbolSize: 5,
        data: [{
          type: "max",
          name: '最大值'
        }],
        label: {
          normal: {
            position: 'bottom'
          }
        }
      },
      markLine: rainMarkLine,
      markArea: markArea
    },],
    // toolbox: {
    //   feature: {
    //     saveAsImage: {
    //       type: "jpg",
    //       backgroundColor: toolboxIconbackgroundColor,
    //       icon: toolboxIcon,
    //       excludeComponents: ['toolbox']
    //     }
    //   },
    //   iconStyle: {
    //     normal: {
    //       color: '#fff'
    //     }
    //   },
    //   itemSize: toolboxIconSize,
    //   right: "18",
    //   top: "-5"
    // },
  };
  var rainChart = echarts.init(document.getElementById(rainId));
  var ld = [];
  if (params.type === obj_type_river_section || params.type === obj_type_mountain_torrents) {
    if (params.realFlood.length != 0) {
      ld.push("实测流量(m³/s)");
      rainOption.series.push({
        name: "实测流量(m³/s)",
        type: 'line',
        symbol: 'none',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[0]
          }
        }
      });
    }
    if (params.forecastFlood.length != 0) {
      ld.push("预报流量(m³/s)")
      rainOption.series.push({
        name: "预报流量(m³/s)",
        type: 'line',
        symbol: 'none',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[1]
          }
        }
      })
    }
    ;
    if (inflowssf.length != 0) {
      ld.push("短临预报入流(m³/s)");
      rainOption.series.push({
        name: "短临预报入流(m³/s)",
        type: 'line',
        data: null,
        symbol: 'none',
        itemStyle: {
          normal: {
            color: chartColor.realDamAfterColor
          }
        }
      })
    }
    if (inflows72f.length != 0) {
      ld.push("趋势预报入流(m³/s)");
      rainOption.series.push({
        name: "趋势预报入流(m³/s)",
        type: 'line',
        data: null,
        symbol: 'none',
        itemStyle: {
          normal: {
            color: chartColor.realInFlowColor
          }
        }
      })
    }
  }
  if (params.type === obj_type_reservoir) {
    if (realInFlood.length != 0) {
      ld.push("实测入库(m³/s)");
      rainOption.series.push({
        name: "实测入库(m³/s)",
        type: 'line',
        data: null,
        symbol: 'none',
        itemStyle: {
          normal: {
            color: otherOption.color[0]
          }
        }
      })
    }
    if (foreInFlood.length != 0) {
      ld.push("预报入库(m³/s)");
      rainOption.series.push({
        name: "预报入库(m³/s)",
        type: 'line',
        symbol: 'none',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[1]
          }
        }
      })
    }
    if (realOutFlood.length != 0) {
      ld.push("实测出库(m³/s)");
      rainOption.series.push({
        name: "实测出库(m³/s)",
        type: 'line',
        symbol: 'none',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[2]
          }
        }
      })
    }
    if (inflowssf.length != 0) {
      ld.push("短临预报入流(m³/s)");
      rainOption.series.push({
        name: "短临预报入流(m³/s)",
        type: 'line',
        symbol: 'none',
        data: null,
        itemStyle: {
          normal: {
            color: chartColor.realDamAfterColor
          }
        }
      })
    }
    if (inflows72f.length != 0) {
      ld.push("趋势预报入流(m³/s)");
      rainOption.series.push({
        name: "趋势预报入流(m³/s)",
        type: 'line',
        symbol: 'none',
        data: null,
        itemStyle: {
          normal: {
            color: chartColor.realInFlowColor
          }
        }
      })
    }
  }
  if (params.type === obj_type_waterlogged) { //易涝点
    //rainOption.xAxis[0].show=true;
    //rainOption.xAxis[0].name="时间";
    //rainOption.grid.containLabel=true;
    //rainOption.grid.bottom="60";
    //rainOption.grid.right="40";
    //rainOption.dataZoom[1].show=true;
    if (params.waterloggedData != undefined) {
      var realInDepth = params.waterloggedData.depth;
      var realPartInDepth = new Array();
      if (realInDepth) {
        realPartInDepth = realInDepth.slice(startIndex, endIndex);
      }
      var maxDepth, minDepth;
      maxDepth = getArrayMax([getArrayMax(realPartInDepth)]);
      minDepth = getArrayMin([getArrayMin(realPartInDepth)]);
      var floodYAxis = getDataMaxMin(maxDepth, minDepth);
      var maxLeft = floodYAxis.max;
      var minLeft = floodYAxis.min;
      if (pt) {
        otherLeftMarkLine = getChartMarkLine(pt, maxLeft, minLeft)
      }
      otherOption = {
        color: [chartColor.realInFlowColor],
        title: $.extend(true, {}, title, {
          text: titleData,
          show: false
        }),
        tooltip: {
          trigger: 'axis',
          formatter: function (params) {
            var html = "";
            for (var i = 0; i < params.length; i++) {
              if (params[i]) {
                if (params[i].name) {
                  html = params[i].name + "<br/>";
                  break;
                }
              }
            }
            if (params[0] && params[0].data != undefined) {
              html += params[0].seriesName + ":" + (params[0].data ? params[0].data : "-") + "<br/>";
            }
            if (params[1] && params[1].data != undefined) {
              html += params[1].seriesName + ":" + (params[1].data ? params[1].data : "-");
            }
            return html;
          }
        },
        xAxis: $.extend(true, [], xAxis, [{
          data: xData,
          name: "时间",
          nameGap: 35,
          axisLabel: {
            formatter: function (value, index) {
              return value.replace(' ', "\n");
            }
          }
        }]),
        yAxis: $.extend(true, [], yAxis, [{
          name: "积水(m)",
          min: floodYAxis.min,
          max: floodYAxis.max,
          interval: floodYAxis.interval
        }]),
        grid: $.extend({}, grid, {
          containLabel: false,
          top: "20",
          bottom: '85',
          right: "85",
          left: "80"
        }),
        series: [{
          name: '积水(m)',
          type: "line",
          data: realInDepth,
          markLine: otherLeftMarkLine,
          smooth: true,
          markPoint: {
            data: [{
              type: 'max',
              symbol: 'circle',
              symbolSize: 5,
              itemStyle: {
                normal: {
                  label: {
                    show: true,
                    position: 'top'
                  }
                }
              }
            }]
          },
        }]
      };
      if (realInDepth.length != 0) {
        ld.push("积水(m)");
        rainOption.series.push({
          name: "积水(m)",
          type: 'line',
          data: null,
          itemStyle: {
            normal: {
              color: otherOption.color[0]
            }
          }
        })
      }
    }
  }
  rainOption.legend.data = rainOption.legend.data.concat(ld);
  if (params.type === obj_type_reservoir) {
    // if(rainOption.legend.data.length==4){
    //     rainOption.legend.selected[rainOption.legend.data[1]]=false;
    //     rainOption.legend.selected[rainOption.legend.data[3]]=false;
    // }
  }
  // if(rainOption.legend.data){
  //     for(var i=0;i<rainOption.legend.data.length;i++){
  //         if(rainOption.legend.data[i]=="短临预报入流(m³/s)"){
  //             rainOption.legend.selected[ rainOption.legend.data[i]]=false;
  //         }
  //         if(rainOption.legend.data[i]=="趋势预报入流(m³/s)"){
  //             rainOption.legend.selected[ rainOption.legend.data[i]]=false;
  //         }
  //     }
  // }
  rainOption.dataZoom = [{
    type: 'slider',
    show: false,
    height: 10,
    bottom: 7,
    handleSize: 23,
    fillerColor: 'rgba(70,130,180,0.5)',
    backgroundColor: ['rgba(47,69,84,1)']
  },
  {
    show: false,
    handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
    handleSize: '80%',
    textStyle: {
      color: '#fff'
    },
    realtime: false,
    handleStyle: {
      color: '#fff',
      shadowBlur: 3,
      shadowColor: 'rgba(0, 0, 0, 0.6)',
      shadowOffsetX: 2,
      shadowOffsetY: 2
    },
    labelFormatter: function (value) {
      var data = xData[value];
      if (data) {
        return data.replace(' ', '\n')
      }

    }
  }

  ];
  if (params.type === obj_type_waterlogged && params.waterloggedData == undefined) { //易涝点
    rainOption.xAxis[0].show = true;
    rainOption.xAxis[0].name = "时间";
    rainOption.grid.containLabel = true;
    rainOption.grid.bottom = "60";
    rainOption.grid.right = "40";
    rainOption.dataZoom[1].show = true;
  }
  if (startValue && endValue) {
    // startValue=startValue.substring(5, 16);
    // endValue=endValue.substring(5, 16);
    rainOption.dataZoom[0].startValue = startValue;
    rainOption.dataZoom[0].endValue = endValue;
  } else {
    rainOption.dataZoom[0].start = 80;
    rainOption.dataZoom[0].end = 100;
  }
  // rainOption.xAxis[0].data=(rainOption.xAxis[0].data).map(function (item) {
  //     return  item.substring(5, 16);
  // })
  rainOption.animation = false;
  rainChart.setOption(rainOption);
  if ($.inArray(rainChart, chartArray) == -1) {
    chartArray.push(rainChart);
  }
  if(clickType==="maxRightClick"){
    if ($.inArray(rainChart, rightMaxChartArray) == -1) {
      rightMaxChartArray.push(rainChart);
    }
  }
  if (otherId) {
    // otherOption.xAxis[0].axisLabel.formatter=function (value,index) {
    //     return value.replace(' ',"\n");
    // }
    //     otherOption.xAxis[0].axisLabel.interval=function(index,value){
    //
    // },
    otherOption.legend = $.extend(true, {}, legend, {
      data: ld
    });
    if (params.type === obj_type_reservoir) {
      // if(otherOption.legend.data.length==4){
      //     otherOption.legend.selected[otherOption.legend.data[0]]=false;
      //     otherOption.legend.selected[otherOption.legend.data[2]]=false;
      // }
    }
    // if(otherOption.legend.data){
    //     for(var i=0;i<otherOption.legend.data.length;i++){
    //         if(otherOption.legend.data[i]=="短临预报入流(m³/s)"){
    //             otherOption.legend.selected[otherOption.legend.data[i]]=false;
    //         }
    //         if(otherOption.legend.data[i]=="趋势预报入流(m³/s)"){
    //             otherOption.legend.selected[otherOption.legend.data[i]]=false;
    //         }
    //     }
    // }
    otherOption.dataZoom = [{
      type: 'slider',
      show: false,
      height: 10,
      bottom: 7,
      handleSize: 23,
      fillerColor: 'rgba(70,130,180,0.5)',
      backgroundColor: ['rgba(47,69,84,1)']
    },
    {
      show: true,
      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
      // handleSize: '80%',
      height: 10,
      handleSize: '23',
      textStyle: {
        color: '#fff'
      },
      realtime: false,
      handleStyle: {
        color: '#fff',
        shadowBlur: 3,
        shadowColor: 'rgba(0, 0, 0, 0.6)',
        shadowOffsetX: 2,
        shadowOffsetY: 2
      },
      labelFormatter: function (value) {
        var data = xData[value];
        if (data) {
          return data.replace(' ', '\n')
        }

      }
    }

    ];
    if (startValue && endValue) {
      otherOption.dataZoom[0].startValue = startValue;
      otherOption.dataZoom[0].endValue = endValue;
    } else {
      otherOption.dataZoom[0].start = 80;
      otherOption.dataZoom[0].end = 100;
    }
    // otherOption.xAxis[0].data=(otherOption.xAxis[0].data).map(function (item) {
    //     return  item.substring(5, 16);
    // })
    var otherChart = echarts.init(document.getElementById(otherId));
    if ($.inArray(otherChart, chartArray) == -1) {
      chartArray.push(otherChart);
    }
    if(clickType==="maxRightClick"){
      if ($.inArray(otherChart, rightMaxChartArray) == -1) {
        rightMaxChartArray.push(otherChart);
      }
    }
    otherOption.animation = false;
    otherChart.setOption(otherOption);
    echarts.connect([rainChart, otherChart]);
    otherChart.on('dataZoom', function (result) {
      var data = otherChart.getOption().dataZoom[1];
      var start = result.start / 100;
      var end = result.end / 100;
      var lt = xData.length;
      var startIndex = data.startValue;
      var endIndex = data.endValue;
      var newY, maxNew, minNew;
      //水庫
      if (params.type == obj_type_reservoir) {
        var newData = foreInFlood.slice(startIndex, endIndex);
        maxNew = getArrayMax(newData);
        minNew = getArrayMin(newData)
      }
      //河道
      if (params.type === obj_type_river_section || params.type === obj_type_mountain_torrents) {
        if (realFloodData) {
          realPartFlood = realFloodData.slice(startIndex, endIndex);
        }
        if (forecastFloodData) {
          forePartFlood = forecastFloodData.slice(startIndex, endIndex);
        }
        maxNew = getArrayMax([getArrayMax(realPartFlood), getArrayMax(forePartFlood)]);
        minNew = getArrayMin([getArrayMin(realPartFlood), getArrayMin(forePartFlood)]);
      }
      if (maxNew) {
        newY = getDataMaxMin(maxNew, minNew);
        otherOption.yAxis[0].max = newY.max;
        otherOption.yAxis[0].min = newY.min;
        otherOption.yAxis[0].interval = newY.interval;
        // otherOption.dataZoom[0].startValue=xData[startIndex].substring(5, 16);
        // otherOption.dataZoom[0].endValue=xData[endIndex].substring(5, 16);
        otherOption.dataZoom[0].startValue = xData[startIndex];
        otherOption.dataZoom[0].endValue = xData[endIndex];
        if (otherOption.dataZoom[0].start) {
          delete otherOption.dataZoom[0].start;
          delete otherOption.dataZoom[0].end;
        }
        if (pt) {
          var markLine = getChartMarkLine(pt, newY.max, newY.min);
          for (var i = 0; i < otherOption.series.length; i++) {
            if (otherOption.series[i].yAxisIndex != 1) {
              otherOption.series[i].markLine = markLine;
            }
          }
        }
        otherChart.setOption(otherOption);
      }
    })
  }
  if (params.table) {
    params.table.height = params.tableHeight;
    createChartTable(params.table, win);
  }
  return chartArray;
}

/**
 * 初始化来水预报  手机端
 * @param params数据对象 其中：id图表dom的id值 title图表标题 data图表数据 type:监控对象类型
 * **/
function initPhoneRainForecast(params, win, phone) {
  var title = params.title;
  var xData = params.xData;
  if (!xData) {
    return null;
  }
  var rainData = params.rainData;
  var pt = params.publishTime;
  var rainMarkLine, otherLeftMarkLine, otherRightMarkLine;
  var maxRain = rainData.getArrayMax(rainData);
  var rainId = params.rainId;
  var otherId = params.otherId;
  var rainLegend = ["降水(mm)"];
  if (maxRain < 15) {
    maxRain = 15;
  } else {
    maxRain = Math.ceil(maxRain / 5) * 5;
  }
  var rd = [];
  var ptIndex;
  for (var i = 0; i < rainData.length; i++) {
    var t1 = moment(xData[i]).format();
    var t2 = moment(pt).format();
    rd[i] = {};
    rd[i].value = rainData[i];
    if (t1 < t2) {
      rd[i].itemStyle = {
        normal: {
          color: chartColor.foreRainColor
        }
      }
    } else {
      rd[i].itemStyle = {
        normal: {
          color: chartColor.foreRainColor
        }
      }
    }
    if (xData[i] == pt) {
      ptIndex = i;
    }
  }
  var otherOption = {};
  var top = "40px";
  if ($('#' + rainId).width() < 800) {
    top = "50px"
  }
  ;
  if ($('#' + rainId).width() < 600) {
    top = "65px"
  }
  ;
  if ($('#' + rainId).width() < 500) {
    top = "85px"
  }
  ;
  if ($('#' + rainId).width() < 400) {
    top = "105px"
  }
  ;
  var publishValue = xData[ptIndex];
  var startValue;
  var startIndex = ptIndex - 24 * 5;
  if (startIndex < 0) {
    startIndex = 0;
  }
  var endIndex = xData.length - 1;
  if (startIndex > 0 || startIndex == 0) {
    startValue = xData[startIndex];
  }
  var endValue = xData[endIndex];
  if (pt) {
    //  pt=pt.substring(5, 16);
    rainMarkLine = {
      silent: true,
      symbol: 'none',
      data: [
        [{
          coord: [pt, 0],
        }, {
          coord: [pt, maxRain],
          lineStyle: {
            normal: {
              color: '#e0db1e',
              type: 'dotted'
            }
          },
          label: {
            normal: {
              position: 'start',
              formatter: pt
            }
          }
        }]
      ]
    };
  }
  if (params.type === obj_type_river_section || params.type === obj_type_mountain_torrents) { //河道或山洪小流域
    rainLegend = ["降水(mm)", "实测流量(m³/s)", "预报流量(m³/s)"];
    var realFloodData = params.realFlood; //实时流量
    var forecastFloodData = params.forecastFlood; //预报流量
    var maxFlood, maxWater, minFlood, minWater;
    var realPartFlood = new Array,
      forePartFlood = new Array();
    if (realFloodData) {
      realPartFlood = realFloodData.slice(startIndex, endIndex);
    }
    if (forecastFloodData) {
      forePartFlood = forecastFloodData.slice(startIndex, endIndex);
    }
    //最大流量
    maxFlood = getArrayMax([getArrayMax(realPartFlood), getArrayMax(forePartFlood)]);
    //最小流量
    minFlood = getArrayMin([getArrayMin(forePartFlood), getArrayMin(realPartFlood)]);
    var floodYAxis = getDataMaxMin(maxFlood, minFlood);
    var maxLeft = floodYAxis.max;
    var minLeft = floodYAxis.min;
    if (pt) {
      otherLeftMarkLine = getChartMarkLine(pt, maxLeft, minLeft);
    }
    otherOption = {
      color: [chartColor.realInFlowColor, chartColor.foreInFlowColor],
      title: $.extend(true, {}, title, {
        text: title,
        show: false
      }),
      tooltip: {
        trigger: 'axis',
        formatter: function (params) {
          var html = "";
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              if (params[i].name) {
                html = params[i].name + "<br/>";
                break;
              }
            }
          }
          if (params[0] && params[0].data != undefined) {
            html += params[0].seriesName + ":" + (params[0].data ? params[0].data : "-") + "<br/>";
          }
          if (params[1] && params[1].data != undefined) {
            html += params[1].seriesName + ":" + (params[1].data ? params[1].data : "-") + "<br/>";
          }
          if (params[2] && params[2].data != undefined) {
            html += params[2].seriesName + ":" + (params[2].data ? params[2].data : "-") + "<br/>";
          }
          return html;
        }
      },
      xAxis: $.extend(true, [], xAxis, [{
        data: xData,
        name: "时间",
        nameGap: 32
      }]),
      yAxis: $.extend(true, [], yAxis, [{
        name: "流量(m³/s)",
        min: floodYAxis.min,
        max: floodYAxis.max,
        interval: floodYAxis.interval
      }]),
      grid: $.extend({}, grid, {
        containLabel: false,
        top: '20',
        bottom: '85',
        right: "20",
        left: "55"
      }),
      series: [{
        name: '实测流量(m³/s)',
        type: "line",
        data: realFloodData,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'top'
                }
              }
            }
          }]
        },
      }, {
        name: '预报流量(m³/s)',
        type: "line",
        data: forecastFloodData,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'top'
                }
              }
            }
          }]
        },
      }]
    };
  }
  if (params.type === obj_type_reservoir) { //水库
    var realInFlood = params.realInFlood; //实测入库
    var foreInFlood = params.foreInFlood; //预报入库
    var realOutFlood = params.realOutFlood; //实测出库
    var realPartInFlood = new Array(),
      forePartInFlood = new Array(),
      realPartOutFlood = new Array();
    if (realInFlood) {
      realPartInFlood = realInFlood.slice(startIndex, endIndex);
    }
    if (foreInFlood) {
      forePartInFlood = foreInFlood.slice(startIndex, endIndex);
    }
    if (realOutFlood) {
      realPartOutFlood = realOutFlood.slice(startIndex, endIndex);
    }
    var maxFlood, minFlood;
    maxFlood = getArrayMax([getArrayMax(realPartInFlood), getArrayMax(forePartInFlood), getArrayMax(realPartOutFlood)]);
    minFlood = getArrayMin([getArrayMin(realPartInFlood), getArrayMin(forePartInFlood), getArrayMin(realPartOutFlood)]);
    var floodYAxis = getDataMaxMin(maxFlood, minFlood);
    var maxLeft = floodYAxis.max;
    var minLeft = floodYAxis.min;
    if (pt) {
      otherLeftMarkLine = getChartMarkLine(pt, maxLeft, minLeft)
    }
    otherOption = {
      color: [chartColor.realInFlowColor, chartColor.foreInFlowColor, chartColor.realOutFlowColor],
      title: $.extend(true, {}, title, {
        text: title,
        show: false
      }),
      tooltip: {
        trigger: 'axis',
        formatter: function (params) {
          var html = "";
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              if (params[i].name) {
                html = params[i].name + "<br/>";
                break;
              }
            }
          }
          if (params[0] && params[0].data != undefined) {
            html += params[0].seriesName + ":" + (params[0].data ? params[0].data : "-") + "<br/>";
          }
          if (params[1] && params[1].data != undefined) {
            html += params[1].seriesName + ":" + (params[1].data ? params[1].data : "-");
          }
          if (params[2] && params[2].data != undefined) {
            html += "<br/>" + params[2].seriesName + ":" + (params[2].data ? params[2].data : "-");
          }
          if (params[3] && params[3].data != undefined) {
            html += "<br/>" + params[3].seriesName + ":" + (params[3].data ? params[3].data : "-");
          }
          return html;
        }
      },
      xAxis: $.extend(true, [], xAxis, [{
        data: xData,
        name: "时间",
        nameGap: 32
      }]),
      yAxis: $.extend(true, [], yAxis, [{
        name: "流量(m³/s)",
        min: floodYAxis.min,
        max: floodYAxis.max,
        interval: floodYAxis.interval
      }]),
      grid: $.extend({}, grid, {
        containLabel: false,
        top: "20",
        bottom: '85',
        right: "20",
        left: "55"
      }),
      series: [{
        name: '实测入库(m³/s)',
        type: "line",
        data: realInFlood,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'top'
                }
              }
            }
          }]
        }
      },
      {
        name: '预报入库(m³/s)',
        type: "line",
        data: foreInFlood,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'top'
                }
              }
            }
          }]
        }
      }, {
        name: '实测出库(m³/s)',
        type: "line",
        data: realOutFlood,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'top'
                }
              }
            }
          }]
        },
      }
      ]
    };

  }

  if (params.type === obj_type_mountain_torrents) {
    if (params.ready) { //准备转移
      var ready = params.ready;
      for (var i = 0; i < ready.length; i++) {
        var value = rainData[ready[i]];
        var temp = {
          value: value,
          label: {
            normal: {
              color: 'yellow'
            }
          }
        };
        rainData[ready[i]] = temp;
      }
    }
    ;
    if (params.immediately) { //立即转移
      var immediately = params.immediately;
      for (var i = 0; i < immediately.length; i++) {
        var value = rainData[immediately[i]];
        var temp = {
          value: value,
          label: {
            normal: {
              color: 'red'
            }
          }
        };
        rainData[ready[i]] = temp;
      }
    }
    ;
  }
  var rainOption = {
    color: [chartColor.foreRainColor],
    title: $.extend(true, {}, title, {
      text: title,
      show: false
    }),
    legend: $.extend(true, {}, legend, {
      data: rainLegend,
      show: true
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0]) {
          return "-";
        }
        var html = "";
        html += params[0].name + "<br/>" + params[0].seriesName + ":" + (params[0].value == undefined ? "-" : params[0].value)
        return html;
      }
    },
    xAxis: $.extend(true, [], xAxis, [{
      data: xData,
      show: false,
      formatter: function (value, index) {
        return value.replace(' ', "\n");
      }

    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "降水量(mm)",
      scale: true,
      max: maxRain,
      inverse: true,
      min: 0,
      splitNumber: 5
    }]),
    grid: $.extend({}, grid, {
      containLabel: false,
      bottom: "10",
      right: "20",
      left: "55",
      top: top
    }),
    series: [{
      name: '降水(mm)',
      type: "bar",
      data: rd,
      barWidth: 5,
      // barCategoryGap:0,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'bottom'
              }
            }
          }
        }]
      },
      markLine: rainMarkLine
    },]
  };
  var rainChart = echarts.init(document.getElementById(rainId));
  var ld = [];
  if (params.type === obj_type_river_section || params.type === obj_type_mountain_torrents) {
    if (params.realFlood.length != 0) {
      ld.push("实测流量(m³/s)");
      rainOption.series.push({
        name: "实测流量(m³/s)",
        type: 'line',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[0]
          }
        }
      });
    }
    if (params.forecastFlood.length != 0) {
      ld.push("预报流量(m³/s)")
      rainOption.series.push({
        name: "预报流量(m³/s)",
        type: 'line',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[1]
          }
        }
      })
    }
    ;
  }
  if (params.type === obj_type_reservoir) {
    if (realInFlood.length != 0) {
      ld.push("实测入库(m³/s)");
      rainOption.series.push({
        name: "实测入库(m³/s)",
        type: 'line',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[0]
          }
        }
      })
    }
    if (foreInFlood.length != 0) {
      ld.push("预报入库(m³/s)");
      rainOption.series.push({
        name: "预报入库(m³/s)",
        type: 'line',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[1]
          }
        }
      })
    }
    if (realOutFlood.length != 0) {
      ld.push("实测出库(m³/s)");
      rainOption.series.push({
        name: "实测出库(m³/s)",
        type: 'line',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[2]
          }
        }
      })
    }
  }
  rainOption.legend.data = rainOption.legend.data.concat(ld);
  rainOption.dataZoom = [{
    type: 'slider',
    show: false,
    handleSize: 8,
    fillerColor: 'rgba(70,130,180,0.5)',
    backgroundColor: ['rgba(47,69,84,1)']
  },
  {
    show: false,
    handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
    handleSize: '80%',
    textStyle: {
      color: '#fff'
    },
    realtime: false,
    handleStyle: {
      color: '#fff',
      shadowBlur: 3,
      shadowColor: 'rgba(0, 0, 0, 0.6)',
      shadowOffsetX: 2,
      shadowOffsetY: 2
    },
    labelFormatter: function (value) {
      var data = xData[value];
      if (data) {
        return data.replace(' ', '\n')
      }

    }
  }

  ];
  if (params.type === obj_type_waterlogged) {
    rainOption.xAxis[0].show = true;
    rainOption.xAxis[0].name = "时间";
    rainOption.grid.containLabel = true;
    rainOption.grid.bottom = "60";
    rainOption.grid.right = "40";
    rainOption.dataZoom[1].show = true;
  }
  if (startValue && endValue) {
    // startValue=startValue.substring(5, 16);
    // endValue=endValue.substring(5, 16);
    rainOption.dataZoom[0].startValue = startValue;
    rainOption.dataZoom[0].endValue = endValue;
  } else {
    rainOption.dataZoom[0].start = 80;
    rainOption.dataZoom[0].end = 100;
  }
  // rainOption.xAxis[0].data=(rainOption.xAxis[0].data).map(function (item) {
  //     return  item.substring(5, 16);
  // })
  rainChart.setOption(rainOption);
  if ($.inArray(rainChart, chartArray) == -1) {
    chartArray.push(rainChart);
  }
  if (otherId) {
    // otherOption.xAxis[0].axisLabel.formatter=function (value,index) {
    //     return value.replace(' ',"\n");
    // }
    //     otherOption.xAxis[0].axisLabel.interval=function(index,value){
    //
    // },
    otherOption.legend = $.extend(true, {}, legend, {
      data: ld
    }),
      otherOption.dataZoom = [{
        type: 'slider',
        show: false,
        handleSize: 8,
        fillerColor: 'rgba(70,130,180,0.5)',
        backgroundColor: ['rgba(47,69,84,1)']
      },
      {
        show: true,
        handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
        handleSize: '80%',
        textStyle: {
          color: '#fff'
        },
        realtime: false,
        handleStyle: {
          color: '#fff',
          shadowBlur: 3,
          shadowColor: 'rgba(0, 0, 0, 0.6)',
          shadowOffsetX: 2,
          shadowOffsetY: 2
        },
        labelFormatter: function (value) {
          var data = xData[value];
          if (data) {
            return data.replace(' ', '\n')
          }

        }
      }

      ];
    if (startValue && endValue) {
      otherOption.dataZoom[0].startValue = startValue;
      otherOption.dataZoom[0].endValue = endValue;
    } else {
      otherOption.dataZoom[0].start = 80;
      otherOption.dataZoom[0].end = 100;
    }
    // otherOption.xAxis[0].data=(otherOption.xAxis[0].data).map(function (item) {
    //     return  item.substring(5, 16);
    // })
    var otherChart = echarts.init(document.getElementById(otherId));
    if ($.inArray(otherChart, chartArray) == -1) {
      chartArray.push(otherChart);
    }
    otherChart.setOption(otherOption);
    echarts.connect([rainChart, otherChart]);
    otherChart.on('dataZoom', function (result) {
      var data = otherChart.getOption().dataZoom[1];
      var start = result.start / 100;
      var end = result.end / 100;
      var lt = xData.length;
      var startIndex = data.startValue;
      var endIndex = data.endValue;
      var newY, maxNew, minNew;
      //水庫
      if (params.type == obj_type_reservoir) {
        var newData = foreInFlood.slice(startIndex, endIndex);
        maxNew = getArrayMax(newData);
        minNew = getArrayMin(newData)
      }
      //河道
      if (params.type === obj_type_river_section || params.type === obj_type_mountain_torrents) {
        if (realFloodData) {
          realPartFlood = realFloodData.slice(startIndex, endIndex);
        }
        if (forecastFloodData) {
          forePartFlood = forecastFloodData.slice(startIndex, endIndex);
        }
        maxNew = getArrayMax([getArrayMax(realPartFlood), getArrayMax(forePartFlood)]);
        minNew = getArrayMin([getArrayMin(realPartFlood), getArrayMin(forePartFlood)]);
      }
      if (maxNew) {
        newY = getDataMaxMin(maxNew, minNew);
        otherOption.yAxis[0].max = newY.max;
        otherOption.yAxis[0].min = newY.min;
        otherOption.yAxis[0].interval = newY.interval;
        // otherOption.dataZoom[0].startValue=xData[startIndex].substring(5, 16);
        // otherOption.dataZoom[0].endValue=xData[endIndex].substring(5, 16);
        otherOption.dataZoom[0].startValue = xData[startIndex];
        otherOption.dataZoom[0].endValue = xData[endIndex];
        if (otherOption.dataZoom[0].start) {
          delete otherOption.dataZoom[0].start;
          delete otherOption.dataZoom[0].end;
        }
        if (pt) {
          var markLine = getChartMarkLine(pt, newY.max, newY.min);
          for (var i = 0; i < otherOption.series.length; i++) {
            if (otherOption.series[i].yAxisIndex != 1) {
              otherOption.series[i].markLine = markLine;
            }
          }
        }
        otherChart.setOption(otherOption);
      }
    })
  }
  if (params.table) {
    params.table.height = params.tableHeight;
    createChartTable(params.table, win);
  }
  return chartArray;
}

/**
 * 初始化水库调度曲线
 * @param params数据对象 其中：id图表dom的id值 title图表标题 data图表数据
 * **/
function initReservoirDispatchChart(params, win) {
  //console.log(JSON.stringify(params));
  var xData = params.xData;
  var foreInFlow = params.foreInFlow || [];
  var realInFlow = params.realInFlow || [];
  var foreOutFlow = params.foreOutFlow || [];
  var realOutFlow = params.realOutFlow || [];
  var foreWater = params.foreWater || [];
  var tableData = [];
  var gateCurveList = params.gateCurveList || [];
  var maxArray = [getArrayMax(foreInFlow), getArrayMax(realInFlow), getArrayMax(foreOutFlow), getArrayMax(realOutFlow)];
  var minArray = [getArrayMin(foreInFlow), getArrayMin(realInFlow), getArrayMin(foreOutFlow), getArrayMin(realOutFlow)];
  for (var i = 0; i < gateCurveList.length; i++) {
    var temp = gateCurveList[i].fotq || [];
    minArray.push(getArrayMin(temp));
    maxArray.push(getArrayMax(temp));
  }
  var flowMin = getArrayMin(minArray);
  var flowMax = getArrayMax(maxArray);
  var waterMax = getArrayMax(foreWater);
  var waterMin = getArrayMin(foreWater);
  var flowYAxis = getDataMaxMin(flowMax, flowMin);
  if (flowYAxis.max < 50) {
    flowYAxis = {
      max: 50,
      min: 0,
      interval: 10
    }
  }
  var waterYAxis = getDataMaxMin(waterMax, waterMin, 1);
  var id = params.id;
  var top = 35;
  if ($('#' + id).width() < 800) {
    top = 40;
  }
  ;
  var legendTop = 0;
  if (params.isShowTitle) {
    top += 20;
    legendTop = 20;
  }
  var legendData;
  if (params.legend) {
    legendData = params.legend;
  } else {
    legendData = ["入库流量", "出库流量", "水位"];
  }
  var option = {
    color: [chartColor.foreInFlowColor, chartColor.foreOutFlowColor, chartColor.foreDamBeforeColor],
    title: $.extend(true, {}, title, {
      text: params.title || '',
      show: params.isShowTitle || false
    }),
    legend: $.extend(true, {}, legend, {
      data: legendData,
      show: true,
      top: legendTop
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        var html = "";
        if (params[0]) {
          html += params[0].name + "<br/>" + params[0].seriesName + "(m³/s):" + (params[0].data != undefined ? params[0].data : "-");
        }
        for (var i = 1; i < params.length; i++) {
          if (params[i].seriesName == '水位') {
            html += "<br/>" + params[i].seriesName + "(m):"
          } else {
            html += "<br/>" + params[i].seriesName + "(m³/s):"
          }
          html += (params[i].data != undefined ? params[i].data : "-");
        }
        return html;
      }
    },
    xAxis: $.extend(true, [], xAxis, [{
      data: xData,
      name: "时间",
      nameGap: 35,
      axisLabel: {
        formatter: function (value, index) {
          return value.replace(' ', "\n");
        },
      }
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "流量(m³/s)",
      max: flowYAxis.max,
      min: flowYAxis.min,
      interval: flowYAxis.interval
    }, {
      name: "水位(m)",
      max: waterYAxis.max,
      min: waterYAxis.min,
      interval: waterYAxis.interval,
      axisTick: {
        show: true
      },
      axisLabel: {
        show: true
      }
    }]),
    grid: $.extend({}, grid, {
      bottom: "50",
      right: "60",
      top: "50"
    }),
    series: [{
      name: legendData[0],
      type: "line",
      symbol: "none",
      data: foreInFlow,
      smooth: true,
      markPoint: {
        symbol: 'circle',
        symbolSize: 5,
        data: [{
          type: "max",
          name: '最大值'
        }],
        label: {
          normal: {
            position: 'top'
          }
        }
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [xData[0], flowYAxis.min],
          }, {
            coord: [xData[0], flowYAxis.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted',
                opacity: 0,
              }
            },
            label: {
              normal: {
                show: false,
                position: 'end',
                formatter: xData[0]
              }
            }
          }]
        ]
      },
    }, {
      name: legendData[1],
      type: "line",
      symbol: "none",
      data: foreOutFlow,
      smooth: true,
      markPoint: {
        symbol: 'circle',
        symbolSize: 5,
        data: [{
          type: "max",
          name: '最大值'
        }],
        label: {
          normal: {
            position: 'top'
          }
        }
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [xData[0], flowYAxis.min],
          }, {
            coord: [xData[0], flowYAxis.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted',
                opacity: 0,
              }
            },
            label: {
              normal: {
                show: false,
                position: 'end',
                formatter: xData[0]
              }
            }
          }]
        ]
      },
    },

    {
      name: legendData[2],
      type: "line",
      symbol: "none",
      data: foreWater,
      smooth: true,
      markPoint: {
        symbol: 'circle',
        symbolSize: 5,
        data: [{
          type: "max",
          name: '最大值'
        }],
        label: {
          normal: {
            position: 'top'
          }
        }
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [xData[0], waterYAxis.min],
          }, {
            coord: [xData[0], waterYAxis.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted',
                opacity: 0,
              }
            },
            label: {
              normal: {
                show: false,
                position: 'end',
                formatter: xData[0]
              }
            }
          }]
        ]
      },
      yAxisIndex: 1
    }
    ],
    toolbox: {
      feature: {
        saveAsImage: {
          show: params.isShowToolbox || false,
          type: "jpg",
          backgroundColor: toolboxIconbackgroundColor,
          icon: toolboxIcon
        }
      },
      itemSize: toolboxIconSize,
      right: "18",
      top: "-5"
    },
  };
  option.color = (option.color).concat(CHART_COLOR);
  var columns = [{
    field: 'id',
    title: '序号',
    align: 'center'
  },
  {
    field: 'time',
    title: '时间',
    align: 'center'
  },
  {
    field: 'foreInFlow',
    title: '入库流量(m³/s)',
    align: 'center'
  }, {
    field: 'foreOutFlow',
    title: '出库流量(m³/s)',
    align: 'center'
  }, {
    field: 'foreWater',
    title: '水位(m)',
    align: 'center'
  }
  ];
  for (var i = 0; i < gateCurveList.length; i++) {
    var name = (gateCurveList[i].dnnm || gateCurveList[i].dnid) + "出流";
    option.legend.data.push(name);
    option.series.push({
      name: name,
      type: "line",
      symbol: "none",
      data: gateCurveList[i].fotq,
      smooth: true,
      markPoint: {
        symbol: 'circle',
        symbolSize: 5,
        data: [{
          type: "max",
          name: '最大值'
        }],
        label: {
          normal: {
            position: 'top'
          }
        }
      },
    });
    var temp = {};
    temp.field = "height" + i;
    temp.title = (gateCurveList[i].dnnm || gateCurveList[i].dnid) + "开度(m)";
    temp.align = "center";
    columns.push(temp);
    temp = {};
    temp.field = "out" + i;
    temp.title = name + "(m³/s)";
    temp.align = "center";
    columns.push(temp);
  }

  for (var i = 0; i < xData.length; i++) {
    var temp = {};
    temp.id = i + 1;
    temp.time = xData[i];
    temp.foreInFlow = foreInFlow[i];
    temp.foreOutFlow = foreOutFlow[i];
    temp.foreWater = foreWater[i];
    for (var j = 0; j < gateCurveList.length; j++) {
      var field = "out" + j;
      temp[field] = gateCurveList[j].fotq[i];
      field = "height" + j;
      temp[field] = gateCurveList[j].height[i]
    }
    tableData.push(temp)
  }
  for (var i = 3; i < option.legend.data.length; i++) {
    option.legend.selected[option.legend.data[i]] = false;
  }
  var chart = echarts.init(document.getElementById(id));
  chart.setOption(option);
  $(window).resize(function () {
    chart.resize();
  })
  if ($.inArray(chart, chartArray) == -1) {
    chartArray.push(chart);
  }
  //创建数据表格
  var tableId = params.tableId;
  if (!tableId) {
    return {
      option: option,
      chart: chart
    };
  }

  $('#' + tableId).bootstrapTable('load', tableData);
  var option = {
    height: params.tableHeight,
    columns: columns,
    data: tableData,
    pagination: true,
    pageNumber: 1, //初始化加载第一页，默认第一页
    pageSize: 50, //每页的记录行数（*）
    pageList: [20, 50, 100, 200],
  };
  $('#' + tableId).bootstrapTable(option);
  resizeTablePaddingBottom(win);
  return chart;
}

/**
 * 初始化水位库容曲线
 * @param params数据对象 其中：id图表dom的id值 title图表标题
 * **/
function initWaterCapacityChart(params) {
  var dataTitle = params.title;
  var data = params.data;
  var id = params.id;
  var water = params.water;
  var maxWater = getArrayMax(water);
  var minWater = getArrayMin(water);
  var waterY = getDataMaxMin(maxWater, minWater, 1);
  var option = {
    color: CHART_COLOR,
    title: $.extend(true, {}, title, {
      text: dataTitle,
      show: false
    }),
    legend: $.extend(true, {}, legend, {
      data: ["水位库容"]
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0].data) {
          return "-";
        }
        return "库容(万m³):" + params[0].data[0] + "<br/>" + "水位(m):" + params[0].data[1]
      }
    },
    toolbox: {
      feature: {
        saveAsImage: {
          type: "jpg",
          backgroundColor: toolboxIconbackgroundColor,
          icon: toolboxIcon
        }
      },
      itemSize: toolboxIconSize,
      right: "18",
      top: "10",
    },
    calculable: true,
    xAxis: $.extend(true, [], xAxis, [{
      name: "库容(万m³)",
      type: "value",
      axisLabel: {
        formatter: function (value, index) {
          var value = "" + value;
          return value;
        }
      }
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "水位(m)",
      min: waterY.min,
      max: waterY.max,
      interval: waterY.interval,
      splitLine: {
        show: false
      }
    }, {
      show: false
    }]),
    itemStyle: {
      normal: {
        color: "#74AADE",
        opacity: 0 // 拐点不显示
      }
    },
    grid: $.extend({}, grid, {
      bottom: "8%",
      right: "15",
      top: "45"
    }),
    series: [{
      name: '水位库容',
      type: "line",
      symbol: "none",
      data: data,
      smooth: true
    }]
  };
  var chart = echarts.init(document.getElementById(id));
  chart.setOption(option);
  if ($.inArray(chart, chartArray) == -1) {
    chartArray.push(chart);
  }


}


//水务面积曲线
function initWaterCapacityAreaChart(params) {
  var title = params.title;
  var data = params.dataarea;
  var id = params.id;
  var option = {
    color: CHART_COLOR,
    title: $.extend(true, {}, title, {
      text: title,
      show: false
    }),
    legend: $.extend(true, {}, legend, {
      data: ["水位面积"]
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0].data) {
          return "-";
        }
        return "面积(m²)" + params[0].data[0] + "<br/>" + "水位(m)" + params[0].data[1]
      }
    },
    calculable: true,
    xAxis: $.extend(true, [], xAxis, [{
      name: "面积(㎡)",
      type: "value",
      axisLabel: {
        formatter: function (value, index) {
          var value = "" + value;
          return value;
        }
      }
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "水位(m)",
      min: 'dataMin',
      splitLine: {
        show: false
      }
    }, {
      show: false
    }]),
    itemStyle: {
      normal: {
        color: "#74AADE",
        opacity: 0 // 拐点不显示
      }
    },
    grid: $.extend({}, grid, {
      bottom: "15%"
    }),
    series: [{
      name: '水位面积',
      type: "line",
      data: data,
      smooth: true
    }]
  };
  var chart = echarts.init(document.getElementById(id));
  chart.setOption(option);
  if ($.inArray(chart, chartArray) == -1) {
    chartArray.push(chart);
  }

}

/**
 * 初始化水位流量曲线
 * @param params数据对象
 * **/
function initWaterCurveChart(params, clickTableHeight, win) { //初始化水位流量曲线
  var title = params.title;
  var data = params.data;
  var tableData = [];
  for (var i = 0; i < data.length; i++) {
    var temp = {};
    temp.id = i + 1;
    temp.rt = data[i][0];
    temp.water = data[i][1];
    tableData.push(temp);
  }
  var id = params.id;
  var option = {
    color: CHART_COLOR,
    //title:$.extend(true,{},title,{text:title}),
    legend: $.extend(true, {}, legend, {
      data: ["水位流量"]
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0].data) {
          return "-";
        }
        return "流量(m³/s)：" + params[0].data[0] + "<br/>" + "水位(m)：" + params[0].data[1]
      }
    },
    calculable: true,
    xAxis: $.extend(true, [], xAxis, [{
      name: "流量(m³/s)",
      type: "value",
      axisLabel: {
        formatter: function (value, index) {
          var value = "" + value;
          return value;
        }
      }
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "水位(m)",
      type: 'value',
      min: 'dataMin',
      splitLine: {
        show: false
      }
    }, {
      show: false
    }]),
    itemStyle: {
      normal: {
        color: "#74AADE",
        opacity: 0 // 拐点不显示
      }
    },
    grid: $.extend({}, grid, {
      bottom: "40px",
      right: "15px",
      top: "45px"
    }),
    series: [{
      name: '水位流量',
      type: "line",
      symbol: "none",
      data: data,
      smooth: true
    }],
    title: {
      text: params.title,
      show: false
    },
    toolbox: {
      feature: {
        saveAsImage: {
          type: "jpg",
          backgroundColor: toolboxIconbackgroundColor,
          icon: toolboxIcon,
          excludeComponents: ['toolbox']
        }
      },
      itemSize: toolboxIconSize,
      right: "18",
      top: "-5"
    },
  };
  var chart = echarts.init(document.getElementById(id));
  chart.setOption(option);
  if ($.inArray(chart, chartArray) == -1) {
    chartArray.push(chart);
  }

  //创建数据表格
  var tableId = params.tableId;
  if (!tableId) {
    return;
  }
  var columns = [{
    field: 'id',
    title: '序号',
    align: 'center'
  },
  {
    field: 'water',
    title: '水位(m)',
    align: 'center'
  },
  {
    field: 'rt',
    title: '流量(m³/s)',
    align: 'center'
  }
  ];
  $('#' + tableId).bootstrapTable('load', tableData);
  var option = {
    height: clickTableHeight - 20,
    columns: columns,
    data: tableData,
    pagination: true,
    pageNumber: 1, //初始化加载第一页，默认第一页
    pageSize: 20, //每页的记录行数（*）
    pageList: [10, 20, 50, 100],
  };
  $('#' + tableId).bootstrapTable(option);
  resizeTablePaddingBottom(win)
}

//城市易捞点降雨-积水关系
function initRainfallAccumulation(params, clickTableHeight, win) {
  $('#' + params.id).css("width", "60%").css("height", "100%");
  var datatitle = params.title;
  var data = params.data;
  var id = params.id;
  var maxRainfall, minRainfall;
  if (parseFloat(getArrayMax(params.data.depth1)) > parseFloat(getArrayMax(params.data.depth3))) {
    maxRainfall = getArrayMax(params.data.drp3);
  } else {
    maxRainfall = getArrayMax(params.data.drp3);
  }
  minRainfall = "0";
  var waterY = getDataMaxMin(maxRainfall, minRainfall, 1);
  var legendData = ["1小时雨量(mm)", "3小时雨量(mm)"]
  var option = {
    color: ['#ff3366', '#fff585'],
    title: $.extend(true, {}, title, {
      text: datatitle,
      show: true,
      top: 5,
      fontSize: 16
    }),
    legend: $.extend(true, {}, legend, {
      data: legendData,
      show: true,
      top: 25
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        var html = "";
        if (params[0] && params[0].data != undefined) {
          html += "积水深度(m)" + ":" + (params[0].data[0] ? params[0].data[0] : "-") + "<br/>" + "1小时降雨(mm)：" + params[0].data[1] + "<br/>";
        }
        if (params[1] && params[1].data != undefined) {
          html += "积水深度(m)" + ":" + (params[1].data[0] ? params[1].data[0] : "-") + "<br/>" + "3小时降雨(mm)：" + params[1].data[1];

        }
        return html;
      }
    },
    xAxis: $.extend(true, [], xAxis, [{
      data: params.data.value3.drp3,
      name: "积水深度(m)",
      nameGap: 35,
      axisLabel: {
        formatter: function (value, index) {
          var value = "" + value;
          return value;
        }
      }
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "降雨(mm)",
      min: waterY.min,
      max: waterY.max,
      interval: waterY.interval - 1,
      position: 'left',
      splitLine: {
        show: false
      }
    }, {
      show: false
    }]),
    grid: $.extend({}, grid, {
      bottom: "48px",
      right: "10px",
      left: "60px",
      top: "50px"
    }),
    series: [{
      name: legendData[0],
      type: "line",
      data: params.data.value1,
      smooth: true,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'top'
              }
            }
          }
        }]
      },
    }, {
      name: legendData[1],
      type: "line",
      data: params.data.value3,
      smooth: true,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'line',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'top'
              }
            }
          }
        }]
      }
    },],
    toolbox: {
      feature: {
        saveAsImage: {
          type: "jpg",
          backgroundColor: toolboxIconbackgroundColor,
          icon: toolboxIcon,
          excludeComponents: ['toolbox']
        }
      },
      itemSize: toolboxIconSize,
      right: "18",
    },
  };
  var chart = echarts.init(document.getElementById(id));
  chart.setOption(option);
  if ($.inArray(chart, chartArray) == -1) {
    chartArray.push(chart);
  }

}

/**
 * 初始化水库泄洪曲线
 * @param params数据对象
 * **/
function initReservoirReleaseChart(params, clickTableHeight, win) {
  var dataTitle = params.title;
  var data = params.data;
  var tableData = [];
  for (var i = 0; i < data.length; i++) {
    var temp = {};
    temp.id = i + 1;
    temp.rt = data[i][0];
    temp.water = data[i][1];
    tableData.push(temp);
  }
  var id = params.id;
  var option = {
    color: CHART_COLOR,
    title: $.extend(true, {}, title, {
      text: dataTitle,
      show: false
    }),
    legend: $.extend(true, {}, legend, {
      data: ["水位流量"]
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0].data) {
          return "-";
        }
        return "出库流量(m³/s)：" + params[0].data[0] + "<br/>" + "水位(m)：" + params[0].data[1]
      }
    },
    calculable: true,
    xAxis: $.extend(true, [], xAxis, [{
      name: "出库流量(m³/s)",
      type: "value"
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "水位(m)",
      type: 'value',
      min: 'dataMin',
      splitLine: {
        show: false
      }
    }, {
      show: false
    }]),
    itemStyle: {
      normal: {
        color: "#74AADE",
        opacity: 0 // 拐点不显示
      }
    },
    grid: $.extend({}, grid, {
      bottom: "60",
      right: '15'
    }),
    series: [{
      name: '水位流量',
      type: "line",
      symbol: "none",
      data: data,
      smooth: true
    }],
    toolbox: {
      feature: {
        saveAsImage: {
          type: "jpg",
          backgroundColor: toolboxIconbackgroundColor,
          icon: toolboxIcon,
          excludeComponents: ['toolbox']
        }
      },
      itemSize: toolboxIconSize,
      right: "18",
    },
  };
  if (!document.getElementById(id)) {
    return;
  }
  var chart = echarts.init(document.getElementById(id));
  chart.setOption(option);
  if ($.inArray(chart, chartArray) == -1) {
    chartArray.push(chart);
  }

  //创建数据表格
  var tableId = params.tableId;
  if (!tableId) {
    return;
  }
  var columns = [{
    field: 'id',
    title: '序号',
    align: 'center'
  },
  {
    field: 'rt',
    title: '出库流量(m³/s)',
    align: 'center'
  }, {
    field: 'water',
    title: '水位(m)',
    align: 'center'
  }
  ];
  $('#' + tableId).bootstrapTable('load', tableData);
  var option = {
    height: clickTableHeight,
    columns: columns,
    data: tableData,
    pagination: false,
    pageNumber: 1, //初始化加载第一页，默认第一页
    pageSize: 50, //每页的记录行数（*）
    pageList: [20, 50, 100, 200],
  };
  $('#' + tableId).bootstrapTable(option);
  if (win) {
    resizeTablePaddingBottom(win);
  }
}

/**
 * 初始化实时过程线
 *@param params数据对象
 ***/
function initRealTimeChart1(params) {
  var title = params.title;
  var data = params.data;
  var rainId = params.rainId;
  var waterId = params.waterId;
  var type = params.type;
  var rainMax = Math.round(Math.max.apply(Math, data.rainData));
  var maxWater = Math.round(Math.max.apply(Math, data.waterData));
  var maxFlood = Math.round(Math.max.apply(Math, data.otherData));
  if (rainMax < 15) {
    rainMax = rainMax * 1.5;
  } else {
    rainMax = rainMax * 1.2;
  }
  if (maxFlood < 0.5 && maxFlood > 0.1) {
    maxFlood = Math.round(maxFlood * 5);
  } else if (maxFlood <= 0.1) {
    maxFlood = 0.15;
  } else {
    maxFlood = Math.round(maxFlood * 1.5);
  }
  if (maxWater < 0.5 && maxWater > 0.1) {
    maxWater = Math.round(maxWater * 5);
  } else if (maxFlood <= 0.1) {
    maxWater = 0.15;
  } else {
    maxWater = Math.round(maxWater * 1.2);
  }
  var waterLegend = [],
    sd;
  if (type) { //水库站
    waterLegend = ['\n', '\n', '\n', '水位(m)', '库容(万m³)'];
    sd = "库容(万m³)";
  } else { //水文站
    waterLegend = ['\n', '\n', '\n', '水位(m)', '流量(m³/s)'];
    sd = '流量(m³/s)';
  }
  var option = {
    color: CHART_COLOR,
    title: $.extend(true, {}, title, {
      text: title
    }),
    legend: $.extend(true, {}, legend, {
      data: ["降水(mm)"]
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0].data) {
          return "-";
        }
        return params[0].name + "<br/>" + params[0].seriesName + ":" + (params[0].value == undefined ? "" : params[0].value)
      }
    },
    calculable: true,
    xAxis: $.extend(true, [], xAxis, [{
      data: data.xData
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "降水量(mm)",
      scale: true,
      inverse: true,
      max: rainMax
    }]),
    itemStyle: itemStyle,
    grid: $.extend({}, grid, {
      containLabel: true
    }),
    series: [{
      name: '降水(mm)',
      type: "bar",
      data: data.rainData,
    }]
  };
  var option2 = {
    color: CHART_COLOR,
    legend: $.extend(true, {}, legend, {
      data: waterLegend
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0]) {
          return "";
        }
        var html = "";
        if (params[0] && params[0].data != undefined) {
          html += params[0].name + "<br/>" + params[0].seriesName + ":" + params[0].data + "<br/>";
        }
        if (params[1] && params[1].data != undefined) {
          html += params[1].seriesName + ":" + params[1].data;
        }
        return html;
      }
    },
    calculable: true,
    xAxis: $.extend(true, [], xAxis, [{
      name: '时间',
      data: data.xData
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "水位(m)",
      max: maxWater
    }, {
      name: sd,
      max: maxFlood
    }]),
    itemStyle: itemStyle,
    grid: $.extend({}, grid, {
      containLabel: true
    }),
    series: [{
      name: '水位(m)',
      type: 'line',
      data: data.waterData,
    }, {
      name: sd,
      type: 'line',
      data: data.otherData,
      yAxisIndex: 1
    }]
  }
  var chart1 = echarts.init(document.getElementById(rainId));
  var chart2 = echarts.init(document.getElementById(waterId));
  chart1.setOption(option);
  chart2.setOption(option2);
  echarts.connect([chart1, chart2]);
  chartArray.push(chart1);
  chartArray.push(chart2);
}

//实测水深
var initRealDeepChart = function (params, th) {
  var title = params.title;
  var xData = params.xData;
  var deepData = [];
  var id = params.id;
  var tableData = [];
  for (var i = 0; i < xData.depth.length; i++) {
    var temp = {};
    temp.id = i + 1;
    temp.time = xData.tm[i];
    temp.deep = xData.depth[i] || '';
    deepData.push(xData.depth[i] || '');
    tableData.push(temp);
  }
  var option = {
    color: CHART_COLOR,
    title: $.extend(true, {}, title, {
      text: title
    }),
    legend: $.extend(true, {}, legend, {
      data: ["水深(m)"]
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0].data) {
          return "-";
        }
        return params[0].name + "<br/>" + params[0].seriesName + ":" + (params[0].data ? params[0].data : "-");
      }
    },
    calculable: true,
    xAxis: $.extend(true, [], xAxis, [{
      name: "时间",
      data: xData.tm
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "水深(m)",
      min: 'dataMin',
      splitLine: {
        show: false
      }
    }, {
      show: false
    }]),
    itemStyle: {
      normal: {
        color: "#74AADE",
        opacity: 0 // 拐点不显示
      }
    },
    grid: $.extend({}, grid, {
      bottom: "10%"
    }),
    series: [{
      name: '水深(m)',
      type: "line",
      data: deepData,
      smooth: true
    }]
  };
  var chart = echarts.init(document.getElementById(id));
  chart.setOption(option);
  chartArray.push(chart);
  //创建数据表格
  var tableId = params.tableId;
  if (!tableId) {
    return;
  }
  var columns = [{
    field: 'id',
    title: '序号',
    align: 'center'
  }, {
    field: 'time',
    title: '时间',
    align: 'center'
  }, {
    field: 'deep',
    title: '水深(m)',
    align: 'center'
  }];
  $('#' + tableId).bootstrapTable('load', tableData);
  var option = {
    height: th,
    columns: columns,
    data: tableData,
    pagination: true,
    pageNumber: 1, //初始化加载第一页，默认第一页
    pageSize: 10, //每页的记录行数（*）
    pageList: [10],
  };
  $('#' + tableId).bootstrapTable(option);
}

function createKjfxChartMini(title, domId, foreData, type) {
  var tableData = [],
    fd = [],
    time = [];
  if (!foreData) {
    foreData = {
      tm: [],
      drp: []
    }
  }
  var data = foreData;
  var max = getArrayMax(data.drp);
  var min = getArrayMin(data.drp);
  time = data.tm;
  var pt = foreData.newtm;
  var ptIndex;
  for (var i = 0; i < data.tm.length; i++) {
    var temp = {};
    temp.id = i + 1;
    temp.time = data.tm[i];
    temp.fore = data.drp[i];
    tableData.push(temp);
    var t1 = moment(data.tm[i]);
    var t2 = moment(pt);
    var value = data.drp[i];
    fd[i] = value;
    data.drp[i] = {
      value: value
    };
    if (data.tm[i] == pt) {
      ptIndex = i;
    }
  }
  var yAxis = getDataMaxMin(max, min);
  var startValue;
  var startIndex = ptIndex - 24 * 5;
  if (startIndex < 0) {
    startIndex = 0;
  }
  var endIndex = time.length - 1;
  if (startIndex > 0 || startIndex == 0) {
    startValue = time[startIndex];
  }
  var endValue = time[endIndex];
  var kjfxOpiton = {
    color: [chartColor.foreRainColor],
    title: {
      text: title,
      show: false,
      left: "center",
      textStyle: {
        color: '#fff'
      }
    },
    legend: {
      data: ['降水(mm)'],
      textStyle: {
        color: '#fff'
      },
      show: true
    },
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0]) {
          return "";
        }
        var html = "";
        html += params[0].name + "<br/>" + params[0].seriesName + ":" + (params[0].value == undefined ? "-" : params[0].value)
        return html;
      }
    },
    xAxis: [{
      type: 'category',
      name: "时间",
      nameLocation: 'middle',
      nameGap: 30,
      nameTextStyle: {
        color: "#fff"
      },
      boundaryGap: true,
      axisLine: {
        onZero: false
      },
      data: time,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      splitLine: {
        show: false
      }
    },

    ],
    yAxis: [{
      type: 'value',
      name: "降雨量(mm)",
      nameLocation: 'middle',
      nameTextStyle: {
        color: "#fff"
      },
      nameGap: 30,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      min: yAxis.min,
      max: yAxis.max,
      interval: yAxis.interval,
      splitArea: {
        show: true,
        areaStyle: {
          color: ['rgba(17,85,127,0.3)', 'rgba(121,166,191,0.3)']
        }
      },
      inverse: true
    }, {
      axisTick: {
        show: false
      },
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      splitLine: {
        show: false
      }
    }],
    dataZoom: [{
      type: 'slider',
      show: false,
      handleSize: 8,
      fillerColor: 'rgba(70,130,180,0.5)',
      backgroundColor: ['rgba(47,69,84,1)']
    },
    {
      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
      handleSize: '80%',
      textStyle: {
        color: '#fff'
      },
      realtime: false,
      handleStyle: {
        color: '#fff',
        shadowBlur: 3,
        shadowColor: 'rgba(0, 0, 0, 0.6)',
        shadowOffsetX: 2,
        shadowOffsetY: 2
      },
      labelFormatter: function (value) {
        var data = time[value];
        if (data) {
          return data.replace(' ', '\n')
        }

      }
    }
    ],
    series: [{
      name: '降水(mm)',
      type: 'bar',
      data: data.drp,
      barWidth: 5,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'bottom'
              }
            }
          }
        }]
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [pt, 0],
          }, {
            coord: [pt, yAxis.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted'
              }
            },
            label: {
              normal: {
                position: 'start',
                formatter: pt
              }
            }
          }]
        ]
      }
    }],
    grid: $.extend({}, grid, {
      bottom: "20%",
      right: "5%",
      top: "18%",
      containLabel: true,
      left: '5%'
    }),
  };
  if (startValue && endValue) {
    kjfxOpiton.dataZoom[0].startValue = startValue;
    kjfxOpiton.dataZoom[0].endValue = endValue;
  } else {
    kjfxOpiton.dataZoom[0].start = 80;
    kjfxOpiton.dataZoom[0].end = 100;
  }
  if (type == "Kjfx1") {
    Kjfx1Chart1 = echarts.init(document.getElementById(domId));
    Kjfx1Chart1.setOption(kjfxOpiton);
  } else if (type == "Kjfx2") {
    kjfxOpiton.series[0].markLine = [];
    Kjfx1Chart2 = echarts.init(document.getElementById(domId));
    Kjfx1Chart2.setOption(kjfxOpiton);
  }
}

//空间分析图表
function createKjfxChartMax(title, domId, foreData, type) {
  var tableData = [],
    fd = [],
    time = [];
  if (!foreData) {
    foreData = {
      tm: [],
      drp: []
    }
  }
  var data = foreData;
  var max = getArrayMax(data.drp);
  var min = getArrayMin(data.drp);
  time = data.tm;
  var pt = foreData.newtm;
  var ptIndex;
  for (var i = 0; i < data.tm.length; i++) {
    var temp = {};
    temp.id = i + 1;
    temp.time = data.tm[i];
    temp.fore = data.drp[i];
    tableData.push(temp);
    var t1 = moment(data.tm[i]);
    var t2 = moment(pt);
    var value = data.drp[i];
    fd[i] = value;
    data.drp[i] = {
      value: value
    };
    if (data.tm[i] == pt) {
      ptIndex = i;
    }
  }
  var yAxis = getDataMaxMin(max, min);
  var startValue;
  var startIndex = ptIndex - 24 * 5;
  if (startIndex < 0) {
    startIndex = 0;
  }
  var endIndex = time.length - 1;
  if (startIndex > 0 || startIndex == 0) {
    startValue = time[startIndex];
  }
  var endValue = time[endIndex];
  var kjfxOpiton = {
    color: [chartColor.foreRainColor],
    title: {
      text: title,
      show: false,
      left: "center",
      textStyle: {
        color: '#fff'
      }
    },
    legend: {
      data: ['降水(mm)'],
      textStyle: {
        color: '#fff'
      },
      show: true
    },
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0]) {
          return "";
        }
        var html = "";
        html += params[0].name + "<br/>" + params[0].seriesName + ":" + (params[0].value == undefined ? "-" : params[0].value)
        return html;
      }
    },
    xAxis: [{
      type: 'category',
      name: "时间",
      nameLocation: 'middle',
      nameGap: 30,
      nameTextStyle: {
        color: "#fff"
      },
      boundaryGap: true,
      axisLine: {
        onZero: false
      },
      data: time,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      splitLine: {
        show: false
      }
    },

    ],
    yAxis: [{
      type: 'value',
      name: "降雨量(mm)",
      nameLocation: 'middle',
      nameTextStyle: {
        color: "#fff"
      },
      nameGap: 30,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      min: yAxis.min,
      max: yAxis.max,
      interval: yAxis.interval,
      splitArea: {
        show: true,
        areaStyle: {
          color: ['rgba(17,85,127,0.3)', 'rgba(121,166,191,0.3)']
        }
      },
      inverse: true
    }, {
      axisTick: {
        show: false
      },
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      splitLine: {
        show: false
      }
    }],
    dataZoom: [{
      type: 'slider',
      show: false,
      handleSize: 8,
      fillerColor: 'rgba(70,130,180,0.5)',
      backgroundColor: ['rgba(47,69,84,1)']
    },
    {
      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
      handleSize: '80%',
      textStyle: {
        color: '#fff'
      },
      realtime: false,
      handleStyle: {
        color: '#fff',
        shadowBlur: 3,
        shadowColor: 'rgba(0, 0, 0, 0.6)',
        shadowOffsetX: 2,
        shadowOffsetY: 2
      },
      labelFormatter: function (value) {
        var data = time[value];
        if (data) {
          return data.replace(' ', '\n')
        }

      }
    }
    ],
    series: [{
      name: '降水(mm)',
      type: 'bar',
      data: data.drp,
      barWidth: 5,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'bottom'
              }
            }
          }
        }]
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [pt, 0],
          }, {
            coord: [pt, yAxis.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted'
              }
            },
            label: {
              normal: {
                position: 'start',
                formatter: pt
              }
            }
          }]
        ]
      }
    }],
    grid: $.extend({}, grid, {
      bottom: "20%",
      right: "5%",
      top: "18%",
      containLabel: true,
      left: '5%'
    }),
  };
  if (startValue && endValue) {
    kjfxOpiton.dataZoom[0].startValue = startValue;
    kjfxOpiton.dataZoom[0].endValue = endValue;
  } else {
    kjfxOpiton.dataZoom[0].start = 80;
    kjfxOpiton.dataZoom[0].end = 100;
  }
  if (type == "KjfxMax1") {
    KjfxMaxChart1 = echarts.init(document.getElementById(domId));
    KjfxMaxChart1.setOption(kjfxOpiton);
  } else if (type == "KjfxMax2") {
    kjfxOpiton.series[0].markLine = [];
    KjfxMaxChart2 = echarts.init(document.getElementById(domId));
    KjfxMaxChart2.setOption(kjfxOpiton);
  }
}

//降水预报
function createAreaForeChart(title, domId, foreData, tableId, th, win) {
  var tableData = [],
    fd = [],
    time = [];
  if (!foreData) {
    foreData = {
      tm: [],
      drp: []
    }
  }
  var data = foreData;
  var max = getArrayMax(data.drp);
  var min = getArrayMin(data.drp);
  time = data.tm;
  var pt = foreData.newtm;
  var ptIndex;
  for (var i = 0; i < data.tm.length; i++) {
    var temp = {};
    temp.id = i + 1;
    temp.time = data.tm[i];
    temp.fore = data.drp[i];
    tableData.push(temp);
    var t1 = moment(data.tm[i]);
    var t2 = moment(pt);
    var value = data.drp[i];
    fd[i] = value;
    data.drp[i] = {
      value: value
    };
    if (data.tm[i] == pt) {
      ptIndex = i;
    }
  }
  var yAxis = getDataMaxMin(max, min);
  var startValue;
  var startIndex = ptIndex - 24 * 5;
  if (startIndex < 0) {
    startIndex = 0;
  }
  var endIndex = time.length - 1;
  if (startIndex > 0 || startIndex == 0) {
    startValue = time[startIndex];
  }
  var endValue = time[endIndex];
  var op = {
    color: [chartColor.foreRainColor],
    title: {
      text: title,
      show: false,
      left: "center",
      textStyle: {
        color: '#fff'
      }
    },
    legend: {
      data: ['降水(mm)'],
      textStyle: {
        color: '#fff'
      },
      show: false
    },
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0]) {
          return "";
        }
        var html = "";
        html += params[0].name + "<br/>" + params[0].seriesName + ":" + (params[0].value == undefined ? "-" : params[0].value)
        return html;
      }
    },
    xAxis: [{
      type: 'category',
      name: "时间",
      nameLocation: 'middle',
      nameGap: 30,
      nameTextStyle: {
        color: "#fff"
      },
      boundaryGap: true,
      axisLine: {
        onZero: false
      },
      data: time,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      splitLine: {
        show: false
      }
    },

    ],
    yAxis: [{
      type: 'value',
      name: "降雨量(mm)",
      nameLocation: 'middle',
      nameTextStyle: {
        color: "#fff"
      },
      nameGap: 30,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      min: yAxis.min,
      max: yAxis.max,
      interval: yAxis.interval,
      splitArea: {
        show: true,
        areaStyle: {
          color: ['rgba(17,85,127,0.3)', 'rgba(121,166,191,0.3)']
        }
      },
      inverse: true
    }, {
      axisTick: {
        show: false
      },
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      splitLine: {
        show: false
      }
    }],
    dataZoom: [{
      type: 'slider',
      show: false,
      handleSize: 8,
      fillerColor: 'rgba(70,130,180,0.5)',
      backgroundColor: ['rgba(47,69,84,1)']
    },
    {
      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
      handleSize: '80%',
      textStyle: {
        color: '#fff'
      },
      realtime: false,
      handleStyle: {
        color: '#fff',
        shadowBlur: 3,
        shadowColor: 'rgba(0, 0, 0, 0.6)',
        shadowOffsetX: 2,
        shadowOffsetY: 2
      },
      labelFormatter: function (value) {
        var data = time[value];
        if (data) {
          return data.replace(' ', '\n')
        }

      }
    }
    ],
    series: [{
      name: '降水(mm)',
      type: 'bar',
      data: data.drp,
      barWidth: 5,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'bottom'
              }
            }
          }
        }]
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [pt, 0],
          }, {
            coord: [pt, yAxis.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted'
              }
            },
            label: {
              normal: {
                position: 'start',
                formatter: pt
              }
            }
          }]
        ]
      }
    }],
    grid: $.extend({}, grid, {
      bottom: "80",
      right: "70",
      top: "30",
      containLabel: true,
      left: 55
    }),
  };
  if (startValue && endValue) {
    op.dataZoom[0].startValue = startValue;
    op.dataZoom[0].endValue = endValue;
  } else {
    op.dataZoom[0].start = 80;
    op.dataZoom[0].end = 100;
  }
  var myChart = echarts.init(document.getElementById(domId));
  myChart.setOption(op);
  chartArray.push(myChart);
  if (tableId) {
    //创建数据表格
    var columns = [{
      field: 'id',
      title: '序号',
      align: 'center'
    }, {
      field: 'time',
      title: '时间',
      align: 'center'
    }, {
      field: 'fore',
      title: '预报降水(mm)',
      align: 'center'
    }];
    $('#' + tableId).bootstrapTable('destroy');
    var option = {
      height: th,
      columns: columns,
      data: tableData,
      pagination: true,
      pageNumber: 1, //初始化加载第一页，默认第一页
      pageSize: 50, //每页的记录行数（*）
      pageList: [20, 50, 100, 200],
    }
    $('#' + tableId).bootstrapTable(option);
    resizeTablePaddingBottom(win);
    return myChart;
  }
}

//生成调度曲线
function initReservoirDispatchDataChart(params, window) {
  var xData = params.xData;
  var foreInFlow = params.foreInFlow || [];
  var realInFlow = params.realInFlow || [];
  var foreOutFlow = params.foreOutFlow || [];
  var realOutFlow = params.realOutFlow || [];
  var foreWater = params.foreWater || [];
  var tableData = [];
  var gateCurveList = params.gateCurveList || [];
  var maxArray = [getArrayMax(foreInFlow), getArrayMax(realInFlow), getArrayMax(foreOutFlow), getArrayMax(realOutFlow)];
  var minArray = [getArrayMin(foreInFlow), getArrayMin(realInFlow), getArrayMin(foreOutFlow), getArrayMin(realOutFlow)];
  for (var i = 0; i < gateCurveList.length; i++) {
    var temp = gateCurveList[i].fotq || [];
    minArray.push(getArrayMin(temp));
    maxArray.push(getArrayMax(temp));
  }
  var flowMin = getArrayMin(minArray);
  var flowMax = getArrayMax(maxArray);
  var waterMax = getArrayMax(foreWater);
  var waterMin = getArrayMin(foreWater);
  var flowYAxis = getDataMaxMin(flowMax, flowMin);
  var waterYAxis = getDataMaxMin(waterMax, waterMin, 1);
  var id = params.id;
  var top = 35;
  if ($('#' + id).width() < 800) {
    top = 40;
  }
  ;
  var legendTop = 0;
  if (params.isShowTitle) {
    top += 20;
    legendTop = 20;
  }
  var legendData;
  if (params.legend) {
    legendData = params.legend;
  } else {
    legendData = ["入库流量", "出库流量", "水位"];
  }
  var option = {
    color: [chartColor.foreInFlowColor, chartColor.foreOutFlowColor, chartColor.foreDamBeforeColor],
    title: $.extend(true, {}, title, {
      text: params.title || '',
      show: params.isShowTitle || false
    }),
    legend: $.extend(true, {}, legend, {
      data: legendData,
      show: true,
      top: legendTop
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        var html = "";
        if (params[0]) {
          html += params[0].name + "<br/>" + params[0].seriesName + "(m³/s):" + (params[0].data != undefined ? params[0].data : "-");
        }
        for (var i = 1; i < params.length; i++) {
          if (params[i].seriesName == '水位') {
            html += "<br/>" + params[i].seriesName + "(m):"
          } else {
            html += "<br/>" + params[i].seriesName + "(m³/s):"
          }
          html += (params[i].data != undefined ? params[i].data : "-");
        }
        return html;
      }
    },
    xAxis: $.extend(true, [], xAxis, [{
      data: xData,
      name: "时间",
      nameGap: 35,
      axisLabel: {
        formatter: function (value, index) {
          return value.replace(' ', "\n");
        },
      }
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "流量(m³/s)",
      max: flowYAxis.max,
      min: flowYAxis.min,
      interval: flowYAxis.interval
    }, {
      name: "水位(m)",
      max: waterYAxis.max,
      min: waterYAxis.min,
      interval: waterYAxis.interval,
      axisTick: {
        show: true
      },
      axisLabel: {
        show: true
      }
    }]),
    grid: $.extend({}, grid, {
      bottom: "50",
      right: "60",
      top: top
    }),
    series: [{
      name: legendData[0],
      type: "line",
      data: foreInFlow,
      smooth: true,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'top'
              }
            }
          }
        }]
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [xData[0], flowYAxis.min],
          }, {
            coord: [xData[0], flowYAxis.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted',
                opacity: 0,
              }
            },
            label: {
              normal: {
                show: false,
                position: 'end',
                formatter: xData[0]
              }
            }
          }]
        ]
      },
    }, {
      name: legendData[1],
      type: "line",
      data: foreOutFlow,
      smooth: true,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'top'
              }
            }
          }
        }]
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [xData[0], flowYAxis.min],
          }, {
            coord: [xData[0], flowYAxis.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted',
                opacity: 0,
              }
            },
            label: {
              normal: {
                show: false,
                position: 'end',
                formatter: xData[0]
              }
            }
          }]
        ]
      },
    },
    {
      name: legendData[2],
      type: "line",
      data: foreWater,
      smooth: true,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'top'
              }
            }
          }
        }]
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [xData[0], waterYAxis.min],
          }, {
            coord: [xData[0], waterYAxis.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted',
                opacity: 0,
              }
            },
            label: {
              normal: {
                show: false,
                position: 'end',
                formatter: xData[0]
              }
            }
          }]
        ]
      },
      yAxisIndex: 1
    }
    ]
  };
  option.color = (option.color).concat(CHART_COLOR);
  var columns = [{
    field: 'id',
    title: '序号',
    align: 'center'
  },
  {
    field: 'time',
    title: '时间',
    align: 'center'
  },
  {
    field: 'foreInFlow',
    title: '入库流量(m³/s)',
    align: 'center'
  }, {
    field: 'foreOutFlow',
    title: '出库流量(m³/s)',
    align: 'center'
  }, {
    field: 'foreWater',
    title: '水位(m)',
    align: 'center'
  }
  ];
  for (var i = 0; i < gateCurveList.length; i++) {
    var name = (gateCurveList[i].dnnm || gateCurveList[i].dnid) + "出流";
    option.legend.data.push(name);
    option.series.push({
      name: name,
      type: "line",
      data: gateCurveList[i].fotq,
      smooth: true,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'top'
              }
            }
          }
        }]
      },
    });
    var temp = {};
    temp.field = "height" + i;
    temp.title = (gateCurveList[i].dnnm || gateCurveList[i].dnid) + "开度(m)";
    temp.align = "center";
    columns.push(temp);
    temp = {};
    temp.field = "out" + i;
    temp.title = name + "(m³/s)";
    temp.align = "center";
    columns.push(temp);
  }

  for (var i = 0; i < xData.length; i++) {
    var temp = {};
    temp.id = i + 1;
    temp.time = xData[i];
    temp.foreInFlow = foreInFlow[i];
    temp.foreOutFlow = foreOutFlow[i];
    temp.foreWater = foreWater[i];
    for (var j = 0; j < gateCurveList.length; j++) {
      var field = "out" + j;
      temp[field] = gateCurveList[j].fotq[i];
      field = "height" + j;
      temp[field] = gateCurveList[j].height[i]
    }
    tableData.push(temp)
  }
  var chart = echarts.init(document.getElementById(id));
  chart.setOption(option);
  if ($.inArray(chart, chartArray) == -1) {
    chartArray.push(chart);
  }
  return chart;
}

//根据x轴格式化没有数据的y轴
function formatChartData(xData, yData) {
  // if(!xData||!yData){
  //     return [];
  // }
  //     for(var i=0;i<xData.length;i++){
  //     if(yData[i]==undefined||yData[i]==null){
  //         yData[i]="-"
  //     }
  //     }
  return yData;
}

//调整表格的宽、高
function resizeChartContainerSize(win) {
  var dom = win.body.find(".chart-container");
  var w = dom.parent().width() - 10;
  var h = dom.parent().height();
  h -= 40;
  dom.css("width", w + "px").css("height", h + "px");
}

//联合调度降雨图表
var createDispatchRainChart = function (domId, foreData) {
  var fd = [],
    time = [];
  var data = foreData;
  time = data.tm;
  fd = data.drp;
  var fds = data.drps;
  var maxRainData = getArrayMax(fd);
  var minRainData = getArrayMin(fd);
  var maxRainDatas = getArrayMax(fds);
  var minRainDatas = getArrayMin(fds);
  var maxY = getArrayMax([maxRainData, maxRainDatas]);
  var minY = getArrayMin([minRainData, minRainDatas]);
  var rainY = getDataMaxMin(maxY, minY)
  var op = {
    color: [chartColor.foreRainColor, chartColor.realRainColor],
    title: {
      text: title,
      show: false,
      left: "center",
      textStyle: {
        color: '#fff'
      }
    },
    legend: {
      data: ['降水(mm)', '累积雨量(mm)'],
      textStyle: {
        color: '#fff'
      }
    },
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0]) {
          return "";
        }
        var html = "";
        html += params[0].name + "<br/>" + params[0].seriesName + ":" + (params[0].value == undefined ? "-" : params[0].value);
        if (params[1]) {
          html += "<br/>" + params[1].seriesName + ":" + (params[1].value == undefined ? "-" : params[1].value);
        }
        return html;
      }
    },
    xAxis: [{
      type: 'category',
      name: "时间",
      nameLocation: 'middle',
      nameGap: 30,
      nameTextStyle: {
        color: "#fff"
      },
      boundaryGap: true,
      axisLine: {
        onZero: false
      },
      data: time,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      splitLine: {
        show: false
      }
    },

    ],
    yAxis: [{
      type: 'value',
      name: "降雨量(mm)",
      nameLocation: 'middle',
      nameTextStyle: {
        color: "#fff"
      },
      nameGap: 30,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      max: rainY.max,
      min: rainY.min,
      interval: rainY.interval,
      splitArea: {
        show: true,
        areaStyle: {
          color: ['rgba(17,85,127,0.3)', 'rgba(121,166,191,0.3)']
        }
      },
      inverse: true
    }, {
      axisTick: {
        show: false
      },
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      splitLine: {
        show: false
      }
    }],
    series: [{
      name: '降水(mm)',
      type: 'bar',
      data: data.drp,
      barCategoryGap: 0,
      barWidth: 5,
      markPoint: {
        symbol: 'circle',
        symbolSize: 5,
        data: [{
          type: "max",
          name: '最大值'
        }],
        label: {
          normal: {
            position: 'bottom'
          }
        }
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [time[0], 0],
          }, {
            coord: [time[0], rainY.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted',
                opacity: 0,
              }
            },
            label: {
              normal: {
                show: false,
                position: 'start',
                formatter: time[0]
              }
            }
          }]
        ]
      }
    }, {
      name: '累积雨量(mm)',
      type: 'line',
      data: data.drps,
      markPoint: {
        symbol: 'circle',
        symbolSize: 3,
        data: [{
          type: "max",
          name: '最大值'
        }],
        label: {
          normal: {
            position: 'bottom'
          }
        }
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [time[0], 0],
          }, {
            coord: [time[0], rainY.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted',
                opacity: 0,
              }
            },
            label: {
              normal: {
                position: 'start',
                formatter: time[0],
                show: false
              }
            }
          }]
        ]
      },
      smooth: true
    },],
    grid: $.extend({}, grid, {
      bottom: "45px",
      right: "30",
      top: "30",
      left: "48"
    }),
  };
  var myChart = echarts.init(document.getElementById(domId));
  myChart.setOption(op);
  $(window).resize(function () {
    myChart.resize();
  });
  return {
    option: op,
    chart: myChart
  };
}

function createDispatchReservoirInFlowChart(domId, result) {
  var time = [];
  time = result.tm;
  var compareDataMax = [],
    compareDataMin = [];
  for (var i = 0; i < result.data.length; i++) {
    var value = result.data[i].value;
    compareDataMax.push(getArrayMax(value));
    compareDataMin.push(getArrayMin(value));
  }
  var maxY = getArrayMax(compareDataMax);
  var minY = getArrayMin(compareDataMin);
  var flowY = getDataMaxMin(maxY, minY);

  var option = {
    color: CHART_COLOR,
    title: {
      text: title,
      show: false,
      left: "center",
      textStyle: {
        color: '#fff'
      }
    },
    legend: {
      textStyle: {
        color: '#fff'
      },
      data: []
    },
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0]) {
          return "";
        }
        var html = "";
        html += params[0].name + "<br/>" + params[0].seriesName + "(m³/s):" + (params[0].value == undefined ? "-" : params[0].value);
        if (params[1]) {
          html += "<br/>" + params[1].seriesName + "(m³/s):" + (params[1].value == undefined ? "-" : params[1].value);
        }
        if (params[2]) {
          html += "<br/>" + params[2].seriesName + "(m³/s):" + (params[2].value == undefined ? "-" : params[2].value);
        }

        return html;
      }
    },
    xAxis: [{
      type: 'category',
      name: "时间",
      nameLocation: 'middle',
      nameGap: 30,
      nameTextStyle: {
        color: "#fff"
      },
      boundaryGap: true,
      axisLine: {
        onZero: false
      },
      data: time,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      splitLine: {
        show: false
      }
    },

    ],
    yAxis: [{
      type: 'value',
      name: "流量(m³/s)",
      nameLocation: 'middle',
      nameTextStyle: {
        color: "#fff"
      },
      nameGap: 35,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      max: flowY.max,
      min: flowY.min,
      interval: flowY.interval,
      splitArea: {
        show: true,
        areaStyle: {
          color: ['rgba(17,85,127,0.3)', 'rgba(121,166,191,0.3)']
        }
      }
    }, {
      axisTick: {
        show: false
      },
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      splitLine: {
        show: false
      }
    }],
    series: [],
    grid: $.extend({}, grid, {
      bottom: "45px",
      right: "10",
      top: "20",
      left: "48"
    }),
  };
  for (var i = 0; i < result.data.length; i++) {
    var value = result.data[i].value;
    var name = result.data[i].nodeName;
    option.legend.data.push(name);
    var temp = {
      name: name,
      type: 'line',
      data: value,
      markPoint: {
        symbol: 'circle',
        symbolSize: 5,
        data: [{
          type: "max",
          name: '最大值'
        }],
        label: {
          normal: {
            position: 'top'
          }
        }
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [time[0], 0],
          }, {
            coord: [time[0], flowY.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted',
                opacity: 0,
              }
            },
            label: {
              normal: {
                show: false,
                position: 'end',
                formatter: time[0]
              }
            }
          }]
        ]
      },
      smooth: true
    };
    option.series.push(temp);
  }
  var width = $('#' + domId).width();
  var length = option.legend.data.length;
  var allWidth = 135 * length;
  var counter = Math.ceil(allWidth / width);
  var top = 30 + 20 * (counter - 1);
  if (width < 360) {
    top += 10;
  }
  option.grid.top = top;
  var myChart = echarts.init(document.getElementById(domId));
  myChart.setOption(option);
  $(window).resize(function () {
    myChart.resize();
  });
  return {
    option: option,
    chart: myChart
  };
}

//出库及水位过程线
function createReservoirOutFlowAndWaterChart(domId, outFlowData, waterData, isEnlarge) {
  var time = outFlowData.tm;
  var compareFlowDataMax = [],
    compareFlowDataMin = [],
    compareWaterDataMax = [],
    compareWaterDataMin = [];
  for (var i = 0; i < outFlowData.data.length; i++) {
    var flowValue = outFlowData.data[i].value;
    var waterValue = waterData.data[i].value;
    if (flowValue && flowValue.length > 0) {
      compareFlowDataMax.push(getArrayMax(flowValue));
      compareFlowDataMax.push(getArrayMin(flowValue));
    }
    if (waterValue && waterValue.length > 0) {
      compareWaterDataMax.push(getArrayMax(waterValue));
      compareWaterDataMin.push(getArrayMin(waterValue));
    }
  }
  var maxRightY = getArrayMax(compareFlowDataMax);
  var minRightY = getArrayMin(compareFlowDataMin);
  var maxLeftY = getArrayMax(compareWaterDataMax);
  var minLeftY = getArrayMin(compareWaterDataMin);
  var flowY = getDataMaxMin(maxRightY, minRightY);
  var waterY = getDataMaxMin(maxLeftY, minLeftY);
  var color = [chartColor.foreInFlowColor, chartColor.foreOutFlowColor, chartColor.foreDamBeforeColor].concat(CHART_COLOR);
  var option = {
    color: color,
    title: {
      text: outFlowData.Title,
      show: false,
      left: "center",
      textStyle: {
        color: '#fff'
      }
    },
    legend: {
      textStyle: {
        color: '#fff'
      },
      selected: {},
      data: []
    },
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0]) {
          return "";
        }
        var html = "";
        for (var i = 0; i < params.length; i++) {
          if (params[i]) {
            if (params[i].name) {
              html = params[i].name + "<br/>";
              break;
            }
          }
        }
        html += params[0].seriesName + "(m³/s):" + (params[0].value == undefined ? "-" : params[0].value);
        for (var i = 1; i < params.length; i++) {
          if (params[i].seriesName.indexOf('水位') != -1) {
            html += "<br/>" + params[i].seriesName + "(m):"
          } else {
            html += "<br/>" + params[i].seriesName + "(m³/s):"
          }
          html += (params[i].data != undefined ? params[i].data : "-");
        }
        return html;
      }
    },
    xAxis: [{
      type: 'category',
      name: "时间",
      nameLocation: 'middle',
      nameGap: 35,
      nameTextStyle: {
        color: "#fff"
      },
      boundaryGap: true,
      axisLine: {
        onZero: false
      },
      data: time,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        },
        formatter: function (value, index) {
          return value.replace(' ', "\n");
        },
      },
      splitLine: {
        show: false
      }
    },

    ],
    yAxis: [{
      type: 'value',
      name: "水位(m)",
      nameLocation: 'middle',
      nameTextStyle: {
        color: "#fff"
      },
      nameGap: 42,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      max: waterY.max,
      min: waterY.min,
      interval: waterY.interval,
      splitArea: {
        show: true,
        areaStyle: {
          color: ['rgba(17,85,127,0.3)', 'rgba(121,166,191,0.3)']
        }
      }
    }, {
      type: 'value',
      name: "流量(m³/s)",
      nameLocation: 'middle',
      nameTextStyle: {
        color: "#fff"
      },
      nameGap: 30,
      axisLine: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#fff'
        }
      },
      axisLabel: {
        textStyle: {
          color: '#fff'
        }
      },
      max: flowY.max,
      min: flowY.min,
      interval: flowY.interval,
      // splitArea: {
      //     show: true,
      //     areaStyle: {
      //         color: ['rgba(17,85,127,0.3)', 'rgba(121,166,191,0.3)']
      //     }
      // }
    },],
    series: [],
    toolbox: {
      feature: {
        saveAsImage: {
          show: outFlowData.isShowToolbox || false,
          type: "jpg",
          backgroundColor: toolboxIconbackgroundColor,
          icon: toolboxIcon
        }
      },
      itemSize: toolboxIconSize,
      right: "18",
      top: "-5"
    },
    grid: {
      bottom: "50",
      right: "45",
      top: "45",
      left: "54"
    },
  };
  if (isEnlarge) {
    option.grid.top = "60";
  } else {
    option.yAxis[0].max = flowY.max;
    option.yAxis[0].min = flowY.min;
    option.yAxis[0].interval = flowY.interval;
    option.yAxis[0].name = "流量(m³/s)";
    option.yAxis[1].axisTick = {
      show: false
    }
    option.yAxis[1].name = "";
    option.yAxis[1].axisLabel = {
      show: false
    };
    option.grid = {
      bottom: "50",
      right: "10",
      top: "20",
      left: "54"
    }
  }
  for (var i = 0; i < outFlowData.data.length; i++) {
    var value = outFlowData.data[i].value;
    var name = outFlowData.data[i].nodeName;
    option.legend.data.push(name);
    var temp = {
      name: name,
      type: 'line',
      symbol: "none",
      data: value,
      markPoint: {
        symbol: 'circle',
        symbolSize: 5,
        data: [{
          type: "max",
          name: '最大值'
        }],
        label: {
          normal: {
            position: 'top'
          }
        }
      },
      markLine: {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [time[0], 0],
          }, {
            coord: [time[0], flowY.max],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted',
                opacity: 0,
              }
            },
            label: {
              normal: {
                show: false,
                position: 'end',
                formatter: time[0]
              }
            }
          }]
        ]
      },
      smooth: true
    };
    if (isEnlarge) {
      temp.yAxisIndex = 1;
    }
    option.series.push(temp);
  }
  if (isEnlarge) {
    for (var i = 0; i < waterData.data.length; i++) {
      var value = waterData.data[i].value;
      var name = waterData.data[i].nodeName;
      option.legend.data.push(name);
      var temp = {
        name: name,
        type: 'line',
        symbol: 'none',
        data: value,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
        markLine: {
          silent: true,
          symbol: 'none',
          data: [
            [{
              coord: [time[0], 0],
            }, {
              coord: [time[0], waterY.max],
              lineStyle: {
                normal: {
                  color: '#e0db1e',
                  type: 'dotted',
                  opacity: 0,
                }
              },
              label: {
                normal: {
                  show: false,
                  position: 'end',
                  formatter: time[0]
                }
              }
            }]
          ]
        },
        smooth: true
      };
      option.series.push(temp);
    }
  }
  for (var i = 4; i < option.legend.data.length; i++) {
    option.legend.selected[option.legend.data[i]] = false;
  }
  var width = $('#' + domId).width();
  var length = option.legend.data.length;
  var allWidth = 135 * length;
  var counter = Math.ceil(allWidth / width);
  var top = 30;
  if (isEnlarge) {
    top = 40;
  }
  top += 15 * (counter - 1);
  if (width < 360) {
    top += 10;
  }
  // if(type&&width>=590){
  //   top-=20;
  // }
  option.grid.top = top;
  var myChart = echarts.init(document.getElementById(domId));
  myChart.setOption(option);
  $(window).resize(function () {
    myChart.resize();
  });
  return {
    option: option,
    chart: myChart
  };
}

//创建实时过程表
function initRealTimeChart(params, win,clickType) {
  // disposeChart();
  // console.log(params)
  var title = params.title;
  var xData = params.tm;
  if (!xData) {
    return null;
  }
  var rainData = [];
  var pt = params.publishTime;
  var rainMarkLine, otherLeftMarkLine, otherRightMarkLine;
  var rainId = params.rainId;
  var otherId = params.otherId;
  var rainLegend = ["降水(mm)"];
  // var ptIndex;
  // for(var i=0;i<rainData.length;i++){
  //     var t1=moment(xData[i]).format();
  //     var t2=moment(pt).format();
  //     rd[i]={};
  //     rd[i].value=rainData[i];
  //     if(t1<t2){
  //         rd[i].itemStyle={
  //             normal:{
  //                 color:chartColor.foreRainColor
  //             }
  //         }
  //     }else{
  //         rd[i].itemStyle={
  //             normal:{
  //                 color:chartColor.foreRainColor
  //             }
  //         }
  //     }
  //     if(xData[i]==pt){
  //         ptIndex=i;
  //     }
  // }
  var otherOption = {};
  var top = "40px";
  var bottom="70px";
  var right="85px";
  var left="80px";
  var top = "40px";
  if ($('#' + rainId).width() < 800) {
    top = "50px"
  }
  ;
  if ($('#' + rainId).width() < 600) {
    top = "65px"
  }
  ;
  if ($('#' + rainId).width() < 500) {
    top = "45px";
    bottom = "70px";
    right = "20px";
    left = "25px";
  }
  ;
  if ($('#' + rainId).width() < 400) {
    top = "10px";
    bottom = "70px";
    right = "20px";
    left = "25px";
  };
  var startIndex = (xData.length - 1) - 24 * 7;
  if (startIndex < 0) {
    startIndex = 0;
  }
  var startValue = xData[startIndex];
  var endValue = xData[xData.length - 1];
  if (pt) {
    pt = pt;
    rainMarkLine = {
      silent: true,
      symbol: 'none',
      data: [
        [{
          coord: [pt, 0],
        }, {
          coord: [pt, maxRain],
          lineStyle: {
            normal: {
              color: '#e0db1e',
              type: 'dotted'
            }
          },
          label: {
            normal: {
              position: 'start',
              formatter: pt
            }
          }
        }]
      ]
    };
  }
  if (params.type === obj_type_river || params.type === obj_type_mountain_torrents) { //河道或山洪小流域
    rainData = params.drp || [];
    var water = params.z || [];
    var realFloodData = params.q || []; //实时流量
    var maxFlood, maxWater, minFlood, minWater;
    //最大流量
    maxFlood = getArrayMax(realFloodData);
    if (maxFlood < 50) {
      maxFlood = 50;
    }
    //最小流量
    minFlood = getArrayMin(realFloodData);
    maxWater = getArrayMax(water);
    minWater = getArrayMin(water);
    var floodYAxis = getDataMaxMin(maxFlood, minFlood);
    var waterYAxis = getDataMaxMin(maxWater, minWater);
    var maxLeft = floodYAxis.max;
    var minLeft = floodYAxis.min;
    if (pt) {
      otherLeftMarkLine = {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [pt, minLeft],
          }, {
            coord: [pt, maxLeft],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted'
              }
            },
            // label:{
            //     normal:{
            //         position:'end',
            //         formatter:pt
            //     }
            // }
          }]
        ]
      };
    }
    otherOption = {
      color: [chartColor.realDamBeforeColor, chartColor.realInFlowColor],
      title: $.extend(true, {}, title, {
        text: title,
        show: false
      }),
      tooltip: {
        trigger: 'axis',
        formatter: function (params) {
          var html = "";
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              if (params[i].name) {
                html = params[i].name + "<br/>";
                break;
              }
            }
          }
          if (params[0] && params[0].data != undefined) {
            html += params[0].seriesName + ":" + (params[0].data ? params[0].data : "-") + "<br/>";
          }
          if (params[1] && params[1].data != undefined) {
            html += params[1].seriesName + ":" + (params[1].data ? params[1].data : "-") + "<br/>";
          }
          if (params[2] && params[2].data != undefined) {
            html += params[2].seriesName + ":" + (params[2].data ? params[2].data : "-") + "<br/>";
          }
          return html;
        }
      },
      xAxis: $.extend(true, [], xAxis, [{
        data: xData,
        name: "时间",
        nameGap: 32
      }]),
      yAxis: $.extend(true, [], yAxis, [{
        name: "流量(m³/s)",
        min: floodYAxis.min,
        max: floodYAxis.max,
        interval: floodYAxis.interval,
        axisTick: {
          show: true
        },
        axisLabel: {
          show: true
        }
      }, {
        name: "水位(m)",
        min: waterYAxis.min,
        max: waterYAxis.max,
        interval: waterYAxis.interval,
        axisTick: {
          show: true
        },
        axisLabel: {
          show: true
        }
      }]),
      grid: $.extend({}, grid, {
        containLabel: false,
        top: '20',
        bottom: bottom,
        right: right,
        left: left
      }),
      series: [{
        name: '水位(m)',
        type: "line",
        symbol: "none",
        data: water,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
        yAxisIndex: 1,
      },
      {
        name: '流量(m³/s)',
        type: "line",
        symbol: "none",
        data: realFloodData,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
      }
      ]
    };
  }
  if (params.type === obj_type_reservoir) { //水库
    rainData = params.p || [];
    var inFlood = []; //实测入库
    var outFlood = [];
    var water = params.rz || [];
    var maxFlood, minFlood, maxWater, minWater;
    maxFlood = getArrayMax([getArrayMax(inFlood), getArrayMax(outFlood)]);
    if (maxFlood < 50) {
      maxFlood = 50;
    }
    minFlood = getArrayMin([getArrayMin(inFlood), getArrayMin(outFlood)]);
    maxWater = getArrayMax(water);
    minWater = getArrayMin(water);
    var floodYAxis = getDataMaxMin(maxFlood, minFlood);
    var waterYAxis = getDataMaxMin(maxWater, minWater);
    var maxRight = floodYAxis.max;
    var minRight = floodYAxis.min;
    var maxLeft = waterYAxis.max;
    var minLeft = waterYAxis.min;
    if (pt) {
      otherLeftMarkLine = {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [pt, minLeft],
          }, {
            coord: [pt, maxLeft],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted'
              }
            },
            // label:{
            //     normal:{
            //         position:'end',
            //         formatter:pt
            //     }
            // }
          }]
        ]
      };
    }
    otherOption = {
      color: [chartColor.realInFlowColor, chartColor.realOutFlowColor, chartColor.realDamBeforeColor],
      title: $.extend(true, {}, title, {
        text: title,
        show: false
      }),
      tooltip: {
        trigger: 'axis',
        formatter: function (params) {
          var html = "";
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              if (params[i].name) {
                html = params[i].name + "<br/>";
                break;
              }
            }
          }
          if (params[0] && params[0].data != undefined) {
            html += params[0].seriesName + ":" + (params[0].data) + "<br/>";
          }
          if (params[1] && params[1].data != undefined) {
            html += params[1].seriesName + ":" + (params[1].data) + "<br/>";
          }
          if (params[2] && params[2].data != undefined) {
            html += params[2].seriesName + ":" + params[2].data + "<br/>";
          }
          if (params[3] && params[3].data != undefined) {
            html += params[3].seriesName + ":" + params[3].data;
          }
          return html;
        }
      },
      xAxis: $.extend(true, [], xAxis, [{
        data: xData,
        name: "时间",
        nameGap: 32
      }]),
      yAxis: $.extend(true, [], yAxis, [{
        name: "流量(m³/s)",
        min: floodYAxis.min,
        max: floodYAxis.max,
        interval: floodYAxis.interval
      }, {
        name: "水位(m)",
        min: waterYAxis.min,
        max: waterYAxis.max,
        interval: waterYAxis.interval,
        axisTick: {
          show: true
        },
        axisLabel: {
          show: true
        }
      }]),
      grid: $.extend({}, grid, {
        containLabel: false,
        top: "20",
        bottom: '85',
        right: "60",
        left: "80"
      }),
      series: [{
        name: '入库流量(m³/s)',
        type: "line",
        symbol: "none",
        data: inFlood,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
      },
      {
        name: '出库流量(m³/s)',
        type: "line",
        symbol: "none",
        data: outFlood,
        smooth: true,
        markLine: otherLeftMarkLine,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
      }, {
        name: '水位(m)',
        type: "line",
        symbol: "none",
        data: water,
        markLine: otherLeftMarkLine,
        smooth: true,
        yAxisIndex: 1,
        markPoint: {
          symbol: 'circle',
          symbolSize: 5,
          data: [{
            type: "max",
            name: '最大值'
          }],
          label: {
            normal: {
              position: 'top'
            }
          }
        },
      }
      ]
    };
  }
  if (params.type === obj_type_waterlogged || params.type === obj_type_rain_station|| params.type === obj_type_weather_station) {
    rainData = params.drp || [];
    var depth = params.depth || []; //水深
    if (depth.length == 0) {
      for (var i = 0; i < xData.length; i++) {
        depth[i] = "-";
      }
    }
    var maxDepth = getArrayMax(depth),
      minDepth = getArrayMin(depth);
    var depthYAxis = getDataMaxMin(maxDepth, minDepth);
    var maxLeft = depthYAxis.max;
    var minLeft = depthYAxis.min;
    if (pt) {
      otherLeftMarkLine = {
        silent: true,
        symbol: 'none',
        data: [
          [{
            coord: [pt, minLeft],
          }, {
            coord: [pt, maxLeft],
            lineStyle: {
              normal: {
                color: '#e0db1e',
                type: 'dotted'
              }
            },
            // label:{
            //     normal:{
            //         position:'end',
            //         formatter:pt
            //     }
            // }
          }]
        ]
      };
    }
    if (params.type === obj_type_waterlogged) {
      otherOption = {
        color: [chartColor.realInFlowColor],
        title: $.extend(true, {}, title, {
          text: title,
          show: false
        }),
        tooltip: {
          trigger: 'axis',
          formatter: function (params) {
            var html = "";
            for (var i = 0; i < params.length; i++) {
              if (params[i]) {
                if (params[i].name) {
                  html = params[i].name + "<br/>";
                  break;
                }
              }
            }
            if (params[0] && params[0].data != undefined) {
              html += params[0].seriesName + ":" + (params[0].data ? params[0].data : "-") + "<br/>";
            }
            if (params[1] && params[1].data != undefined) {
              html += params[1].seriesName + ":" + (params[1].data ? params[1].data : "-");
            }
            return html;
          }
        },
        xAxis: $.extend(true, [], xAxis, [{
          data: xData,
          name: "时间",
          nameGap: 32
        }]),
        yAxis: $.extend(true, [], yAxis, [{
          name: "水深(m)",
          min: depthYAxis.min,
          max: depthYAxis.max,
          interval: depthYAxis.interval
        }]),
        grid: $.extend({}, grid, {
          containLabel: false,
          top: "20",
          bottom: '85',
          right: "60",
          left: "80"
        }),
        series: [{
          name: '水深(m)',
          type: "line",
          symbol: "none",
          data: depth,
          markLine: otherLeftMarkLine,
          smooth: true,
          yAxisIndex: 1,
          markPoint: {
            symbol: 'circle',
            symbolSize: 5,
            data: [{
              type: "max",
              name: '最大值'
            }],
            label: {
              normal: {
                position: 'top'
              }
            }
          },
        }]
      };
    }
  }
  rainData = formatArrayData(rainData);
  var maxRain = getArrayMax(rainData);
  var rainY = getDataMaxMin(maxRain, 0);
  var rainOption = {
    color: [chartColor.foreRainColor],
    title: $.extend(true, {}, title, {
      text: title,
      show: false
    }),
    legend: $.extend(true, {}, legend, {
      data: rainLegend,
      show: true
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        if (!params[0]) {
          return "-";
        }
        var html = "";
        html += params[0].name + "<br/>" + params[0].seriesName + ":" + (params[0].value == undefined ? "-" : params[0].value)
        return html;
      }
    },
    xAxis: $.extend(true, [], xAxis, [{
      data: xData,
      show: false
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "降水量(mm)",
      scale: true,
      max: rainY.max,
      interval: rainY.interval,
      inverse: true,
      min: 0
    }]),
    grid: $.extend({}, grid, {
      containLabel: false,
      bottom: "10",
      right: right,
      left: left,
      top: top
    }),
    series: [{
      name: '降水(mm)',
      type: "bar",
      data: rainData,
      barWidth: 5,
      markPoint: {
        symbol: 'circle',
        symbolSize: 5,
        data: [{
          type: "max",
          name: '最大值'
        }],
        label: {
          normal: {
            position: 'bottom'
          }
        }
      },
      markLine: rainMarkLine
    },]
  };
  if (params.type === obj_type_rain_station) {
    rainOption.xAxis = $.extend(true, [], xAxis, [{
      data: xData,
      name: "时间",
      nameGap: 32,
      show: true
    }]);
    rainOption.grid = {
      bottom: 85,
      left: 60,
      right: 60,
      top: 30
    };
  }
  var rainChart = echarts.init(document.getElementById(rainId));
  var ld = [];
  if (params.type === obj_type_waterlogged) {
    if (depth.length != 0) {
      ld.push("水深(m)");
      rainOption.series.push({
        name: "水深(m)",
        type: 'line',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[0]
          }
        }
      });
    }
  }
  if (params.type === obj_type_river || params.type === obj_type_mountain_torrents) {
    if (params.z.length != 0) {
      ld.push("水位(m)");
      rainOption.series.push({
        name: "水位(m)",
        type: 'line',
        symbol: "none",
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[0]
          }
        }
      });
    }
    if (params.q.length != 0) {
      ld.push("流量(m³/s)")
      rainOption.series.push({
        name: "流量(m³/s)",
        type: 'line',
        data: null,
        symbol: "none",
        itemStyle: {
          normal: {
            color: otherOption.color[1]
          }
        }
      })
    }
    ;
  }
  if (params.type === obj_type_reservoir) {
    if (inFlood.length != 0) {
      ld.push("入库流量(m³/s)");
      rainOption.series.push({
        name: "入库流量(m³/s)",
        type: 'line',
        symbol: "none",
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[0]
          }
        }
      })
    }
    if (outFlood.length != 0) {
      ld.push("出库流量(m³/s)");
      rainOption.series.push({
        name: "出库流量(m³/s)",
        type: 'line',
        symbol: "none",
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[1]
          }
        }
      })
    }
    if (water.length != 0) {
      ld.push("水位(m)");
      rainOption.series.push({
        name: "水位(m)",
        symbol: "none",
        type: 'line',
        data: null,
        itemStyle: {
          normal: {
            color: otherOption.color[2]
          }
        }
      })
    }
  }
  rainOption.legend.data = rainOption.legend.data.concat(ld);
  rainOption.dataZoom = [{
    type: 'slider',
    show: false,
    handleSize: 8,
    fillerColor: 'rgba(70,130,180,0.5)',
    backgroundColor: ['rgba(47,69,84,1)']
  },
  {
    show: false,
    handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
    handleSize: '80%',
    textStyle: {
      color: '#fff'
    },
    realtime: false,
    handleStyle: {
      color: '#fff',
      shadowBlur: 3,
      shadowColor: 'rgba(0, 0, 0, 0.6)',
      shadowOffsetX: 2,
      shadowOffsetY: 2
    },
    labelFormatter: function (value) {
      var data = (xData[value]);
      if (data) {
        return data.replace(' ', '\n')
      }

    }
  }

  ];
  if (startValue && endValue) {
    rainOption.dataZoom[0].startValue = startValue;
    rainOption.dataZoom[0].endValue = endValue;
  } else {
    rainOption.dataZoom[0].start = 80;
    rainOption.dataZoom[0].end = 100;
  }
  rainOption.xAxis[0].data = (rainOption.xAxis[0].data).map(function (item) {
    return item;
  })
  if (params.type === obj_type_rain_station) {
    rainOption.dataZoom[1].show = true;
  }
  rainChart.setOption(rainOption);
  if ($.inArray(rainChart, chartArray) == -1) {
    chartArray.push(rainChart);
  }
  if(clickType==="maxRightClick"){
    if ($.inArray(rainChart, rightMaxChartArray) == -1) {
      rightMaxChartArray.push(rainChart);
    }
  }
  if (params.table) {
    params.table.height = params.tableHeight;
    createChartTable(params.table, win);
  }
  if (otherId) {
    otherOption.legend = $.extend(true, {}, legend, {
      data: ld
    }),
      otherOption.dataZoom = [{
        type: 'slider',
        show: false,
        handleSize: 8,
        fillerColor: 'rgba(70,130,180,0.5)',
        backgroundColor: ['rgba(47,69,84,1)']
      },
      {
        show: true,
        handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
        // handleSize: '80%',
        height: 10,
        textStyle: {
          color: '#fff'
        },
        realtime: false,
        handleStyle: {
          color: '#fff',
          shadowBlur: 3,
          shadowColor: 'rgba(0, 0, 0, 0.6)',
          shadowOffsetX: 2,
          shadowOffsetY: 2
        },
        labelFormatter: function (value) {
          var data = (xData[value]);
          if (data) {
            return data.replace(' ', '\n')
          }

        }
      }

      ];
    if (startValue && endValue) {
      otherOption.dataZoom[0].startValue = startValue;
      otherOption.dataZoom[0].endValue = endValue;
    } else {
      otherOption.dataZoom[0].start = 80;
      otherOption.dataZoom[0].end = 100;
    }
    otherOption.xAxis[0].data = (otherOption.xAxis[0].data).map(function (item) {
      return item;
    })
    var otherChart = echarts.init(document.getElementById(otherId));
    if ($.inArray(otherChart, chartArray) == -1) {
      chartArray.push(otherChart);
    }
    if(clickType==="maxRightClick"){
      if ($.inArray(otherChart, rightMaxChartArray) == -1) {
        rightMaxChartArray.push(otherChart);
      }
    }
    otherChart.setOption(otherOption);
    echarts.connect([rainChart, otherChart]);
    return [rainChart, otherChart]
  } else {
    return [rainChart];
  }

}

//土壤墒情站实时数据
function initRealTimeSoilMoisture(params, win,clickType) {
  var otherId = params.otherId;
  var title = params.title;
  var xData = params.tm;
  var water10 = params.slm10 || [];
  var water20 = params.slm20 || [];
  var water40 = params.slm40 || [];
  var maxFlood, minFlood;
  maxFlood = getArrayMax([getArrayMax(water10), getArrayMax(water20), getArrayMax(water40)]);
  minFlood = getArrayMin([getArrayMin(water10), getArrayMin(water20), getArrayMax(water40)]);
  var rainLegend = [];
  var ld = [];
  var floodYAxis = getDataMaxMin(maxFlood, minFlood);
  var otherOption = {
    color: [chartColor.realDamBeforeColor, chartColor.realInFlowColor],
    legend: $.extend(true, {}, legend, {
      data: rainLegend,
      show: true
    }),
    title: $.extend(true, {}, title, {
      text: title,
      show: false
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        var html = "";
        for (var i = 0; i < params.length; i++) {
          if (params[i]) {
            if (params[i].name) {
              html = params[i].name + "<br/>";
              break;
            }
          }
        }
        if (params[0] && params[0].data != undefined) {
          html += params[0].seriesName + ":" + (params[0].data ? params[0].data : "-") + "<br/>";
        }
        if (params[1] && params[1].data != undefined) {
          html += params[1].seriesName + ":" + (params[1].data ? params[1].data : "-") + "<br/>";
        }
        if (params[2] && params[2].data != undefined) {
          html += params[2].seriesName + ":" + (params[2].data ? params[2].data : "-") + "<br/>";
        }
        return html;
      }
    },
    xAxis: $.extend(true, [], xAxis, [{
      data: xData,
      name: "时间",
      nameGap: 32
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "含水量(mm)",
      min: floodYAxis.min,
      max: floodYAxis.max,
      interval: floodYAxis.interval,
      axisTick: {
        show: true
      },
      axisLabel: {
        show: true
      }
    }]),
    grid: $.extend({}, grid, {
      containLabel: false,
      top: '20',
      bottom: '85',
      right: "65",
      left: "80"
    }),
    series: []
  };
  if (params.exkey.length != 0) {
    ld.push("垂线平均含水量(mm)");
    otherOption.series.push({
      name: "垂线平均含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.vtavslm.length != 0) {
    ld.push("表层含水量(mm)");
    otherOption.series.push({
      name: "表层含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.srlslm.length != 0) {
    ld.push("深度含水量(mm)");
    otherOption.series.push({
      name: "深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm10.length != 0) {
    ld.push("10cm深度含水量(mm)");
    otherOption.series.push({
      name: "10cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: params.slm10,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm20.length != 0) {
    ld.push("20cm深度含水量(mm)");
    otherOption.series.push({
      name: "20cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: params.slm20,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm30.length != 0) {
    ld.push("30cm深度含水量(mm)");
    otherOption.series.push({
      name: "30cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm40.length != 0) {
    ld.push("40cm深度含水量(mm)");
    otherOption.series.push({
      name: "40cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: params.slm40,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm50.length != 0) {
    ld.push("50cm深度含水量(mm)");
    otherOption.series.push({
      name: "50cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm60.length != 0) {
    ld.push("60cm深度含水量(mm)");
    otherOption.series.push({
      name: "60cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm70.length != 0) {
    ld.push("70cm深度含水量(mm)");
    otherOption.series.push({
      name: "70cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm80.length != 0) {
    ld.push("80cm深度含水量(mm)");
    otherOption.series.push({
      name: "80cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm90.length != 0) {
    ld.push("90cm深度含水量(mm)");
    otherOption.series.push({
      name: "90cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm100.length != 0) {
    ld.push("100cm深度含水量(mm)");
    otherOption.series.push({
      name: "100cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  if (params.slm110.length != 0) {
    ld.push("110cm深度含水量(mm)");
    otherOption.series.push({
      name: "110cm深度含水量(mm)",
      type: 'line',
      symbol: "none",
      data: null,
      itemStyle: {
        normal: {
          color: otherOption.color[0]
        }
      }
    })
  }
  otherOption.legend.data = otherOption.legend.data.concat(ld);

  var otherChart = echarts.init(document.getElementById(otherId));
  otherChart.setOption(otherOption);
  if ($.inArray(otherChart, chartArray) == -1) {
    chartArray.push(otherChart);
  }
  if(clickType==="maxRightClick"){
    if ($.inArray(otherChart, rightMaxChartArray) == -1) {
      rightMaxChartArray.push(otherChart);
    }
  }
  if (params.table) {
    params.table.height = params.tableHeight;
    createChartTable(params.table, win);
  }
}

//创建统计图表
function createStatisticsChart(params) {
  var rainId = params.rainId;
  var otherId = params.otherId;
  if (rainId) {
    if (!otherId) {
      $('#' + rainId).css('width', "100%").css('height', "100%");
      $('#' + otherId).hide();
    } else {
      $('#' + rainId).css('width', "100%").css('height', "50%");
      $('#' + otherId).css('width', "100%").css('height', "50%");
    }
  } else {
    $('#' + rainId).hide();
    $('#' + otherId).css('width', "100%").css('height', "100%");
  }
  var type = params.type;
  var xData = params.time;
  var option = {};
  var chartArray = new Array();
  if (type == obj_type_reservoir) { //水库
    var z = params.z || [];
    var w = params.w || [];
    var maxW = getArrayMax(w);
    var minW = getArrayMin(w);
    var maxZ = getArrayMax(z);
    var minZ = getArrayMin(z);
    var leftY = getDataMaxMin(maxZ, minZ);
    var rightY = getDataMaxMin(maxW, minW);
    option = {
      color: [chartColor.realDamBeforeColor, chartColor.realInFlowColor],
      legend: $.extend(true, {}, legend, {
        data: ["水位(m)", "库容(万m³)"]
      }),
      tooltip: {
        trigger: 'axis',
        formatter: function (params) {
          var html = "";
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              if (params[i].name && params[i].name != "") {
                html = params[i].name + "<br/>";
                break;
              }
            }
          }
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              html += params[i].seriesName + ":" + (params[i].data == undefined ? "-" : params[i].data) + "<br/>";
            }
          }
          return html;
        }
      },
      xAxis: $.extend(true, [], xAxis, [{
        data: xData,
        name: "时间",
        nameGap: 30
      }]),
      yAxis: $.extend(true, [], yAxis, [{
        name: "水位(m)",
        min: leftY.min,
        max: leftY.max,
        interval: leftY.interval
      }, {
        name: "库容(万m³)",
        min: rightY.min,
        max: rightY.max,
        interval: rightY.interval,
        nameGap: 45,
        axisTick: {
          show: true
        },
        axisLabel: {
          show: true
        }
      }]),
      grid: $.extend({}, grid, {
        containLabel: false,
        top: "15",
        bottom: '100',
        right: "60",
        left: "60"
      }),
      series: [{
        name: '水位(m)',
        type: "line",
        data: z,
        smooth: true,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'top'
                }
              }
            }
          }]
        },
      },
      {
        name: '库容(万m³)',
        type: "line",
        data: w,
        yAxisIndex: 1,
        smooth: true,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'top'
                }
              }
            }
          }]
        }
      }
      ],
      // toolbox: {
      //     feature: {
      //         saveAsImage: {
      //             type:"jpg",
      //             backgroundColor:toolboxIconbackgroundColor,
      //             icon:toolboxIcon
      //         }
      //     },
      //     iconStyle:{
      //         normal:{
      //             color:'#fff',//设置颜色
      //         }
      //     },
      //     itemSize:toolboxIconSize,
      //     right:"18"
      // },

    };
  }
  if (type == obj_type_river_section) { //河道
    var q = params.q || [];
    var z = params.z || [];
    var maxQ = getArrayMax(q);
    var minQ = getArrayMin(q);
    var maxZ = getArrayMax(z);
    var minZ = getArrayMin(z);
    var leftY = getDataMaxMin(maxZ, minZ);
    var rightY = getDataMaxMin(maxQ, minQ);
    option = {
      color: [chartColor.realDamBeforeColor, chartColor.realInFlowColor],
      title: $.extend(true, {}, title, {
        text: params.title,
        show: true
      }),
      legend: $.extend(true, {}, legend, {
        data: ["流量(m³/s)", "水位(m)"],
        show: true,
        top: 18
      }),
      tooltip: {
        trigger: 'axis',
        formatter: function (params) {
          var html = "";
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              if (params[i].name && params[i].name != "") {
                html = params[i].name + "<br/>";
                break;
              }
            }
          }
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              html += params[i].seriesName + ":" + (params[i].data == undefined ? "-" : params[i].data) + "<br/>";
            }
          }
          return html;
        }
      },
      xAxis: $.extend(true, [], xAxis, [{
        data: xData,
        name: "时间",
        nameGap: 32,
        show: true
      }]),
      yAxis: $.extend(true, [], yAxis, [{
        name: "流量(m³/s)",
        min: rightY.min,
        max: rightY.max,
        interval: rightY.interval,
        nameGap: 30
      }, {
        name: "水位(m)",
        min: leftY.min,
        max: leftY.max,
        interval: leftY.interval,
        axisTick: {
          show: true
        },
        axisLabel: {
          show: true
        }
      }]),
      grid: $.extend({}, grid, {
        containLabel: false,
        top: "50",
        bottom: '100',
        right: "60",
        left: "60"
      }),
      series: [{
        name: '流量(m³/s)',
        type: "line",
        data: q,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'top'
                }
              }
            }
          }]
        },
        smooth: true
      },
      {
        name: '水位(m)',
        type: "line",
        data: z,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'top'
                }
              }
            }
          }]
        },
        smooth: true,
        yAxisIndex: 1,
      },
      ],
      toolbox: {
        feature: {
          saveAsImage: {
            type: "jpg",
            backgroundColor: toolboxIconbackgroundColor,
            icon: toolboxIcon
          }
        },
        iconStyle: {
          normal: {
            color: '#fff', //设置颜色
          }
        },
        itemSize: toolboxIconSize,
        right: "18"
      },
    };
  }
  if (type == obj_type_waterlogged) { //易涝点
    var z = params.z || [];
    var maxZ = getArrayMax(z);
    var minZ = getArrayMin(z);
    var leftY = getDataMaxMin(maxZ, minZ);
    option = {
      color: [chartColor.realDamBeforeColor],
      title: $.extend(true, {}, title, {
        text: params.title
      }),
      legend: {
        show: false,
        data: ["水深(m)"]
      },
      tooltip: {
        trigger: 'axis',
        formatter: function (params) {
          var html = "";
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              if (params[i].name && params[i].name != "") {
                html = params[i].name + "<br/>";
                break;
              }
            }
          }
          for (var i = 0; i < params.length; i++) {
            if (params[i]) {
              html += params[i].seriesName + ":" + (params[i].data == undefined ? "-" : params[i].data) + "<br/>";
            }
          }
          return html;
        }
      },
      xAxis: $.extend(true, [], xAxis, [{
        data: xData,
        name: "时间",
        nameGap: 32
      }]),
      yAxis: $.extend(true, [], yAxis, [{
        name: "水深(m)",
        min: leftY.min,
        max: leftY.max,
        interval: leftY.interval
      }]),
      grid: $.extend({}, grid, {
        containLabel: false,
        top: "15",
        bottom: '100',
        right: "60",
        left: "60",
        z: 3
      }),
      series: [{
        name: '水深(m)',
        type: "line",
        data: z,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'top'
                }
              }
            }
          }]
        },
      }],
      toolbox: {
        feature: {
          saveAsImage: {
            type: "jpg",
            backgroundColor: toolboxIconbackgroundColor,
            icon: toolboxIcon
          }
        },
        iconStyle: {
          normal: {
            color: '#fff', //设置颜色
          }
        },
        itemSize: toolboxIconSize,
        right: "18"
      },
    };
  }
  if (type == obj_type_mountain_torrents) { //山洪小流域

  }
  option.dataZoom = [{
    type: 'slider',
    show: false,
    handleSize: 8,
    fillerColor: 'rgba(70,130,180,0.5)',
    backgroundColor: ['rgba(47,69,84,1)'],
    start: 80,
    end: 100
  },
  {
    show: true,
    handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
    handleSize: '80%',
    textStyle: {
      color: '#fff'
    },
    realtime: false,
    handleStyle: {
      color: '#fff',
      shadowBlur: 3,
      shadowColor: 'rgba(0, 0, 0, 0.6)',
      shadowOffsetX: 2,
      shadowOffsetY: 2
    },
    labelFormatter: function (value) {
      var data = xData[value];
      if (data) {
        return data.replace(' ', '\n')
      }

    }
  }

  ];
  if (rainId) {
    var rainData = params.drp || [];
    var maxRain = getArrayMax(rainData);
    var rainLegend = ["降水(mm)"],
      rainColor = [chartColor.foreRainColor];
    if (otherId) {
      for (var i = 0; i < option.series.length; i++) {
        rainLegend.push(option.series[i].name);
        rainColor.push(option.color[i]);
      }
    }
    if (maxRain < 15) {
      maxRain = 15;
    } else {
      maxRain = Math.ceil(maxRain / 5) * 5;
    }
    var rainOption = {
      color: rainColor,
      title: $.extend(true, {}, title, {
        text: params.title,
        show: true
      }),
      legend: $.extend(true, {}, legend, {
        data: rainLegend,
        show: true,
        top: 18
      }),
      tooltip: {
        trigger: 'axis',
        formatter: function (params) {
          if (!params[0] || params[0].data == undefined) {
            return "";
          }
          var html = "";
          html += params[0].name + "<br/>" + params[0].seriesName + ":" + (params[0].value == undefined ? "-" : params[0].value)
          return html;
        }
      },
      xAxis: $.extend(true, [], xAxis, [{
        data: xData
      }]),
      yAxis: $.extend(true, [], yAxis, [{
        name: "降水量(mm)",
        scale: true,
        max: maxRain,
        inverse: true,
        min: 0,
        splitNumber: 5
      }]),
      grid: $.extend({}, grid, {
        containLabel: false,
        bottom: "5",
        right: "60",
        left: "60",
        top: "45"
      }),
      series: [{
        name: '降水(mm)',
        type: "bar",
        data: rainData,
        barWidth: 5,
        markPoint: {
          data: [{
            type: 'max',
            symbol: 'circle',
            symbolSize: 5,
            itemStyle: {
              normal: {
                label: {
                  show: true,
                  position: 'bottom'
                }
              }
            }
          }]
        },
      },],
      toolbox: {
        feature: {
          saveAsImage: {
            type: "jpg",
            backgroundColor: toolboxIconbackgroundColor,
            icon: toolboxIcon
          }
        },
        iconStyle: {
          normal: {
            color: '#fff', //设置颜色
          }
        },
        itemSize: toolboxIconSize,
        right: "18"
      },
    };
    if (otherId) {
      rainOption.xAxis[0].show = false;
      for (var i = 0; i < option.series.length; i++) {
        rainOption.series.push({
          name: option.series[i].name,
          data: null,
          type: 'line'
        });
      }
    } else {
      rainOption.yAxis[0].nameGap = 25;
      rainOption.grid.left = 80;
      rainOption.grid.right = 40;
      rainOption.grid.bottom = 50;
      rainOption.xAxis[0].name = "时间";
    }
    rainOption.dataZoom = [{
      type: 'slider',
      show: false,
      handleSize: 8,
      fillerColor: 'rgba(70,130,180,0.5)',
      backgroundColor: ['rgba(47,69,84,1)'],
      start: 80,
      end: 100
    },
    {
      show: false,
      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
      handleSize: '80%',
      textStyle: {
        color: '#fff'
      },
      realtime: false,
      handleStyle: {
        color: '#fff',
        shadowBlur: 3,
        shadowColor: 'rgba(0, 0, 0, 0.6)',
        shadowOffsetX: 2,
        shadowOffsetY: 2
      },
      labelFormatter: function (value) {
        var data = xData[value];
        if (data) {
          return data.replace(' ', '\n')
        }

      }
    }

    ];
    if (type == obj_type_mountain_torrents) { //山洪小流域
      rainOption.dataZoom[1].show = true;
      rainOption.grid.bottom = '100';
    }
    var rainChart = echarts.init(document.getElementById(rainId));
    rainChart.setOption(rainOption);
    chartArray.push(rainChart);
  }

  if (otherId) {
    var otherChart = echarts.init(document.getElementById(otherId));
    otherChart.setOption(option);
    chartArray.push(otherChart);
  }
  if (rainId && otherId) {
    echarts.connect([rainChart, otherChart])
  }
  return chartArray;
}

//泄洪设施实时过程图
var createGateStationProChart = function (params) {
  var xData = params.xData || [];
  var gateList = params.gateList || [];
  var outFlow = params.outFlow || [];
  var legendData = ["总出流量"];
  var maxFlowArray = [getArrayMax(outFlow)],
    minFlowArray = [getArrayMin(outFlow)],
    maxOpenHeightArray = new Array(),
    minOpenHeightArray = new Array();
  for (var i = 0; i < gateList.length; i++) {
    maxFlowArray.push(getArrayMax(gateList[i].gtq));
    minFlowArray.push(getArrayMin(gateList[i].gtq));
    maxOpenHeightArray.push(getArrayMax(gateList[i].gtophgt));
    minOpenHeightArray.push(getArrayMin(gateList[i].gtophgt));
  }
  var flowYAxis = getDataMaxMin(getArrayMax(maxFlowArray), getArrayMin(minFlowArray)),
    openHeightYAxis = getDataMaxMin(getArrayMax(maxOpenHeightArray), getArrayMin(minOpenHeightArray));
  var option = {
    color: [chartColor.foreOutFlowColor],
    title: $.extend(true, {}, title, {
      text: params.title || '',
      show: params.isShowTitle || false
    }),
    legend: $.extend(true, {}, legend, {
      data: legendData,
      show: true,
      top: 20
    }),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        var html = "";
        if (params[0]) {
          html += params[0].name + "<br/>" + params[0].seriesName + "(m³/s):" + (params[0].data != undefined ? params[0].data : "-");
        }
        for (var i = 1; i < params.length; i++) {
          html += "<br/>" + params[i].seriesName;
          if (params[i].seriesName.indexOf('出流') != -1) {
            html += "(m³/s):";
          }
          if (params[i].seriesName.indexOf('开度') != -1) {
            html += "(m):";
          }
          html += (params[i].data != undefined ? params[i].data : "-")
        }
        return html;
      }
    },
    xAxis: $.extend(true, [], xAxis, [{
      data: xData,
      name: "时间",
      nameGap: 35,
      axisLabel: {
        formatter: function (value, index) {
          return value.replace(' ', "\n");
        },
      }
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "流量(m³/s)",
      max: flowYAxis.max,
      min: flowYAxis.min,
      interval: flowYAxis.interval
    }, {
      name: "开度(m)",
      max: openHeightYAxis.max,
      min: openHeightYAxis.min,
      interval: openHeightYAxis.interval,
      axisTick: {
        show: true
      },
      axisLabel: {
        show: true
      }
    }]),
    grid: $.extend({}, grid, {
      right: "60",
      bottom: 80
    }),
    series: [{
      name: legendData[0],
      type: "line",
      data: outFlow,
      symbol: "none",
      smooth: true,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'top'
              }
            }
          }
        }]
      },
    }]
  };
  for (var i = 0; i < gateList.length; i++) {
    var name = gateList[i].stnm + "出流";
    option.legend.data.push(name);
    option.series.push({
      name: name,
      type: 'line',
      symbol: "none",
      data: gateList[i].gtq,
      smooth: true,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'top'
              }
            }
          }
        }]
      }
    });

    var name = gateList[i].stnm + "开度";
    option.legend.data.push(name);
    option.series.push({
      name: name,
      type: 'line',
      symbol: "none",
      data: gateList[i].gtophgt,
      smooth: true,
      markPoint: {
        data: [{
          type: 'max',
          symbol: 'circle',
          symbolSize: 5,
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'top'
              }
            }
          }
        }]
      }
    })
  }
  // for(var i=0;i<gateList.length;i++){
  //     var name=gateList[i].stnm+"开度";
  //     option.legend.data.push(name);
  //     option.series.push({
  //         name:name,
  //         type:'line',
  //         data:gateList[i].gtophgt,
  //         smooth:true,
  //         markPoint: {
  //             data: [
  //                 {
  //                     type: 'max',
  //                     symbol: 'circle',
  //                     symbolSize: 5,
  //                     itemStyle: {
  //                         normal: {
  //                             label: {show: true, position: 'top'}
  //                         }
  //                     }
  //                 }
  //             ]
  //         }
  //     })
  // }
  option.color = (option.color).concat(CHART_COLOR);
  var chart = echarts.init(document.getElementById(params.id));
  chart.setOption(option);
  return chart;
}

/**
 * 按预见期分
 * @param fTime
 * @param oneTime
 * @param twoTime
 * @param threeTime
 * @param nameOne
 * @param nameTwo
 * @param nameThree
 * @returns {{silent: boolean, data: *[]}}
 */
function getMarkArea(fTime, oneTime, twoTime, threeTime, nameOne, nameTwo, nameThree) {
  return {
    silent: true,
    symbol: 'none',
    data: [
      [{
        name: nameOne,
        itemStyle: {
          normal: {
            color: 'rgba(34, 177, 76, 0.3)'
          }
        },
        xAxis: fTime
      }, {
        xAxis: oneTime
      }],
      [{
        name: nameTwo,
        itemStyle: {
          normal: {
            color: 'rgba(255, 242, 0, 0.3)'
          }
        },
        xAxis: oneTime
      }, {
        xAxis: twoTime
      }],
      [{
        name: nameThree,
        itemStyle: {
          normal: {
            color: 'rgba(255, 127, 39, 0.3)'
          }
        },
        xAxis: twoTime
      }, {
        xAxis: threeTime
      }]
    ]
  }
}