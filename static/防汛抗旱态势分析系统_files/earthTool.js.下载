/**
 * Created by Administrator on 2016/12/8.
 */
// var map;// 地图对象
// var view;// 地图视图对象
$(function () {
    // // 测距
    // distance();
    // // 加载导向图
    // zoom();
    // direction();
});
// 监听点击事件
var listenerClick = function () {
    map.addEventListener("click", function (e) {
        // 获取经纬度
        var longitude = e.coordinate[0];
        var latitude = e.coordinate[1];
        viewer.camera.flyTo({
            destination: Cesium.Cartesian3.fromDegrees(longitude, latitude, 500000.0)
        })
    });
}

// 监听拖曳事件
var listenerDrag = function () {
    map.addEventListener("pointerdrag", function (e) {
        // 禁用拖曳
        return false;
    });
}

// 设置地图视图(控制地图显示的中心位置，范围，层级等)
var setView = function () {
    var view = new ol.View({
        // 视图边界
        extent: [103.575904846191, 24.6060485839844, 109.578880310059, 29.241174697876],
        // 设置贵阳市为地图中心
        center: [106.95, 26.95],
        projection: 'EPSG:4326',
        // 缩放级别
        zoom: 6.43,
        minZoom: 6.43,
        maxZoom: 6.43,
    });
    map.setView(view);
}

//飞到贵阳市视图界面
var flyToGys = function () {
    flyTo(106.70, 26.85, 250000.0);
     setTimeout(function () {
         getCurrentArea(gysPosition,106.70, 26.85, 250000.0)
     },1000);

}
var flyToDestination = function (destination) {
    viewer.camera.flyTo({
        destination: destination
    })
}
// 地图调到指定经纬度点
var flyTo = function (lgtd, lttd, attd) {
    if(!attd)
        attd = 80000.0;
    viewer.camera.flyTo({
        destination: Cesium.Cartesian3.fromDegrees(lgtd, lttd, attd),
        complete : function(){
            //flyTo1(106.455981, 26.188194, 20000)
            //flyTo1(106.739402, 25.896719, 20000)
        }
    })
}
//=====================================================================================================================begin...
var flyTo1 = function(lgtd, lttd, attd){
    if(!attd)
        attd = 80000.0;
    var result = 1;
    viewer.camera.flyTo({
        destination: Cesium.Cartesian3.fromDegrees(lgtd, lttd, attd),
        //destination: Cesium.Cartesian3.fromDegreesArray([
        //    106.739402, 25.896719,
        //    106.725043, 26.786897,
        //    107.114751, 27.382108
        //]),
        orientation : {
            heading : Cesium.Math.toRadians( 0 ), //方向
            pitch : Cesium.Math.toRadians( -25 ),   //倾斜角度
            roll : Cesium.Math.toRadians( 0 )
        },
        duration : 8,
        complete : function(){
            //flyTo1(106.739402 + 0.02, 25.896719 + 0.08, 20000)
            lgtd = 106.739402;
            lttd = 25.896719;
            //flyTo2(lgtd, lttd, 20000);

            //setInterval(function(){
            //    lgtd = lgtd + 0.02;
            //    lttd = lttd + 0.08;
            //    flyTo2(lgtd, lttd, 20000)
            //}, 1000);
        }
    })
}

var flyTo2 = function(lgtd, lttd, attd, time){
    if(!attd)
        attd = 80000.0;
    viewer.camera.flyTo({
        destination: Cesium.Cartesian3.fromDegrees(lgtd, lttd, attd),
        orientation : {
            heading : Cesium.Math.toRadians( 0 ),
            pitch : Cesium.Math.toRadians( -25 ),
            roll : Cesium.Math.toRadians( 0 )
        },
        //duration : 8,
        complete : function(){
                //lgtd = lgtd + 0.01;
                //lttd = lttd + 0.02;
                //flyTo2(lgtd, lttd, 20000)
        }
    })
}

//=====================================================================================================================end.

// 地球放大缩小
var zoom = function () {
    $("#zoomIn").click(function () {
        // 放大
        viewer.camera.zoomIn();
    })
    $("#zoomOut").click(function () {
        // 缩小s
        viewer.camera.zoomOut();
        //viewer.camera.flyHome();
    })
}
// 镜头方向
var direction = function () {
    $("#direction").click(function () {
        var x = viewer.canvas.clientWidth / 2;
        var y = viewer.canvas.clientHeight / 2;
        var height = Math.ceil(viewer.camera.positionCartographic.height);
        var longitude;
        var latitude;
        var cartesian = viewer.camera.pickEllipsoid({x: x, y: y}, scene.globe.ellipsoid);
        if (cartesian) {
            var cartographic = Cesium.Cartographic.fromCartesian(cartesian);
            longitude = Cesium.Math.toDegrees(cartographic.longitude);
            latitude = Cesium.Math.toDegrees(cartographic.latitude);
            viewer.camera.flyTo({
                destination : Cesium.Cartesian3.fromDegrees(longitude, latitude,height),

            });
        } else {
        }

    })

}

// 根据两点经纬度计算距离
var EARTH_RADIUS = 6378.137;
var getDistance = function (lat1, lng1, lat2, lng2) {
    var radLat1 = rad(lat1);
    var radLat2 = rad(lat2);
    var a = radLat1 - radLat2;
    var b = rad(lng1) - rad(lng2);
    var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));
    s = s * EARTH_RADIUS;
    s = Math.round(s * 10000) / 10000;
    distanceLabel.push({latitude:(lat1+lat2)/2,longitude:(lng1+lng2)/2,distance:s+"km"})
    return s;

}

var rad = function (d) {
    return d * Math.PI / 180.0;
}

// 测距
var distance;
var distanceLabels;
var distance = function () {
    distanceLabels = new Array();
    var v = $("[title='点击测距']").click(function () {
        distanceArray = new Array();
        distanceLabel = new Array();
        $("#distance-mark-1").val("1");
        $("#distance-mark-2").val("0");
    });
    var v = $("[title='绘制多边形进行降水分析']").click(function () {
        $("#distance-mark-1").val("0");
    });
}
// 获取经纬度
var getLatitudeAndLongitude= function(movement){
        var cartesian = viewer.camera.pickEllipsoid({x: movement.position.x, y: movement.position.y}, scene.globe.ellipsoid);
        var pos;
        if (cartesian) {
            var cartographic = Cesium.Cartographic.fromCartesian(cartesian);
           var latitude = Cesium.Math.toDegrees(cartographic.latitude);
           var longitude = Cesium.Math.toDegrees(cartographic.longitude);
            distanceArray.push({latitude:latitude,longitude:longitude});
        }

}

/**
 *地图上生成3d柱状图
 * @param params 数据 level级别(默认为市级，1：区级)
 */
var  create3DChart=function(params,level) {
    var labelArray=[];
    var maxHeight=15000.0;
    var arr=[];
    for(var k=0;k<params.items.length;k++){
        for(var key in params.COLOR){
            arr.push(params.items[k][key]);
        }
    }
    var max=Math.max.apply(Math,arr);
    var width=params.width?params.width:1500.0;
    if(level){
        width=params.width?params.width:750.0;
        maxHeight=5000.0;
    }
    var m=0;
    var czml=[
        {
            "id" : "document",
            "name" : "CZML Geometries: Circles and Ellipses",
            "version" : "1.0"
        }
    ];
    for(var i=0;i<params.items.length;i++){
        var lgtd=params.items[i].LGTD;
        var lttd=params.items[i].LTTD;
        for(var key in params.COLOR){
            var height=(params.items[i][key]/max)*maxHeight;
            m++;
            var obj={
                id:"point"+m,
                name:params.items[i].NAME,
                "description": {adcd:params.items[i].ADCD,type:obj_type_3d_chart,name:params.items[i].NAME,key:key,value:params.items[i][key]},
                "label" : {
                    show:false,
                    "fillColor" : {
                        "rgba" : params.COLOR[key]
                    },
                    "font" : "12px Microsoft YaHei",
                    "horizontalOrigin" : "LEFT",
                    "outlineColor" : {
                        "rgba":[255, 255, 255, 255]
                    },
                    "outlineWidth" : 2,
                    "pixelOffset" : {
                        "cartesian2" : [30, 0]
                    },
                    "eyeOffset" : {
                        "cartesian" : [1,2,3]
                    },
                    "pixelOffsetScaleByDistance":{
                        "nearFarScalar":[1.0e3, 1.0, 1.5e6, 0.0]
                    },
                    "translucencyByDistance":{
                        "nearFarScalar":[1.0e2, 0.8, 1.5e6, 0.1]
                    },
                    // "cartesian3" : [1.0e3, 1.0, 1.5e6, 0.1],
                    "style" : "FILL_AND_OUTLINE",
                    "text" : params.items[i][key]+"百万方"
                },
                "position" : {
                    "cartographicDegrees" : [lgtd, lttd, 0]
                },
                "ellipse" : {
                    show:true,
                    "semiMinorAxis" : width,
                    "semiMajorAxis" : width,
                    "extrudedHeight" : {
                        "number" : height
                    },
                    "rotation" : {
                        "number" : 0.78539
                    },
                    "material" : {
                        "solidColor" : {
                            "color" : {
                                "rgba" : params.COLOR[key]
                            }
                        }
                    }
                }
            };
            var tmp={
                lgtd:lgtd,
                lttd:lttd,
                text: params.items[i][key],
                height:height
            };
            labelArray.push(tmp)
            czml.push(obj);
            if(level){
                lgtd+=0.02;
            }else{
                lgtd+=0.04;
            }

        }
    }
  addLabelInEarth(labelArray)
    var ds= Cesium.CzmlDataSource.load(czml);
    ds.then(function(dataSource) {
        viewer.dataSources.add(dataSource);
      //  var entities = dataSource.entities;
        waterNumber.push(dataSource);
    })
};

//站点label定义
var label_point = {
    text:"",
    show: true,
    font: '12px Microsoft YaHei',
    outlineWidth: 0.2,
    // style: Cesium.LabelStyle.FILL_AND_OUTLINE,
    // fillColor: Cesium.Color.GHOSTWHITE,
    // outlineColor: Cesium.Color.BLACK,
    // horizontalOrigin: Cesium.HorizontalOrigin.CENTER,
    // verticalOrigin: Cesium.VerticalOrigin.TOP,
    // pixelOffset: new Cesium.Cartesian2(0.0, 10.0),
};
//在地球上加label
var czmlLabel=[];
var addLabelInEarth=function (arry) {
    var lb=label_point;
    $.each(arry,function (index,data) {
        var value=(data.text).toFixed(1)
        var text=value+"百万方";
        font: '14px Microsoft YaHei',
        lb.position=Cesium.Cartesian3.fromDegrees(data.lgtd,data.lttd, data.height+500);
        lb.text=text;
        lb.pixelOffsetScaleByDistance=new Cesium.NearFarScalar(1.0e2, 1.0, 1.5e6, 0.0);
        lb.translucencyByDistance=new Cesium.NearFarScalar(1.0e2, 1.0, 1.5e6, 0.1)
       var l= label.add(label_point);
       czmlLabel.push(l);
    })
}
//移除所有3d表格
function remove3dChart() {
    for(var i=0;i<waterNumber.length;i++){
        viewer.dataSources.remove(waterNumber[i]);
    }
    for(var i=0;i<czmlLabel.length;i++){
        label.remove(czmlLabel[i])
    }
}
//隐藏所有3d表格
function hide3dChart() {
    for(var key in waterNumber){
        waterNumber[key].ellipse.show=false;
    }
}

function   setCenter(layer1){
    var width = $(window).width();
    if($('#monitor-detail').css('display')!='block')
        $('#monitor-detail').css('display','block');
    $('#monitor-detail').css("right",'490px');
    // var left= (width - $('#monitor-detail').width())/2;
    // if($('#monitor-detail').css('left')!=left+'px')
    //     $('#monitor-detail').css("left",left+'px');
    layer.close(layer1)
    // if($('#monitor-detail-right').css('display')!='block')
    //     $('#monitor-detail-right').css('display','block');
}
function   setCenterRight(layer1){
    var width = $(window).width();
    if($('#monitor-detail').css('display')!='block')
        $('#monitor-detail').css('display','block');
    // $('#monitor-detail').css("right",'355px');
    var left= (width - $('#monitor-detail').width())/2;
    if($('#monitor-detail').css('left')!=left+'px')
        $('#monitor-detail').css("left",left+'px');
    layer.close(layer1);
    if($('#monitor-detail-right').css('display')!='block')
        $('#monitor-detail-right').css('display','none');
}
// 设置测距标签
function setDistanceLabel(distanceLabel){
    for(var i=0;i<distanceLabel.length;i++){
        var longitude = distanceLabel[i].longitude
        var latitude=  distanceLabel[i].latitude
        var distance =distanceLabel[i].distance
       var label = viewer.entities.add( {
            name : distanceLabel[i].distance,
            position : Cesium.Cartesian3.fromDegrees(longitude,latitude),
            label : { //文字标签
                text :distance,
                font : '14pt monospace',
                style : Cesium.LabelStyle.FILL_AND_OUTLINE,
                outlineWidth : 2,
                verticalOrigin : Cesium.VerticalOrigin.BOTTOM, //垂直方向以底部来计算标签的位置
            }
        } );
        distanceLabels.push(label);
    }

}

// 移除测距label
function  removeDistanceLabel(){
    for (var i = 0; i < distanceLabels.length; i++) {
        viewer.entities.remove(distanceLabels[i])
    }

}