var drawRectangleButton = document.getElementById("frame-selection-init");
var isRiverNetworkSelect = false;//是否启用河网查询功能
drawRectangleButton.onclick = function () {
  isRiverNetworkSelect = true;
  mapMarkerFunc = false;
  enableCreateRectangle();

};
var geographic;
var geographicCheck = false;
function enableCreateRectangle() {
  require([
    "esri/views/2d/draw/Draw",
    "esri/Graphic",
    "esri/geometry/Polygon",
    "esri/geometry/support/webMercatorUtils"
  ], function (
    Draw, Graphic, Polygon, webMercatorUtils
  ) {
    var draw = new Draw({
      view: view
    });
    var action = draw.create("rectangle", {
      mode: "click"//点击方式加点
    });
    // 获取焦点
    view.focus();
    // //顶点移除事件
    // action.on("vertex-remove", createRectangle);
    // // 鼠标移动事件
    action.on("cursor-update", createCursorRectangle);
    // 绘制完成事件
    action.on("draw-complete", createRectangle);
    function createCursorRectangle(event) {
      //获取所有顶点
      var vertices = event.vertices;

      //两点画矩形
      if (vertices.length < 2) {
        return
      }
      var rings = [vertices[0], [vertices[0][0], vertices[1][1]], vertices[1], [vertices[1][0], vertices[0][1]]];
      //清除之前绘制
      view.graphics.removeAll();
      // 生成绘制的图形
      var graphic = new Graphic({
        geometry: new Polygon({
          hasZ: false,
          hasM: false,
          rings: [rings],
          spatialReference: view.spatialReference
        }),
        symbol: {
          type: "simple-fill",  // autocasts as new SimpleFillSymbol()
          color: [255, 255, 255, 0],
          style: "solid",
          outline: {  // autocasts as new SimpleLineSymbol()
            color: "white",
            width: 1
          }
        }
      });
      // 将绘制的图形添加到view
      view.graphics.add(graphic);
    }
    //开始监听画矩形
    function createRectangle(event) {
      //获取所有顶点
      var vertices = event.vertices;

      //两点画矩形
      if (vertices.length < 2) {
        return
      }
      var rings = [vertices[0], [vertices[0][0], vertices[1][1]], vertices[1], [vertices[1][0], vertices[0][1]]];
      //清除之前绘制
      view.graphics.removeAll();
      // 生成绘制的图形
      var graphic = new Graphic({
        geometry: new Polygon({
          hasZ: false,
          hasM: false,
          rings: [rings],
          spatialReference: view.spatialReference
        }),
        symbol: {
          type: "simple-fill",  // autocasts as new SimpleFillSymbol()
          color: [255, 255, 255, 0],
          style: "solid",
          outline: {  // autocasts as new SimpleLineSymbol()
            color: "white",
            width: 1
          }
        }
      });
      // 将绘制的图形添加到view
      geographic = webMercatorUtils.webMercatorToGeographic(graphic.geometry); //将墨卡托范围转换为地理范围
      view.graphics.add(graphic);
      console.info(geographic);
      var point = {
        type: "point", // autocasts as new Point()
        x: geographic.rings[0][1][0],
        y: geographic.rings[0][1][1],
        z: 1010
      };
      var markerSymbol = {
        type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
        color: [226, 119, 40],
        outline: {
          // autocasts as new SimpleLineSymbol()
          color: [255, 255, 255],
          width: 1
        }
      };
      var pointGraphic = new Graphic({
        geometry: point,
        symbol: markerSymbol,

      });
      // view.graphics.add(pointGraphic);
      var box = [];
      box.push(geographic.rings[0][1][0]);
      box.push(geographic.rings[0][1][1]);
      box.push(geographic.rings[0][3][0]);
      box.push(geographic.rings[0][3][1]);
      let body = {
        interface: "com.ec.ws.service.def.monitoring.MonitorObjectService",
        method: "findRiverSystem",
        args: [view.scale, box]
      };
      ajaxCallJson(body, "/rpc", ({ data }) => {
        if (data && data.ennm) {
          geographicCheck = true;
          initLoadFrameSelection(data, pointGraphic.geometry);
          view.graphics.removeAll();
        } else {
          view.graphics.removeAll();
        }
      });
    }
  })
}

function initLoadFrameSelection(objs, mapPoint) {
  var monm = objs.ennm;
  var obj = {
    monm: monm, //
    area: objs.area ? objs.area : '-', //
    sta: objs.sta ? objs.sta : '-', //
    oth: objs.oth ? objs.oth : '-', //
    end_: objs.end_ ? objs.end_ : '-', //
    len: objs.len ? objs.len : '-',
    mapPoint: mapPoint,
  }
  var html = '';
  html += '<div id="popup" class="pointlayer-popup">' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">流域面积(km²)</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.area + '</div>' +
    '</div>' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">河流起点</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.sta + '</div>' +
    '</div>' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">河流终点</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.end_ + '</div>' +
    '</div>';
  html += '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">河流长度(km)</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.len + '</div>' +
    '</div>';
  showPopup(html, obj);
}

