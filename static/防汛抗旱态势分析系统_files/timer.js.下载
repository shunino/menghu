/**
 * 启动告警图标闪烁定时器
 * @type {number}
 */

var warmPointTimer;
var startWarnPointTimer = function () {
  warmPointTimer = window.setInterval("refreshWarnTimer(warnPointArray,51,41)", 600);
}
var stopWarnPointTimer = function () {
  clearInterval(warmPointTimer);
  warmPointTimer = 0;
}
var warmTimerFlag = 0;

/**
 *告警图标闪烁效果 xjg
 * @param arr 闪烁对象数组
 * @param big  最大宽高
 * @param small 最小宽高
 */
function refreshWarnTimer(arr, big, small) {
  var entity;
  if (warmTimerFlag == 0) {
    for (var i = 0; i < arr.length; i++) {
      entity = viewer.entities.getById(arr[i].entityId);
      if (arr[i].type == obj_type_rain) {
        //arr[i].entity.show = true;
      } else {
        entity.billboard.height = big;
        entity.billboard.width = big - 8;
      }
    }
    warmTimerFlag = 1;
  } else {
    for (var i = 0; i < arr.length; i++) {
      entity = viewer.entities.getById(arr[i].entityId);
      if (arr[i].type == obj_type_rain) {
        //arr[i].entity.show = false;
      } else {
        entity.billboard.height = small;
        entity.billboard.width = small - 8;
      }
    }
    warmTimerFlag = 0;
  }
}

/**
 *河段闪烁效果 xjg
 * @param arr
 */
var flag_line = 0;

function refreshWarnLine(arr) {
  var entity
  if (flag_line == 0) {
    for (var i = 0; i < arr.length; i++) {
      entity = viewer.entities.getById(arr[i].entityId);
      entity.polyline.material = Cesium.Color.RED;
    }
    flag_line = 1;
  } else {
    for (var i = 0; i < arr.length; i++) {
      entity = viewer.entities.getById(arr[i].entityId);
      entity.polyline.material = Cesium.Color.DODGERBLUE;
    }
    flag_line = 0;
  }
}


var dispatchTimer;
var startDispatchTimer = function () {
  currentStepData.splice(0, currentStepData.length);
  currentStepDataArray.splice(0, currentStepDataArray.length);
  dataCurrent = -1;
  dispatchTimer = window.setInterval("refreshDispatch()", 2000);
}
var stopDispatchTimer = function () {
  clearInterval(dispatchTimer);
  dispatchTimer = 0;
}
var currentStepData = [], maxStepData = [];
var currentStepDataArray = [], newCurrentStepArray = [];
var dataCurrent = -1;
var refreshDispatch = function () {
  var node = $("#" + dispatchWindow.id);
  if (node.is(':hidden')) {
    stopDispatchTimer();
    $("#logo-gif").css("display", "block");
  }
  //if(win){
  //    if($("#"+win.id).is(':hidden')){
  //        ajaxCallJson({dispatchId:thisDispatchId},'/dispatch/getDispatchResult', function(_data) {
  //            initDispatchDataDetail(dispatchWindow,_data);
  //        })
  //    }
  //}
  ajaxCallJson({dispatchId: thisDispatchId}, '/dispatch/getDispatchStep', function (_data) {
    if (_data && _data.flag && _data.data) {
      var isCompleted = _data.data.completed;
      var currentStep = _data.data.currentStep;
      if (currentStep != dataCurrent) {
        currentStepData.push(currentStep);
        currentStepDataArray.push(_data.data.values);
        for (var i = 0; i < currentStepDataArray.length - 1; i++) {
          maxStepData.push(currentStepDataArray[i][3]);//甲秀楼最大流量
        }
        if (currentStep > dataCurrent) {
          if (currentStep == 1) {
            ajaxCallJson({dispatchId: thisDispatchId}, '/dispatch/getDispatchResult', function (_data) {
              initDispatchDataDetail(dispatchWindow, _data);
              click_optimizationtimes();
            })
          }
          click_optimizationtimes();
          $("#load-optimization-div").css("display", "block");
        }
        dataCurrent = currentStep;
      }
      var msgText = $(".dispatch-message");
      if (isCompleted) {
        stopDispatchTimer();
        msgText.text("计算完成");
        $("#load-optimization-div").css("display", "none");
      } else {
        msgText.text("当前计算" + currentStep + "次");
      }

    }
  });
}
var winOptimizationChartWindow
var floodControlOptimization = [];
var optimizationchartArray = [], waterRsvrDataArrar = [], initFlag;
var click_optimizationtimes = function (id) {
  //console.info(currentStepDataArray)
  initFlag = false;
  if (currentStepDataArray[1] != undefined) {
    currentStepDataArray[0] = currentStepDataArray[1];
  }
  winOptimizationChartWindow.show();
  var data1 = {
    max: reservoirList[2].maxStage,
    min: "1108",
    floodControlWaterLevel: 1108,//防洪限制水位
    img: "/images/dam/11.png",
    mocd: reservoirList[2].id,
    monm: reservoirList[2].name,
    type: 1
  };
  var data2 = {
    "max": reservoirList[1].maxStage,
    "min": "1137.9",
    floodControlWaterLevel: 1137.9,
    mocd: reservoirList[1].id,
    monm: reservoirList[1].name,
    img: "/images/dam/88.png",
    type: 8
  };
  var data3 = {
    "max": reservoirList[0].maxStage,
    "min": "1176",
    floodControlWaterLevel: 1176,
    mocd: reservoirList[0].id,
    monm: reservoirList[0].name,
    img: "/images/dam/33.png",
    type: 3
  };
  var data4 = {
    "maxFlow": 1054.67,
    "distanceTargetFlow": 320,
  }
  data1.reservoirwaterlevel = new Array();//水库水位
  data2.reservoirwaterlevel = new Array();
  data3.reservoirwaterlevel = new Array();
  data1.maxQuantity = new Array();//最大下泄流量
  data2.maxQuantity = new Array();
  data3.maxQuantity = new Array();
  data1.reservoirwaterlevel.push(currentStepDataArray[currentStepDataArray.length - 1][4]);//阿哈水位
  //data1.reservoirwaterlevel.push(1107.5)
  data2.reservoirwaterlevel.push(currentStepDataArray[currentStepDataArray.length - 1][6]);//花溪水位
  //data2.reservoirwaterlevel.push(1143)
  data3.reservoirwaterlevel.push(currentStepDataArray[currentStepDataArray.length - 1][8]);//松柏山水位
  //data3.reservoirwaterlevel.push(1179);//松柏山水位
  data1.maxQuantity.push(currentStepDataArray[currentStepDataArray.length - 1][5]);//阿哈最大下泄流量
  data2.maxQuantity.push(currentStepDataArray[currentStepDataArray.length - 1][7]);//花溪最大下泄流量
  data3.maxQuantity.push(currentStepDataArray[currentStepDataArray.length - 1][9]);//松柏山最大下泄流量
  data4.currentStepDataFrequency = [];
  data4.maxStage = new Array();//甲秀楼最大流量
  data4.maxQuantity = new Array();//甲秀楼目标流量
  data4.distanceFromTarget = new Array();
  data4.maxWater = new Array();
  data4.maxQuantityWater = new Array();
  data4.distanceFromTargetWater = new Array();
  for (var i = 0; i < currentStepDataArray.length; i++) {
    data4.maxStage.push(((currentStepDataArray[i][3]).toFixed(2)).toString());//甲秀楼最大流量
    data4.maxWater.push(((currentStepDataArray[i][2]).toFixed(2)).toString());//甲秀楼最大水位
    floodControlOptimization.push(currentStepDataArray[i][10])//优化概率
  }
  for (var j = 0; j <= currentStepData.length + 10; j++) {
    data4.currentStepDataFrequency.push(j.toString());
    data4.maxQuantity.push(currentStepDataArray[0][1].toString());//甲秀楼目标控制流量
    data4.maxQuantityWater.push(currentStepDataArray[0][0].toString());//甲秀楼目标控制水位
  }
  if (parseFloat(getArrayMin(data4.maxStage)) > parseFloat(getArrayMin(data4.maxQuantity))) {
    if (getArrayMin(data4.maxQuantity) <= 0) {
      data4.minStage = getArrayMin(data4.maxQuantity)
    } else {
      data4.minStage = getArrayMin(data4.maxQuantity) - 50;
    }
  } else {
    if (parseFloat(getArrayMin(data4.maxStage)) <= 0) {
      data4.minStage = getArrayMin(data4.maxStage)
    } else {
      if (parseFloat(getArrayMin(data4.maxStage)) <= 50) {
        data4.minStage = getArrayMin(data4.maxStage);
      } else {
        data4.minStage = parseFloat(getArrayMin(data4.maxStage)) - 50;
      }
    }
  }
  if (parseFloat(getArrayMin(data4.maxWater)) > parseFloat(getArrayMin(data4.maxQuantityWater))) {
    if (getArrayMin(data4.maxQuantityWater) <= 0) {
      data4.minWater = getArrayMin(data4.maxQuantityWater)
    } else {
      data4.minWater = getArrayMin(data4.maxQuantityWater) - 5;
    }
  } else {
    if (parseFloat(getArrayMin(data4.maxWater)) <= 0) {
      data4.minWater = getArrayMin(data4.maxWater)
    } else {
      if (parseFloat(getArrayMin(data4.maxWater)) <= 5) {
        data4.minWater = getArrayMin(data4.maxWater);
      } else {
        data4.minWater = parseFloat(getArrayMin(data4.maxWater)) - 5;
      }
    }
  }
  var pie = new Pie({
    el: '#optimization-view-top-left-pie',
    animite: true,
    ring: 0.4,
    color: '#1f9cff'
  });
  pie.init();

  var params = {
    id: "optimization-view-top-right-chart",
    data: data4,
  };
  var paramsWater = {
    id: "water-view-top-right-chart",
    data: data4,
  };
  var dam1 = createSectionOptimizationViewNew("optimization-view-bottom-left-chart", data1, winOptimizationChartWindow);
  var dam2 = createSectionOptimizationViewNew("optimization-view-bottom-center-chart", data2, winOptimizationChartWindow);
  var dam3 = createSectionOptimizationViewNew("optimization-view-bottom-right-chart", data3, winOptimizationChartWindow);
  var chart = initOptimizationRateChart(params)
  var waterChart = initOptimizationWaterChart(paramsWater);
  $("#click-chart-data").unbind('click').bind('click', function () {
    if ($('#click-chart-data').attr('flag') == "chart") {
      $('#click-chart-data').attr('flag', "table");
      $('#water-view-top-right-chart').show();
      $('#optimization-view-top-right-chart').hide();
      resizeChart();
    } else {
      $('#click-chart-data').attr('flag', "chart");
      $('#water-view-top-right-chart').hide();
      $('#optimization-view-top-right-chart').show();
      resizeChart();
    }
  });
  $("#optimization-view-stop").unbind('click').bind('click', function () {
    stopDispatchTimer();
    $(".dispatch-message").text("");
    $(".dispatch-message").text("当前计算已结束");
    $("#load-optimization-div").css("display", "none");
  });
}
var createSectionOptimizationViewNew = function (domId, data, win) {
  var myChart = echarts.init(document.getElementById(domId));
  var markPointData = getMarkPointData(data.pointList, 35);
  var damImg = data.img;
  var width = $("#" + domId).width();
  var height = $("#" + domId).height();
  var gridWidth = width;
  var gridHeight = height, oldMin = data.min, oldMax = data.max, elXVal = 52, yPu = 0.334, yPd = 0.003, waterLen = 87,
    colorRedWidth = 300, colorYellowWidth = 300, redColorHeight, yellowColorHeight, controlWaterHeight;
  if (data.type == 1) {
    elXVal = 65;
    waterLen = 75.2;
    colorRedWidth = 420;
    colorYellowWidth = 315;
  } else if (data.type == 3) {
    waterLen = 87.2;
    elXVal = 62;
    colorRedWidth = 530;
    colorYellowWidth = 505;
  } else if (data.type == 8) {
    elXVal = 56;
    waterLen = 75;
    colorRedWidth = 425;
    colorYellowWidth = 425;
  }
  markPointData = markPointData.concat(createDispatchMarkPoint(elXVal, oldMax, '最高控制水位'));
  data.min = parseInt(data.min - (data.max - data.min) * yPd) - 3;
  data.max = parseInt(data.max + (yPu * (data.max - data.min) / (1 - yPu)));
  var pxV = ""
  switch (data.type) {
    case 1://OK
      yPu = 0.133;
      pxV = (height) / (data.max - data.min);//刻度转换像素  1刻度=pxV像素
      redColorHeight = data.max - (data.max - data.min) / 3.4;
      yellowColorHeight = data.max - (data.max - data.min) / 1.5;
      controlWaterHeight = data.max - (data.max - data.min) / 1.7;
      break;
    case 3://OK
      yPu = 0.165;
      yPd = 10 / 52.5;
      pxV = (height) / (data.max - data.min);
      redColorHeight = data.max - (data.max - data.min) / 3.3;
      yellowColorHeight = data.max - (data.max - data.min) / 1.7;
      controlWaterHeight = data.max - (data.max - data.min) / 1.9;
      break;
    case 8://OK
      yPu = 0.16;
      yPd = 10 / 51.6;
      pxV = (height - 10) / (data.max - data.min);
      redColorHeight = data.max - (data.max - data.min) / 3.5;
      yellowColorHeight = data.max - (data.max - data.min) / 1.45;
      controlWaterHeight = data.max - (data.max - data.min) / 1.6;
      break;
    default:
      break;
  }
  gridHeight = (oldMax - data.min) * pxV + 56;
  markPointData.push({
    symbol: "rect",
    symbolSize: [130, 18],
    itemStyle: {
      normal: {color: 'rgba(128, 128, 128, 0)'}
    },
    coord: [62, controlWaterHeight],
    label: {
      normal: {
        show: true, formatter: function (param) {
          return '防洪限制水位:' + data.floodControlWaterLevel + '(m)';
        },

      }
    }
  });
  if (parseFloat(data.reservoirwaterlevel[0]) < parseInt(data.min - (data.max - data.min) * yPd) - 3) {
    markPointData.push({
      symbol: "rect",
      symbolSize: [130, 18],
      itemStyle: {
        normal: {color: 'rgba(128, 128, 128, 0)'}
      },
      coord: [20, data.max - (data.max - data.min) / 1.3],
      label: {
        normal: {
          show: true, formatter: function (param) {
            return '水库水位:' + data.reservoirwaterlevel + '(m)';
          },

        }
      }
    })
  }
  markPointData.push({
    symbol: "rect",
    symbolSize: [10, 0],
    itemStyle: {
      normal: {color: 'rgba(128, 128, 128, 0)'}
    },
    coord: [70, data.max - (data.max - data.min) / 1.3],
    label: {
      normal: {
        show: true,
        formatter: function (param) {
          return '最大泄量:' + data.maxQuantity + '(m³/s)';
        }
      }
    }
  });
  var baseOption = ""
  baseOption = {
    grid: {
      left: 0,
      right: 0,
      bottom: 2,
      top: 0
    },
    backgroundColor: "rgba(18, 51, 51, 0)",
    xAxis: {
      splitLine: {show: false},
      min: 0,
      max: 100,
      boundaryGap: false,
      axisTick: false,//是否显示刻度
      axisLabel: false,//是否显示刻度标签
      nameTextStyle: {color: '#FFF'}
    },
    yAxis: {
      name: '高程(m)',
      max: data.max,
      min: data.min,
      show: false,
      splitLine: {show: true},
      nameTextStyle: {color: '#FFF', fontSize: 10},
      axisLine: {lineStyle: {color: '#FFF'}},
      axisTick: {lineStyle: {color: '#FFF'}},
      axisLabel: {textStyle: {color: '#FFF'}},
    },
    series: [{
      type: 'line',
      name: 'index',
      markPoint: {
        silent: true,
        data: markPointData
      },
      z: 3
    }, {
      name: 'waterLine',
      type: 'line',
      symbolSize: 0,
      areaStyle: {normal: {color: '#1f9cff', opacity: 0.8}},
      lineStyle: {normal: {color: '#1f9cff', opacity: 0.8}},
      z: 0
    }
    ],
    graphic: [{
      type: 'image',
      id: 'logo',
      right: 2,
      bottom: 2,
      z: 1,
      bounding: 'raw',
      style: {
        image: damImg,
        width: gridWidth,
        height: gridHeight,
        opacity: 1
      }
    }]
  };
  var options = new Array();
  if (data.reservoirwaterlevel) {
    var tLabel = new Array(), textVal = '', timeLineIndex = 0, timeLineMarkPointData, hasMax = false;
    timeLineMarkPointData = markPointData;
    timeLineMarkPointData = timeLineMarkPointData.concat(createDispatchMarkPoint(11, data.reservoirwaterlevel, '水库水位'));

    //黄色线
    timeLineMarkPointData.push({
      symbol: "rect",
      symbolSize: [colorYellowWidth, 1],
      itemStyle: {
        normal: {color: '#FFFF32'}
      },
      coord: [0, yellowColorHeight],
      label: {
        normal: {
          show: true,
          formatter: function (param) {
            return '';
          }
        }
      }
    });
    //红色线
    timeLineMarkPointData.push({
      symbol: "rect",
      symbolSize: [colorRedWidth, 1],
      itemStyle: {
        normal: {color: '#FF2C2C'}
      },
      coord: [0, redColorHeight],
      label: {
        normal: {
          show: true,
          formatter: function (param) {
            return '';
          }
        }
      }
    });
    options.push({
      series: [{
        type: 'line',
        name: 'nowZ',
        markPoint: {
          silent: true,
          data: timeLineMarkPointData
        },
        z: 4
      }, {
        name: 'waterLine',
        data: [[0, data.reservoirwaterlevel], [waterLen, data.reservoirwaterlevel]],
        z: 0
      }]
    });
    baseOption.tooltip = {};
    baseOption.timeline = {
      show: false,
      axisType: 'category',
      autoPlay: false,
      playInterval: 1000,
      bottom: 0,
      data: tLabel,
      left: 80,
      right: 40,
      z: 10,
    }
  }


  myChart.setOption({baseOption: baseOption, options: options});
  if ($.inArray(myChart, optimizationchartArray) == -1) {
    optimizationchartArray.push(myChart);
  }
  if (win != "") {
    win.resizecbfn(function () {
      myChart.resize();
      var width = $("#" + domId).width();
      var height = $("#" + domId).height();
      var gridWidth = width - 160;
      var gridHeight = height - 60;
      if (win.getState() == 'max')
        gridHeight = height - 20;
      baseOption.graphic[0].style.width = gridWidth;
      baseOption.graphic[0].style.height = gridHeight;
      myChart.setOption({baseOption: baseOption, options: options});
    });
  }
  return myChart.getDataURL({type: "png", backgroundColor: "rgba(18, 51, 51, 0)"});
}

//流量图表
function initOptimizationRateChart(params) {
  $('#optimization-view-top-right-chart').css("width", "100%").css("height", "100%");
  var title = params.title;
  var data = params.data;
  var id = params.id;
  var water = params.water;
  var maxWater, minWater;
  if (parseFloat(getArrayMax(params.data.maxStage)) > parseFloat(getArrayMax(params.data.maxQuantity))) {
    maxWater = getArrayMax(params.data.maxStage);
  } else {
    maxWater = getArrayMax(params.data.maxQuantity);
  }
  minWater = "0";
  var waterY = getDataMaxMin(maxWater, minWater, 1);
  var legendData = ["甲秀楼最大流量(m³/s)", "目标控制流量(m³/s)"]
  var otherLeftMarkLine = getChartMarkLine((currentStepData[currentStepData.length - 1]).toString(), waterY.max, waterY.min);
  var option = {
    color: ['#ff3366', '#fff585'],
    title: $.extend(true, {}, title, {text: title, show: false}),
    legend: $.extend(true, {}, legend, {data: legendData, show: true, top: 20, selectedMode: false, tooltip: {}}),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        var html = "";
        if (params[0] && params[0].data != undefined) {
          html += params[0].seriesName + ":" + (params[0].data ? params[0].data : "-") + "<br/>";
        }
        if (params[1] && params[1].data != undefined) {
          html += params[1].seriesName + ":" + (params[1].data ? params[1].data : "-") + "<br/>";

        }
        if (params[1] && params[1].data != undefined && params[0] && params[0].data != undefined) {
          var aaa = "距目标流量(m³/s)"
          html += aaa + ":" + (parseFloat(params[0].data - params[1].data)).toFixed(2).toString() + "<br/>";
        }
        return html;
      }
    },
    xAxis: $.extend(true, [], xAxis, [{
      data: params.data.currentStepDataFrequency,
      name: "计算次数",
      nameGap: 35,
      axisLabel: {
        formatter: function (value, index) {
          var value = "" + value;
          return value;
        }
      }
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "流量(m³/s)",
      min: waterY.min,
      max: waterY.max,
      interval: waterY.interval,
      position: 'right',
      splitLine: {show: false}
    }, {show: false}]),
    grid: $.extend({}, grid, {bottom: "18%", right: "10%", left: "2%", top: "20%"}),
    series: [
      {
        name: legendData[0],
        type: "line",
        data: params.data.maxStage,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          data: [
            {
              type: 'max',
              symbol: 'circle',
              symbolSize: 5,
              itemStyle: {
                normal: {
                  label: {show: true, position: 'top'}
                }
              }
            }, {
              symbol: 'circle',
              coord: [currentStepData[currentStepData.length - 1], params.data.maxStage[params.data.maxStage.length - 1]],
              symbolSize: 5,
              itemStyle: {
                normal: {
                  label: {show: true, position: 'top'}
                }
              }
            }
          ]
        },
      }, {
        name: legendData[1],
        type: "line",
        data: params.data.maxQuantity,
        smooth: true,
        markPoint: {
          data: [
            {
              type: 'max',
              symbol: 'line',
              symbolSize: 5,
              itemStyle: {
                normal: {
                  label: {show: true, position: 'top'}
                }
              }
            }
          ]
        }
      },
    ]
  };
  option.legend = $.extend(true, {}, legend, {data: legendData, show: true, tooltip: {show: false}});
  //console.info(option.legend.tooltip)
  var chart = echarts.init(document.getElementById(id));
  chart.setOption(option);
  if ($.inArray(chart, chartArray) == -1) {
    chartArray.push(chart);
  }

}


//水位图表
function initOptimizationWaterChart(params) {
  $('#water-view-top-right-chart').css("width", "100%").css("height", "100%");
  var title = params.title;
  var data = params.data;
  var id = params.id;
  var water = params.water;
  var maxWater
  if (parseFloat(getArrayMax(params.data.maxWater)) > parseFloat(getArrayMax(params.data.maxQuantityWater))) {
    maxWater = getArrayMax(params.data.maxWater);
  } else {
    maxWater = getArrayMax(params.data.maxQuantityWater);
  }
  var minWater = "1047";
  var waterY = getDataMaxMin(maxWater, minWater, 1);
  var legendData = ["甲秀楼最大水位(m)", "目标控制水位(m)"]
  var otherLeftMarkLine = getChartMarkLine((currentStepData[currentStepData.length - 1]).toString(), waterY.max, waterY.min);
  var option = {
    color: ['#ff3366', '#fff585'],
    title: $.extend(true, {}, title, {text: title, show: false}),
    legend: $.extend(true, {}, legend, {data: legendData, show: true, top: 20, selectedMode: false, tooltip: {}}),
    tooltip: {
      trigger: 'axis',
      formatter: function (params) {
        var html = "";
        if (params[0] && params[0].data != undefined) {
          html += params[0].seriesName + ":" + (params[0].data ? params[0].data : "-") + "<br/>";
        }
        if (params[1] && params[1].data != undefined) {
          html += params[1].seriesName + ":" + (params[1].data ? params[1].data : "-") + "<br/>";

        }
        if (params[1] && params[1].data != undefined && params[0] && params[0].data != undefined) {
          var aaa = "距目标水位(m)"
          html += aaa + ":" + (parseFloat(params[0].data - params[1].data)).toFixed(2).toString() + "<br/>";
        }
        return html;
      }
    },
    xAxis: $.extend(true, [], xAxis, [{
      data: params.data.currentStepDataFrequency,
      name: "计算次数",
      nameGap: 35,
      axisLabel: {
        formatter: function (value, index) {
          var value = "" + value;
          return value;
        }
      }
    }]),
    yAxis: $.extend(true, [], yAxis, [{
      name: "水位(m)",
      min: waterY.min,
      max: waterY.max,
      interval: waterY.interval,
      position: 'right',
      splitLine: {show: false}
    }, {show: false}]),
    grid: $.extend({}, grid, {bottom: "18%", right: "10%", left: "2%", top: "20%"}),
    series: [
      {
        name: legendData[0],
        type: "line",
        data: params.data.maxWater,
        markLine: otherLeftMarkLine,
        smooth: true,
        markPoint: {
          data: [
            {
              type: 'max',
              symbol: 'circle',
              symbolSize: 5,
              itemStyle: {
                normal: {
                  label: {show: true, position: 'top'}
                }
              }
            }, {
              symbol: 'circle',
              coord: [currentStepData[currentStepData.length - 1], params.data.maxWater[params.data.maxWater.length - 1]],
              symbolSize: 5,
              itemStyle: {
                normal: {
                  label: {show: true, position: 'top'}
                }
              }
            }
          ]
        },
      }, {
        name: legendData[1],
        type: "line",
        data: params.data.maxQuantityWater,
        smooth: true,
        markPoint: {
          data: [
            {
              type: 'max',
              symbol: 'line',
              symbolSize: 5,
              itemStyle: {
                normal: {
                  label: {show: true, position: 'top'}
                }
              }
            }
          ]
        }
      },
    ]
  };
  option.legend = $.extend(true, {}, legend, {data: legendData, show: true, tooltip: {show: false}});
  //console.info(option.legend.tooltip)
  var chart = echarts.init(document.getElementById(id));
  chart.setOption(option);
  if ($.inArray(chart, chartArray) == -1) {
    chartArray.push(chart);
  }
}

//
var createDispatchMarkPoint = function (x, y, name) {
  var data = new Array(), w = 110, symbolOffset = ['-330%', '-80%'];
  if (name.length > 4) {
    w = w + (name.length - 4) * 10;
    symbolOffset = ['-400%', '-50%'];
  }
  if (name != '坝顶高程' && name != '坝底高程') {
    data.push({
      symbol: 'none',
      symbolSize: [12, 12],
      symbolOffset: symbolOffset,
      symbolRotate: 180,
      //itemStyle: {
      //    normal: {color: "#8164A3"}
      //},
      coord: [x, y],
      label: {normal: {show: false}}
    });
  }
  data.push({
    symbol: "rect",
    symbolSize: [w, 15],
    symbolOffset: ['30%', '-50%'],
    itemStyle: {
      normal: {color: 'rgba(128, 128, 128, 0)'}
    },
    coord: [x, y],
    label: {
      normal: {
        show: true, position: 'insideBottom', color: "#fff", formatter: function (param) {
          return name + ':' + param.data.coord[1] + '(m)';
        }
      }
    }
  });
  return data;
}