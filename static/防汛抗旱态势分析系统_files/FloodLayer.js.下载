//封装加载地图点模块
define([
  "esri/layers/FeatureLayer",
  "esri/layers/support/LabelClass",
  "esri/geometry/Point",
  "esri/symbols/Font"
],
  function (FeatureLayer, LabelClass, Point,Font) {
    /**
     * mapPointArr点数据数组，classBreakInfosArr 渲染器数组
     */
    return function (mapPointArr, classBreakInfosArr, featureLayerID) {
      var minScale = 250000000; //label在视图中可见的最小比例
      var symbol3D = {
        type: "label-3d", // autocasts as new LabelSymbol3D()
        symbolLayers: [{
          type: "text", // autocasts as new TextSymbol3DLayer()
          material: {
            color: "black"
          },
          halo: {
            size: 1,
            color: "white"
          },
          size: 10
        }]
      }
      var symbol2D = {
        type: "text",  // autocasts as new TextSymbol()
        color: "black",
        haloSize: 1,
        haloColor: "white",
        size: 10,
        font: {  // autocasts as new Font()
          size: 12,
          family: "Josefin Slab",
          weight: "bold"
        }
      }
      //定义需要显示的字段
      var fields = [{
        name: "ObjectID",
        alias: "ObjectID",
        type: "oid"
      }, {
        name: "monm", //名称
        alias: "monm",
        type: "string"
      }, {
        name: "wlevel", //wlevel
        alias: "wlevel",
        type: "double"
      }, {
        name: "motype", //wlevel
        alias: "motype",
        type: "string"
      }, {
        name: "occurtime", //wlevel
        alias: "occurtime",
        type: "string"
      }, {
        name: "wname", //wlevel
        alias: "wname",
        type: "string"
      }, {
        name: "index", //wlevel
        alias: "index",
        type: "string"
      }, {
        name: "drp", //wlevel
        alias: "drp",
        type: "double"
      }, {
        name: "intv", //wlevel
        alias: "intv",
        type: "string"
      },{
        name: "exparams", //exparams
        alias: "exparams",
        type: "blob"
      }, {
        name: "mocd", //mocd
        alias: "mocd",
        type: "string"
      }];
      //构造popUp显示模板
      var pTemplate = {
        title: "{monm}",
        content: [{
          type: "fields",
          fieldInfos: [{
            fieldName: "monm",
            label: "名称",
            visible: true
          }, {
            fieldName: "wlevel",
            label: "预警级别",
            visible: true
          }, {
            fieldName: "motype",
            label: "类型",
            visible: true
          }, {
            fieldName: 'occurtime',
            label: '预警时间',
            visible: true,
          }, {
            fieldName: 'wname',
            label: '灾害风险',
            visible: false,
          }, {
            fieldName: 'index',
            label: '预警指标',
            visible: true,
          }, {
            fieldName: 'drp',
            label: '降雨量(mm)',
            visible: true,
          }, {
            fieldName: 'intv',
            label: '小时',
            visible: true,
          }, {
            fieldName: "exparams",
            label: "exparams",
            visible: true
          }, {
            fieldName: "mocd",
            label: "mocd",
            visible: true
          }]
        }]
      }

      //定义渲染器
      var pointRenderer = {
        type:"class-breaks" , // autocasts as new ClassBreaksRenderer()
        field: "wlevel",
        classBreakInfos: classBreakInfosArr
      }

      //创建点的label标注
      var statesLabelClass = new LabelClass({
        labelExpressionInfo: {
          expression: "$feature.monm"
        },
        labelPlacement: "above-center",
        minScale: minScale,
        symbol: dimension === "3D" ? symbol3D : symbol2D
      });
      var sourceObj = pointCreateGraphicsObj(mapPointArr);

      var pointLayer = new FeatureLayer({
        id: featureLayerID,
        source: sourceObj.pointObj,
        fields: fields,
        objectIdField: "ObjectID",
        renderer: pointRenderer,
        popupTemplate: pTemplate,
      });

      pointLayer.labelingInfo = [statesLabelClass];
      var obj = {
        pointLayer: pointLayer,
        renderer: pointRenderer,
        source: sourceObj.pointObj,
        labelClass: statesLabelClass,
        fields: fields,
        classBreakInfosArr: classBreakInfosArr,
        objId: sourceObj.objId
      }
      return obj;
    }
    //创建点图形对象
    function pointCreateGraphicsObj(mapPointArrParam) {
      var objId = [];
      var pointObj = mapPointArrParam.map(function (ele, i) {
        objId.push(ele.mocd);
        return {
          geometry: new Point({
            x: ele.lgtd,
            y: ele.lttd
          }),
          attributes: {
            ObjectID: i,
            monm: ele.monm,
            motype: ele.motype,
            wlevel:ele.wlevel,
            occurtime: ele.occurtime,
            wname: ele.wname,
            index: ele.index,
            drp: ele.drp,
            intv: ele.intv,
            exparams: ele.exparams,
            mocd: ele.mocd,
          }
        }
      });
      return obj = {
        pointObj: pointObj,
        objId: objId
      }
    }
  }
)
