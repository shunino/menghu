var statisticsData; //告警数据
var earlyDataList; //预警数据
var warningCountData = ""; //发布预警数目
var bigDataChartArray = [];
var myEarlyChart;
var eChartsMap;
var intervalLength;
var isFirstCheck = true;
$(function () {
  loadBigDataMap();
  setInterval(function () {
    bigDataChartArray.forEach(function (chart) {
      chart.dispose();
    });
    bigDataChartArray.clear();
    initLoadNatural();
    initLoadEarly();//预警数过程线
    initFloodWarningStatistics();
    if (myEarlyChart) {
      myEarlyChart.dispose();
    }
    initLoadMapData();
    reWarningData();
  }, 1000 * 60 * 2);
  intervalLength = setInterval(function () {
    if ($("#echarts-map-data").children("div").width() != undefined) {
      mapDivShow(isFirstCheck)
    }
  }, 5000)
  if (user.userId != "bigdata") {
    initLoadBigData();
  }
});
var resizeBigDataChart = function (chart) {
  for (var i = 0; i < bigDataChartArray.length; i++) {
    if (!$(bigDataChartArray[i].getDom()).is(":hidden")) {
      bigDataChartArray[i].resize();
    }
  }
  myEarlyChart.resize();
  eChartsMap.resize();

}

//加载大数据窗口
var BigDataWindow;

function changBigData() {
  window.user.usertype == 3 ? window.location.href = `/bigScreen` : initLoadBigData();
}

function initLoadBigData() {
  var info = JSON.parse(privilegeBaseData);
  var name = info.adnm == null ? "" : info.adnm;
  if (!BigDataWindow) {
    BigDataWindow = new MyWindow($("#big-data-window"), {
      title: "<span style='font-size: 30px;color: rgb(0, 255, 255);font-weight: bold;'>" + name + "防汛抗旱综合态势</span>",
      // isRestore: false,
      zIndex: 999,
      isRestore: false,
      headDbClick: false,
      setLevel: false,
      isClose: true
    });
    BigDataWindow.maximie();
  }
  $(".window-title").html(`<span style='font-size: 30px;color: rgb(0, 255, 255);font-weight: bold;'>${name}防汛抗旱综合态势</span>`);
  BigDataWindow.show();
  bigDataChartArray.forEach(function (chart) {
    chart.dispose();
  });
  bigDataChartArray.clear();
  if (myEarlyChart) {
    myEarlyChart.dispose();
  }
  if (eChartsMap) {
    eChartsMap.dispose();
  }
  initLoadNatural();

  initLoadEarly(); //预警数过程线
  initFloodWarningStatistics();
  initLoadMapData();
  BigDataWindow.resizecbfn(function () {
    $("#early-warning-map-data").hide(10);
    $("#echarts-map-data").show(300);
    isFirstCheck = false;
    clearInterval(intervalLength);
    resizeBigDataChart();
  });

  reWarningData();
  initPieData();

}

//顶部echarts图表
function initLoadNatural() {
  var startTime = moment(SYSTEM.getSystemTime()).subtract(30, 'days').format('YYYY[-]MM[-]DD HH:mm:ss');
  var endTime = moment(SYSTEM.getSystemTime()).format('YYYY[-]MM[-]DD HH:mm:ss');
  ajaxCallJson({
    startTime: startTime,
    endTime: endTime
  }, '/bigData/getDataLines', function (_data) {
    if (_data && _data.data) {
      var data = JSON.parse(_data.data);
      if (data.resflag == false && data.data.length == 0) {
        return;
      }
      if (data.data == null) {
        return;
      }
      var xAxisData = [],
        seriesData = [];
      for (var i = 0; i < data.data.length; i++) {
        seriesData.push(data.data[i].current);
        xAxisData.push(moment(data.data[i].tm).format('YYYY[-]MM[-]DD'));
      }
      var maxAlarm = getArrayMax([getArrayMax(seriesData), getArrayMax(seriesData)]);
      var minAlarm = getArrayMin([getArrayMin(seriesData), getArrayMin(seriesData)]);
      var alarmYAxis = getDataMaxMin(maxAlarm, minAlarm);
      var naturalOption = {
        title: {
          text: ''
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            trigger: 'line',
            lineStyle: {
              color: "#ff1d25",
            }
          }
        },
        legend: {
          data: [],
          show: false
        },
        grid: {
          bottom: "10",
          right: "35",
          top: "20",
          left: "20",
          containLabel: true
        },
        xAxis: [{
          type: 'category',
          boundaryGap: false,
          data: xAxisData,
          nameLocation: 'middle',
          axisLabel: {
            textStyle: {
              color: '#fff'
            },
          },
          axisLine: {
            lineStyle: {
              color: '#71787f',
              width: 1,
            },
          },
          splitLine: {
            show: false
          },
        }],
        yAxis: [{
          type: 'value',
          min: alarmYAxis.min,
          max: alarmYAxis.max,
          interval: alarmYAxis.interval,
          axisLabel: {
            textStyle: {
              color: '#fff'
            },
            formatter: function (value, index) {
              var value = "" + value;
              return value;
            }
          },
          axisLine: {
            show: false,
          },
          splitLine: {
            show: true,
            lineStyle: {
              color: ['#71787f'],
              type: "dotted"
            },
          },
        },

        ],
        series: [{
          name: '',
          type: 'line',
          smooth: true,
          stack: '',
          itemStyle: {
            color: '#ff6f00'
          },
          markPoint: {
            symbol: 'circle',
            symbolSize: 10,
            data: [{
              type: "max",
              name: '最大值'
            }],
            label: {
              normal: {
                position: 'bottom'
              }
            }
          },
          markLine: getChartMarkLine(xAxisData[xAxisData.length - 1], alarmYAxis.max, alarmYAxis.min),
          areaStyle: {
            color: {
              type: 'line',
              x: 0,
              y: 0,
              x2: 0,
              y2: 1,
              colorStops: [{
                offset: 0,
                color: 'rgba(255,111,0,0.3)' // 0% 处的颜色
              },
              {
                offset: 1,
                color: 'rgba(255,111,0,0)' // 100% 处的颜色
              }
              ],
              global: false // 缺省为 false
            },
          },
          data: seriesData
        },]
      };
      var chart = echarts.init(document.getElementById("natural-disaster-charts"));
      chart.setOption(naturalOption);
      if ($.inArray(chart, bigDataChartArray) == -1) {
        bigDataChartArray.push(chart);
      }
    }
  });

}

//暴雨预警
function initLoadEarly() {
  var startTime = moment(SYSTEM.getSystemTime()).subtract(30, 'days').format('YYYY[-]MM[-]DD 00:00:00');
  var endTime = moment(SYSTEM.getSystemTime()).format('YYYY[-]MM[-]DD 24:00:00');
  ajaxCallJson({
    startTime: startTime,
    endTime: endTime,
    alarmtype: 2
  }, '/bigData/getAlarmCountLines', function (_data) {
    if (_data && _data.data) {
      var data = JSON.parse(_data.data);
      if (data.resflag == false && data.data.length == 0) {
        return;
      }
      if (data.data == null) {
        return;
      }
      var xAxisData = [],
        seriesData = [];
      for (var i = 0; i < data.data.length; i++) {
        seriesData.push(data.data[i].count);
        xAxisData.push(moment(data.data[i].tm).format('YYYY[-]MM[-]DD'));
      }
      var maxAlarm = getArrayMax([getArrayMax(seriesData), getArrayMax(seriesData)]);
      var minAlarm = getArrayMin([getArrayMin(seriesData), getArrayMin(seriesData)]);
      var alarmYAxis = getDataMaxMin(maxAlarm, minAlarm);
      var option = {
        title: {
          text: ''
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            trigger: 'line',
            lineStyle: {
              color: "#ff1d25",
            }
          },
          formatter: function (params) {
            var value = "" + params[0].value,
              name = "" + params[0].name;
            $("#rain-move-title").html("时间:" + name + "  风险数:" + value + "")
            return name + "<br/>" + value;
          }
        },
        legend: {
          data: [],
          show: false
        },
        grid: {
          bottom: "10",
          right: "35",
          top: "20",
          left: "20",
          containLabel: true
        },
        xAxis: [{
          type: 'category',
          boundaryGap: false,
          data: xAxisData,
          nameLocation: 'middle',
          axisLabel: {
            textStyle: {
              color: '#fff'
            },
          },
          axisLine: {
            lineStyle: {
              color: '#71787f',
              width: 1,
            },
          },
          splitLine: {
            show: false
          },
        }],
        yAxis: [{
          type: 'value',
          min: alarmYAxis.min,
          max: alarmYAxis.max,
          interval: alarmYAxis.interval,
          axisLabel: {
            textStyle: {
              color: '#fff'
            },
            formatter: function (value, index) {
              var value = "" + value;
              return value;
            }
          },
          axisLine: {
            show: false,
          },
          splitLine: {
            show: true,
            lineStyle: {
              color: ['#71787f'],
              type: "dotted"
            },
          },
        },],
        series: [{
          name: '',
          type: 'line',
          smooth: true,
          itemStyle: {
            color: '#ffd300'
          },
          markPoint: {
            symbol: 'circle',
            symbolSize: 10,
            data: [{
              type: "max",
            }],
            label: {
              normal: {
                position: 'bottom'
              }
            }
          },
          markLine: getChartMarkLine(xAxisData[xAxisData.length - 1], alarmYAxis.max, alarmYAxis.min),
          areaStyle: {
            color: {
              type: 'line',
              x: 0,
              y: 0,
              x2: 0,
              y2: 1,
              colorStops: [{
                offset: 0,
                color: 'rgba(255,211,0,0.3)' // 0% 处的颜色
              },
              {
                offset: 1,
                color: 'rgba(255,211,0,0)' // 100% 处的颜色
              }
              ],
              global: false // 缺省为 false
            },
          },
          data: seriesData
        },]
      };
      $("#rain-move-title").html("时间:" + xAxisData[xAxisData.length - 1] + "  风险数:" + seriesData[seriesData.length - 1]);
      var chart = echarts.init(document.getElementById("early-warning-charts"));
      chart.setOption(option);
      chart.on('click', function (params) {
        initLoadMapData(params.name, 2)
        clearInterval(intervalLength);
      });
      if ($.inArray(chart, bigDataChartArray) == -1) {
        bigDataChartArray.push(chart);
      }
    }
  });

}
//加载洪水预警数据
function initFloodWarningStatistics() {
  var startTime = moment(SYSTEM.getSystemTime()).subtract(30, 'days').format('YYYY[-]MM[-]DD 00:00:00');
  var endTime = moment(SYSTEM.getSystemTime()).format('YYYY[-]MM[-]DD 24:00:00');
  ajaxCallJson({
    startTime: startTime,
    endTime: endTime,
    alarmtype: 3
  }, '/bigData/getAlarmCountLines', function (_data) {
    if (_data && _data.data) {
      var data = JSON.parse(_data.data);
      if (data.resflag == false && data.data.length == 0) {
        return;
      }
      if (data.data == null) {
        return;
      }
      var xAxisData = [],
        seriesData = [];
      for (var i = 0; i < data.data.length; i++) {
        seriesData.push(data.data[i].count);
        xAxisData.push(moment(data.data[i].tm).format('YYYY[-]MM[-]DD'));
      }
      var maxAlarm = getArrayMax([getArrayMax(seriesData), getArrayMax(seriesData)]);
      var minAlarm = getArrayMin([getArrayMin(seriesData), getArrayMin(seriesData)]);
      var alarmYAxis = getDataMaxMin(maxAlarm, minAlarm);
      var option = {
        title: {
          text: ''
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            trigger: 'line',
            lineStyle: {
              color: "#ff1d25",
            }
          },
          formatter: function (params) {
            var value = "" + params[0].value,
              name = "" + params[0].name;
            $("#flood-move-title").html("时间:" + name + "  风险数:" + value + "")
            return name + "<br/>" + value;
          }
        },
        legend: {
          data: [],
          show: false
        },
        grid: {
          bottom: "10",
          right: "35",
          top: "20",
          left: "20",
          containLabel: true
        },
        xAxis: [{
          type: 'category',
          boundaryGap: false,
          data: xAxisData,
          nameLocation: 'middle',
          axisLabel: {
            textStyle: {
              color: '#fff'
            },
          },
          axisLine: {
            lineStyle: {
              color: '#71787f',
              width: 1,
            },
          },
          splitLine: {
            show: false
          },
        }],
        yAxis: [{
          type: 'value',
          min: alarmYAxis.min,
          max: alarmYAxis.max,
          interval: alarmYAxis.interval,
          axisLabel: {
            textStyle: {
              color: '#fff'
            },
            formatter: function (value, index) {
              var value = "" + value;
              return value;
            }
          },
          axisLine: {
            show: false,
          },
          splitLine: {
            show: true,
            lineStyle: {
              color: ['#71787f'],
              type: "dotted"
            },
          },
        },],
        series: [{
          name: '',
          type: 'line',
          smooth: true,
          itemStyle: {
            color: '#8cff3f'
          },
          markPoint: {
            symbol: 'circle',
            symbolSize: 10,
            data: [{
              type: "max",
            }],
            label: {
              normal: {
                position: 'bottom'
              },
              fontWeight: "bold",
              fontSize: 18
            },
          },
          markLine: getChartFloodMarkLine(xAxisData[xAxisData.length - 1], alarmYAxis.max, alarmYAxis.min),
          areaStyle: {
            color: {
              type: 'line',
              x: 0,
              y: 0,
              x2: 0,
              y2: 1,
              colorStops: [{
                offset: 0,
                color: 'rgba(255,211,0,0.3)' // 0% 处的颜色
              },
              {
                offset: 1,
                color: 'rgba(255,211,0,0)' // 100% 处的颜色
              }
              ],
              global: false // 缺省为 false
            },
          },
          data: seriesData
        },]
      };
      $("#flood-move-title").html("时间:" + xAxisData[xAxisData.length - 1] + "  风险数:" + seriesData[seriesData.length - 1]);
      var chart = echarts.init(document.getElementById("early-warning-type-charts"));
      chart.setOption(option);
      chart.on('click', function (params) {
        initLoadMapData(params.name, 3)
        clearInterval(intervalLength);
      });
      if ($.inArray(chart, bigDataChartArray) == -1) {
        bigDataChartArray.push(chart);
      }
    }
  });
}

var loadBigDataMap = function () {
  echarts.extendsBigDataMap = function (id, opt) {
    // 实例
    var chart = this.init(document.getElementById(id));
    var curGeoJson = {};
    var defaultOpt = {
      mapName: 'china', // 地图展示
      goDown: false, // 是否下钻
      bgColor: '#404a59', // 画布背景色
      activeArea: [], // 区域高亮,同echarts配置项
      data: [],
      // 下钻回调(点击的地图名、实例对象option、实例对象)
      callback: function (name, option, instance) {
      }
    };
    if (opt) opt = this.util.extend(defaultOpt, opt);

    // 层级索引
    var name = [opt.mapName];
    var idx = 0;
    var pos = {
      leftPlus: 40,
      leftCur: 0,
      left: 0,
      top: 5
    };

    var line = [
      [0, 0],
      [4, 6],
      [0, 11]
    ];
    // style
    var style = {
      font: '20px "Microsoft YaHei", sans-serif',
      textColor: 'rgb(0, 255, 255)',
      lineColor: 'rgba(147, 235, 248, 0.8)'
    };
    var option = {
      backgroundColor: "",
      tooltip: {
        show: true,
        trigger: 'item',
        alwaysShowContent: false,
        backgroundColor: 'rgba(50,50,50,0.7)',
        hideDelay: 100,
        triggerOn: 'mousemove',
        enterable: true,
        position: ['60%', '70%'],
        formatter: function (params, ticket, callback) {
          return '名称：' + params.data.adnm + '<br/>' + '预警数：' + params.data.alarm;
        }
      },
      graphic: [{
        type: 'group',
        left: pos.left,
        top: pos.top - 4,
        children: [] // 左上角定位坐标样式
      },
      {
        id: "中国",
        type: 'group',
        left: "40%",
        top: 6,
        children: [{
          type: 'text',
          left: "60",
          top: 'middle',
          style: {
            text: opt.title,
            textAlign: 'center',
            fill: style.textColor,
            font: style.font
          },
        },]
      }
      ],
      geo: {
        map: opt.mapName,
        roam: false,
        top: 10,
        bottom: 10,
        left: 10,
        right: 30,
        zoom: 1,
        label: {
          text: "111",
          normal: {
            show: false,
            textStyle: {
              color: '#fff'
            }
          },
          emphasis: {
            textStyle: {
              color: '#fff'
            }
          }
        },
        itemStyle: {
          normal: {
            borderColor: 'rgba(147, 235, 248, 0.8)',
            borderWidth: 1,
            areaColor: {
              type: 'radial',
              x: 0.5,
              y: 0.5,
              r: 0.8,
              colorStops: [{
                offset: 0,
                color: 'rgba(147, 235, 248, 0)' // 0% 处的颜色
              }, {
                offset: 1,
                color: 'rgba(147, 235, 248, 0.2)' // 100% 处的颜色
              }],
              globalCoord: false // 缺省为 false
            },
            shadowColor: 'rgba(128, 217, 248, 1)',
            shadowOffsetX: -2,
            shadowOffsetY: 2,
            shadowBlur: 10
          },
          emphasis: {
            areaColor: '#389BB7',
            borderWidth: 1
          }
        },
        regions: opt.activeArea.map(function (item) {
          if (typeof item !== 'string') {
            return {
              name: item.name,
              itemStyle: {
                normal: {
                  areaColor: item.areaColor || '#389BB7'
                }
              },
              label: {
                normal: {
                  show: item.showLabel,
                  textStyle: {
                    color: '#fff'
                  }
                }
              }
            }
          } else {
            return {
              name: item,
              itemStyle: {
                normal: {
                  borderColor: '#91e6ff',
                  areaColor: '#389BB7'
                }
              }
            }
          }
        })
      },
      series: [{
        type: 'effectScatter',
        coordinateSystem: 'geo',
        showEffectOn: 'render',
        rippleEffect: {
          period: 15,
          scale: 4,
          brushType: 'fill'
        },
        markPoint: { //图形
          symbolSize: 30,
          label: {
            normal: {
              show: true,
              formatter: function (param) {
                return param.data.alarm;
              }
            }
          },
          itemStyle: {
            normal: {
              areaColor: 'rgb(127, 255, 0)',
              color: ['rgba(127, 255, 0, 0.7)']
            },
            emphasis: {
              color: ['rgb(127, 255, 0)']
            }
          },
          data: opt.data.pointList,
        },
        hoverAnimation: true,
        itemStyle: {
          normal: {
            color: '#ffffff',
            shadowBlur: 10,
            shadowColor: '#333'
          }
        },
        data: opt.data.seriesList,
      }],

    };
    chart.setOption(option);
    // if($.inArray(chart,bigDataChartArray)==-1){
    //     bigDataChartArray.push(chart);
    // }
    return chart;
  };
}

function initLoadMapData(time, type) {
  if (type) {
    if (type == 2) {
      $("#echarts-map-data").show(300);
      $("#early-warning-map-data").hide(300);
    } else {
      $("#echarts-map-data").hide(300);
      $("#early-warning-map-data").show(300);
    }
  }
  if (userPrivilege == "000000000000000") {
    $.getJSON("json/mapjson/data-china.json", function (geoJson) {
      echarts.registerMap('中国', geoJson);
      $("#show-big-data-south").css("display", "block");
      initLoadDayData(time, "中国");
    })
  } else {//其他用户
    let param = {
      adcd: userPrivilege,
    };
    let adcd = userPrivilege;
    let adnm = "";
    var timeDate = time
    ajaxCallJson(param, "/getPoint/findMiniMapByParent", function (_data) {
      geoDataList = {};
      $("#show-big-data-south").css("display", "none");
      if (_data.flag && _data != null) {
        var geoData = JSON.parse(_data.data);
        geoDataList = geoData;
        adnm = geoData.data[0].adnm;
        initBigDataMap(adnm, adcd, geoData, timeDate);
      } else {
        layui.use('layer', function () {
          var layer = layui.layer;
          index = layer.msg("数据加载错误！请联系管理员");
        })
      }
    });
  }
}
function initBigDataMap(adnm, adcd, geoJson, timeDate) {
  var geoDataJson = {
    features: []
  },
    geoDataJsonList = [];
  for (var j = 0; j < geoJson.data.length; j++) {
    for (var i = 0; i < geoJson.data[j].subdata.length; i++) {
      geoDataJsonList = []
      geoDataJsonList = {
        type: "Feature",
        geometry: geoJson.data[j].subdata[i].geometry,
        properties: {
          name: geoJson.data[j].subdata[i].adnm,
          adcd: geoJson.data[j].subdata[i].adcd
        }
      };
      geoDataJson.type = "FeatureCollection";
      geoDataJson.features.push(geoDataJsonList)
    }
  }
  echarts.registerMap(adnm, geoDataJson);
  initLoadDayData(timeDate, adnm)
}
function initLoadDayData(time, adnm) {
  var series = {},
    seriesList = [],
    allSeriesData = {},
    pointList = [],
    pointData = {};
  var startTime = "", endTime = "";
  if (time) {
    startTime = moment(time).format('YYYY[-]MM[-]DD 00:00:00')
    endTime = moment(time).format('YYYY[-]MM[-]DD 24:00:00');
  } else {
    time = moment(SYSTEM.getSystemTime()).format('YYYY[-]MM[-]DD');
    startTime = moment(SYSTEM.getSystemTime()).format('YYYY[-]MM[-]DD 00:00:00');
    endTime = moment(SYSTEM.getSystemTime()).format('YYYY[-]MM[-]DD 24:00:00');
  }
  ajaxCallJson({
    startTime: startTime,
    endTime: endTime,
    alarmtype: 2
  }, '/bigData/getRankByAdcd', function (_data) {
    if (_data && _data.data) {
      statisticsData = "";
      var data = JSON.parse(_data.data);
      if (data.resflag == false && data.data.length == 0) {
        return;
      }
      if (data.data == null) {
        return;
      }
      statisticsData = data;
      if (statisticsData && statisticsData.data && statisticsData.data.length > 0) {
        for (var i = 0; i < statisticsData.data.length; i++) {
          series = {
            adnm: statisticsData.data[i].adnm,
            alarm: statisticsData.data[i].alarm,
            value: [statisticsData.data[i].lgtd, statisticsData.data[i].lttd]
          };
          pointData = {
            adnm: statisticsData.data[i].adnm,
            value: statisticsData.data[i].alarm,
            alarm: statisticsData.data[i].alarm,
            coord: [statisticsData.data[i].lgtd, statisticsData.data[i].lttd],
            symbol: 'pin'
          };
          seriesList.push(series);
          pointList.push(pointData);
        }
      }
      allSeriesData = {
        seriesList: seriesList,
        pointList: pointList
      };

      //告警地图
      eChartsMap = echarts.extendsBigDataMap('echarts-map-data', {
        bgColor: '#154e90', // 画布背景色
        mapName: adnm, // 地图名
        goDown: false, // 是否下钻
        title: "暴雨风险分布" + "(" + time + ")",
        data: allSeriesData
      });

    }
  });
  var startFloodTime = "", endFloodTime = "";
  if (time) {
    startFloodTime = moment(time).format('YYYY[-]MM[-]DD 00:00:00')
    endFloodTime = moment(time).format('YYYY[-]MM[-]DD 24:00:00');
  } else {
    startFloodTime = moment(SYSTEM.getSystemTime()).format('YYYY[-]MM[-]DD 00:00:00');
    endFloodTime = moment(SYSTEM.getSystemTime()).format('YYYY[-]MM[-]DD 24:00:00');
  }
  ajaxCallJson({
    startTime: startFloodTime,
    endTime: endFloodTime,
    alarmtype: 3
  }, '/bigData/getRankByAdcd', function (_data) {
    if (_data && _data.data) {
      earlyDataList = "";
      var data = JSON.parse(_data.data);
      if (data.resflag == false && data.data.length == 0) {
        return;
      }
      if (data.data == null) {
        return;
      }
      earlyDataList = data;
      var earlySeries = {},
        earlySeriesList = [],
        allEarlySeriesData = {},
        earlyPointList = [],
        earlyPointData = {};
      if (earlyDataList && earlyDataList.data && earlyDataList.data.length > 0) {
        for (var i = 0; i < earlyDataList.data.length; i++) {
          earlySeries = {
            adnm: earlyDataList.data[i].adnm,
            alarm: earlyDataList.data[i].alarm,
            value: [earlyDataList.data[i].lgtd, earlyDataList.data[i].lttd]
          };
          earlyPointData = {
            adnm: earlyDataList.data[i].adnm,
            value: earlyDataList.data[i].alarm,
            alarm: earlyDataList.data[i].alarm,
            coord: [earlyDataList.data[i].lgtd, earlyDataList.data[i].lttd],
            symbol: 'pin'
          };
          earlySeriesList.push(earlySeries);
          earlyPointList.push(earlyPointData);
        }
      }
      allEarlySeriesData = {
        seriesList: earlySeriesList,
        pointList: earlyPointList
      };
      var width = $("#echarts-map-data").children("div").width();
      var height = $("#echarts-map-data").children("div").height();
      $("#early-warning-map-data").css("width", width);
      $("#early-warning-map-data").css("height", height);
      //预警地图
      myEarlyChart = echarts.extendsBigDataMap('early-warning-map-data', {
        bgColor: '#154e90', // 画布背景色
        mapName: adnm, // 地图名
        title: "洪水风险分布" + "(" + time + ")",
        goDown: false, // 是否下钻
        data: allEarlySeriesData
      });
    }
  });
}
function mapDivShow(type) {
  if ($("#early-warning-map-data").width() <= 100) {
    isFirstCheck = false;
  } else {
    isFirstCheck = true;
  }
  if ($("#early-warning-map-data").children("div").width() <= 100) {
    isFirstCheck = false;
  } else {
    isFirstCheck = true;
  }
  if (isFirstCheck != true) {
    if (myEarlyChart) {
      myEarlyChart.dispose();
    }
    initLoadMapData();
    isFirstCheck = true;
  }
  if ($("#echarts-map-data").is(":visible")) {
    $("#echarts-map-data").hide(10);
    $("#early-warning-map-data").show(300);
  } else {
    $("#early-warning-map-data").hide(10);
    $("#echarts-map-data").show(300);
  }
}
function getChartFloodMarkLine(xData, min, max, position) {
  var MarkLine = {
    silent: true,
    symbol: 'none',
    data: [
      [{
        coord: [xData, min],
      }, {
        coord: [xData, max],
        lineStyle: {
          normal: {
            color: '#8cff3f',
            type: 'dotted'
          }
        },
        label: {
          normal: {
            position: (position ? position : 'start'),
            formatter: xData
          }
        }
      }]
    ]
  };
  return MarkLine;
}