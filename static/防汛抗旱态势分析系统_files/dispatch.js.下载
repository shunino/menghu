/**
 * Created by Administrator on 2017/4/11.
 */
//初始水库联合调度
// loadRiverUnionDispatch();
var dispatchReservoirData = new Array(), dispatchSectionInFlow, dispatchSectionWater, dispatchDownInFlow,
  dispatchDownWater;
var dispatchReservoirChart = new Array(), dispatchSectionChart, dispatchDownChart;
var dispatchWindow, dispatchTimeIndex = 0;
var dispatchConfList, cacheDispatchData = {}, dispatchMapChartParamList;
var thisDispatchId, hisWin, calculationContentLayer;

function loadRiverUnionDispatch() {
  $("#union-dispatch-button button[value='1']").addClass('button-check-class');
  $("#union-dispatch-button button[value='2']").removeClass('button-check-class');
  $("#union-dispatch-button button[value='3']").removeClass('button-check-class');
  $("#union-dispatch-button button[value='6']").css("display", "block");
  $("#union-dispatch-button button[value='7']").css("display", "none");
  $("#union-dispatch-button button[value='8']").css("display", "none");
  $("#union-dispatch-button button[value='9']").css("display", "none");
  $("#union-dispatch-button button[value='10']").css("display", "none");
  $("#union-dispatch-button button[value='11']").css("display", "none");
  $("#union-dispatch-button button[value='12']").css("display", "none");
  //$("#union-dispatch-button button[value='13']").css("display","none");
  $(".dispatch-message").text("");
  $(".save-dispatch-title").text("");
  $("#logo-gif").css("display", "none");
  if (!dispatchWindow) {
    dispatchWindow = new MyWindow($("#union-dispatch"), {
      title: "南明河联合调度",
      isRestore: false,
      zIndex: 999,
      headDbClick: false,
      setLevel: false,
      isClose: true
    });
    dispatchWindow.maximie();
  }
  //   var mocd=obj.rvcd;
  var node = $("#" + dispatchWindow.id);
  if (node.is(':hidden')) {
    $("#logo-gif").css("display", "block");
  }
  initDispatchData(1, dispatchWindow);
  $("#union-dispatch img").unbind('click').bind('click', function () {
    var dom = $(this).parent();
    // chartArray.forEach(function (chart) {
    //   chart.dispose();
    // });
    // chartArray.clear();
    enlargeDispatchChart(dom.attr("class"));
  });
  $("#union-dispatch-button button").unbind('click').bind('click', function () {
    var btn = $(this);
    var type = parseInt(btn.val());
    var param = {};
    switch (type) {
      case 1://实时
        $("#union-dispatch-button button[value='1']").addClass('button-check-class');
        $("#union-dispatch-button button[value='2']").removeClass('button-check-class');
        $("#union-dispatch-button button[value='3']").removeClass('button-check-class');
        $("#union-dispatch-button button[value='6']").css("display", "block");
        //$("#union-dispatch-button button[value='7']").css("display","block");
        //$("#union-dispatch-button button[value='8']").css("display","none");
        //$("#union-dispatch-button button[value='9']").css("display","none");
        initPlayButton();
        initDispatchData(1, dispatchWindow);
        break;
      case 2://历史
        $("#union-dispatch-button button[value='2']").addClass('button-check-class');
        $("#union-dispatch-button button[value='1']").removeClass('button-check-class');
        $("#union-dispatch-button button[value='3']").removeClass('button-check-class');
        $("#union-dispatch-button button[value='6']").css("display", "none");
        $(".simulation-catalog-left").css("display", "none");
        $(".simulation-catalog-right").css("width", "867px");
        // initPlayButton()
        ajaxCallJson({reqType: 1}, '/dispatch/getHistoryCatalog', function (_data) {
          if (_data && _data.data && _data.data.length > 0) {
            if (!hisWin)
              hisWin = new MyWindow($("#dispatch-history-catalog"), {
                title: "联合调度历史",
                width: 600,
                height: 480,
                isMax: false
              });
            //var dataArr = new Array();
            //for(var i=0;i<_data.data.length;i++) {
            //    if (_data.data[i].dpType != 1)
            //        continue
            //    dataArr.push(_data.data[i])
            //}
            var columns = [{field: "dpCode", title: "编号", align: "center"},
              {field: "dpTime", title: "时间", align: "center"},
              {field: "dpDesc", title: "描述", align: "center"},
              {field: "call", title: "操作", align: "center"}];
            _data.data.forEach(function (val) {
              val.call = "<button >调度</button>";
            })
            $(".dispatch-history-table").bootstrapTable({columns: columns, data: _data.data});
            $(".dispatch-history-table").on('click-cell.bs.table', function (event, field, value, row) {
              if (field == 'call') {
                hisWin.hide();
                param.dpCode = row.dpCode;
                if (!myWindow)
                  myWindow = new MyWindow($("#dispatch-simulation-catalog"), {
                    title: "调度控制参数",
                    zIndex: 90,
                    width: 885,
                    height: 480,
                    isMax: false
                  });
                myWindow.setTitle("历史调度-控制参数");
                myWindow.show();
                getDispatchDefaultQuantity(myWindow, param.dpCode);
                myWindow.body.find('button').unbind('click').bind('click', function () {
                  param.dpIndex = getDpIndex(myWindow);
                  var checkHongDongData;
                  if ($("#check-hong-dong").prop("checked")) {
                    checkHongDongData = true;
                  } else {
                    checkHongDongData = false;
                  }
                  param.enabled = checkHongDongData;
                  initDispatchData(2, dispatchWindow, param);
                  initPlayButton();
                  myWindow.hide();
                  $("#union-dispatch-button button[value='7']").css("display", "none");
                  $("#union-dispatch-button button[value='8']").css("display", "block");
                  $("#union-dispatch-button button[value='9']").css("display", "none");
                  $("#union-dispatch-button button[value='10']").css("display", "none");
                  $("#union-dispatch-button button[value='11']").css("display", "block");
                  $("#union-dispatch-button button[value='12']").css("display", "none");
                  $("#union-dispatch-button button[value='13']").css("display", "block");
                  initOptimizationWindow();
                });
              }
            });
            $(".dispatch-history-table").on('dbl-click-row.bs.table', function (event, obj) {
              hisWin.hide();
              param.dpCode = obj.dpCode;
              if (!myWindow)
                myWindow = new MyWindow($("#dispatch-simulation-catalog"), {
                  title: "调度控制参数",
                  zIndex: 90,
                  width: 885,
                  height: 480,
                  isMax: false
                });
              myWindow.setTitle("历史调度-控制参数");
              myWindow.show();
              getDispatchDefaultQuantity(myWindow, param.dpCode);
              myWindow.body.find('button').unbind('click').bind('click', function () {
                param.dpIndex = getDpIndex(myWindow);
                var checkHongDongData;
                if ($("#check-hong-dong").prop("checked")) {
                  checkHongDongData = true;
                } else {
                  checkHongDongData = false;
                }
                param.enabled = checkHongDongData;
                initDispatchData(2, dispatchWindow, param);
                initPlayButton();
                myWindow.hide();
                initOptimizationWindow();
              });
            });
            hisWin.show();
          } else {
            layer.msg("无历史数据", {time: 2000})
          }
        });
        break;
      case 3://模拟
        $("#union-dispatch-button button[value='3']").addClass('button-check-class');
        $("#union-dispatch-button button[value='1']").removeClass('button-check-class');
        $("#union-dispatch-button button[value='2']").removeClass('button-check-class');
        $("#union-dispatch-button button[value='6']").css("display", "none");
        $(".simulation-catalog-left").css("display", "inline-block");
        $(".simulation-catalog-right").css("width", "507px");
        // initPlayButton();
        ajaxCallJson({reqType: 2}, '/dispatch/getHistoryCatalog', function (_data) {
          if (_data && _data.data != null && _data.data.length > 0) {
            $("#simulation-catalog-option select").html("");
            var html = '';
            for (var i = 0; i < _data.data.length; i++) {
              if (checkedIndex < 0 && i == 0) {
                html += '<option value=\"' + _data.data[i].dpCode + '\" selected>' + _data.data[i].dpName + '</option>';
              } else {
                if (checkedIndex == i && checkedIndex < _data.data.length) {
                  html += '<option value=\"' + _data.data[i].dpCode + '\" selected>' + _data.data[i].dpName + '</option>';
                } else {
                  html += '<option value=\"' + _data.data[i].dpCode + '\">' + _data.data[i].dpName + '</option>';
                }
              }
            }
            $("#simulation-catalog-option select").append(html);
          }
        });
        ajaxCallJson({}, '/dispatch/getSimulationParameters', function (_data) {
          if (_data && _data.data) {
            initSimulationWindow(_data.data, dispatchWindow, btn);
          }
        });
        break;
      case 4:
        playDispatchChart(this);
        break;
      case 5:
        ajaxCallJson({dispatchId: thisDispatchId}, '/dispatch/getDispatchResult', function (_data) {
          initDispatchDataDetail(dispatchWindow, _data);
        })
        break;
      case 6://优化调度
        $("#union-dispatch-button button[value='6']").css("display", "block");
        $(".simulation-catalog-left").css("display", "none");
        $(".simulation-catalog-right").css("width", "867px");
        if (!myWindow)
          myWindow = new MyWindow($("#dispatch-simulation-catalog"), {
            title: "调度控制参数",
            zIndex: 90,
            width: 885,
            height: 480,
            isMax: false
          });
        myWindow.setTitle("实时调度-控制参数");
        myWindow.show();
        getDispatchDefaultQuantity(myWindow, "1");
        myWindow.body.find('button').unbind('click').bind('click', function () {
          param.dpIndex = getDpIndex(myWindow);
          param.dpType = 1;
          initDispatchData(1, dispatchWindow, param);
          initPlayButton();
          $("#union-dispatch-button button[value='7']").css("display", "block");
          $("#union-dispatch-button button[value='8']").css("display", "none");
          $("#union-dispatch-button button[value='9']").css("display", "none");
          $("#union-dispatch-button button[value='10']").css("display", "block");
          $("#union-dispatch-button button[value='11']").css("display", "none");
          $("#union-dispatch-button button[value='12']").css("display", "none");
          $("#union-dispatch-button button[value='13']").css("display", "block");
          myWindow.hide();
          initOptimizationWindow();
        });
        break;
      case 7://实时成果报告
        layer.msg("数据加载中,请稍等...", {icon: 16, time: 4 * 1000, skin: 'layer-ext-simulation'});
        ajaxCallJson({
          calcid: thisDispatchId,
          generateTypr: 1
        }, '/dispatch/generateDispatchReportInternal', function (result) {
          if (result && result.data) {
            var data = result.data;
            if (data.originpdf) {
              data.fileid = data.originpdf;
              data.reportname = "南明河联合调度实时成果报告_" + moment(data.createtime).format('YYYY[年]MM[月]DD[日_]HH[时]');
              initDispatchReportWin(data);
            } else {
              dispatchReportWin.hide();
              layer.msg('暂无数据', {time: 1500})
            }
          } else {
            dispatchReportWin.hide();
            layer.msg('暂无数据', {time: 1500})
          }
        })
        break;
      case 8://历史成果报告
        layer.msg("数据加载中,请稍等...", {icon: 16, time: 4 * 1000, skin: 'layer-ext-simulation'});
        ajaxCallJson({
          calcid: thisDispatchId,
          generateTypr: 2
        }, '/dispatch/generateDispatchReportInternal', function (result) {
          if (result && result.data) {
            var data = result.data;
            if (data.originpdf) {
              data.fileid = data.originpdf;
              data.reportname = "南明河联合调度历史成果报告_" + moment(data.createtime).format('YYYY[年]MM[月]DD[日_]HH[时]');
              initDispatchReportWin(data);
            } else {
              dispatchReportWin.hide();
              layer.msg('暂无数据', {time: 1500})
            }
          } else {
            dispatchReportWin.hide();
            layer.msg('暂无数据', {time: 1500})
          }
        })
        break;
      case 9://模拟成果报告
        layer.msg("数据加载中,请稍等...", {icon: 16, time: 4 * 1000, skin: 'layer-ext-simulation'});
        ajaxCallJson({
          calcid: thisDispatchId,
          generateTypr: 3
        }, '/dispatch/generateDispatchReportInternal', function (result) {
          //layer.msg("数据加载中,请稍等...",{icon:16,time:15*1000,skin:'layer-ext-simulation'});
          if (result && result.data) {
            var data = result.data;
            if (data.originpdf) {
              data.fileid = data.originpdf;
              data.reportname = "南明河联合调度模拟成果报告_" + moment(data.createtime).format('YYYY[年]MM[月]DD[日_]HH[时]');
              initDispatchReportWin(data);
            } else {
              dispatchReportWin.hide();
              layer.msg('暂无数据', {time: 1500})
            }
          } else {
            dispatchReportWin.hide();
            layer.msg('暂无数据', {time: 1500})
          }
        });
        break;
      case 10://实时保存计算成果
        var typeData = "0";
        saveOptimizationFunction(typeData);
        break;
      case 11://历史保存计算成果
        var typeData = "1";
        saveOptimizationFunction(typeData);
        break;
      case 12://模拟保存计算成果
        var typeData = "2";
        saveOptimizationFunction(typeData);
        break;
      case 13://查看计算成果
        var html = '<div style="text-align:center; margin-top: 3%"><div id="calculation-results-content" style="margin:5px 20px 0px"></div></div>';
        // $(".window-close").css("display","block");
        calculationContentLayer = layer.open({
            type: 1,
            area: ['600px', '400px'],
            content: html,
            title: '计算成果记录',
            skin: 'win-class',
          }
        );
        ajaxCallJson({type: ""}, '/dispatch/getHistoryDispatchResult', function (result) {
          if (result.flag) {
            var history = result.data;
            var htmlHead = '<div id="aa"><table class="table table-bordered table-responsive " style="margin-bottom: 0px"><thead class="server-report-thead" style="background-color: rgba(18, 41, 51, 0.7)"><tr><th width="61px">序号</th><th width="133px">时间</th><th width="125px">名称</th></tr></thead></table></div>';
            var html = '<div style="overflow:auto;height: 275px;" id="bb"><table class="table table-bordered table-responsive" ><tbody class="report-history-tbody" style="overflow: auto;height: 100%;background-color: rgba(9, 25, 57, 0.85)">'
            for (var i = 0; i < history.length; i++) {
              if (!history[i].name) {
                history[i].name = "";
              }
              html += '<tr ondblclick="selectDispatch(this)"  data="' + history[i].dispatchId + '" dataname="' + history[i].name + '">';
              html += '<td width="61px">' + (i + 1) + '</td>';
              html += '<td width="240px">' + moment(history[i].updatetime).format('YYYY[-]MM[-]DD HH:mm:ss') + '</td>';
              html += '<td width="133px">' + history[i].name + '</td>';
              html += '</tr>';
            }
            html += "</tbody></table></div>";
            $('#calculation-results-content').html(htmlHead + html)
          }
          $("#aa  table").children("thead").find("th").each(function () {
            var idx = $(this).index();
            var td = $('#bb table').children('tbody').children('tr:first').children('td').eq(idx);
            if (idx == 0) {
              $(this).width(td.width());
            }
            if (idx == 1) {
              $(this).width(td.width());
            }
            if ($('#bb table').children('tbody').height() > 275) {
              if (idx == 2) {
                $(this).width(td.width() + 8);
              }
            } else {
              if (idx == 2) {
                $(this).width(td.width());
              }
            }

          })
        })
        break;
      default:
        break;
    }
  });
}

var myWindow;
var checkedIndex = -1;

//初始化模拟调度窗口
function initSimulationWindow(simulation, dispatchWindow, btn) {
  //console.log(simulation);
  if (!myWindow)
    myWindow = new MyWindow($("#dispatch-simulation-catalog"), {
      title: "调度控制参数",
      zIndex: 90,
      width: 885,
      height: 480,
      isMax: false
    });//模拟调度
  myWindow.setTitle("模拟调度-控制参数");
  myWindow.show();

  //$("#dispatch-simulation-left-table").bootstrapTable('removeAll');
  var tableData = new Array(), columns, num = 1, rainTable = new Array();
  columns = [
    {
      field: 'num',
      title: '序号',
      align: "center"
    }, {
      field: 'name',
      title: '区域',
      align: "center"
    }, {
      field: 'fViews',
      title: '降水模拟',
      align: "center"
    }, {
      field: 'hViews',
      title: '开始时间',
      align: "center"
    }
  ];
  if (checkedIndex < 0 || checkedIndex > simulation.length) {
    checkedIndex = 0;
    getDispatchDefaultQuantity(myWindow, simulation[checkedIndex].dpCode);
  }
  simulation[checkedIndex].nodes.forEach(function (val, index, arr) {
    var _fIndex = -1, _fValue = -1, _rIndex, _rInterval = 1, _rValue, _hIndex = -1, _hValue = -1.0;
    try {
      _fIndex = val.fIndex;
      _fValue = val.fValue;
      _hIndex = val.hIndex;
      _hValue = val.hValue;
      if (_hIndex >= 0 && _hIndex < simulation[checkedIndex].hoursOfFloods.length) {
        _hValue = simulation[checkedIndex].hoursOfFloods[_hIndex];
      } else if (val.fValue > 0) {
        _hValue = val.hValue;
      } else {
        _hValue = 1;
      }
      if (val.dpType == 1) {
        _rIndex = val.rIndex;
        if (val.rIndex >= 0 && val.rIndex < simulation[selectedIndex].rainIndex.length) {
          _rValue = simulation[selectedIndex].rainIndex[val.rIndex].rainValue;
          _rInterval = simulation[selectedIndex].rainIndex[val.rIndex].hour;
        } else if (val.rValue != null && val.rValue.indexOf(",") != -1) {
          var rValueString = val.rValue;
          _rInterval = Number(rValueString.split(",")[0])
          _rValue = Number(rValueString.split(",")[1])
        } else {
          _rInterval = 1
          _rValue = 50.0;
        }
      } else if (val.dpType == 0) {
        if (_fIndex >= 0 && _fIndex < simulation[checkedIndex].frequencyList.length) {
          _fValue = simulation[checkedIndex].frequencyList[_fIndex];
        } else if (val.fValue > 0) {
          _fValue = val.fValue;
        } else {
          _fValue = 100;
        }
      }
    } catch (e) {
    }
    if (val.dpType == 0) {
      tableData.push({
        num: num,
        id: val.id,
        name: val.name,
        dpType: val.dpType,
        fViews: _fValue + '年一遇',
        fIndex: _fIndex,
        fValue: _fValue,
        hViews: _hValue + '小时后',
        hIndex: _hIndex,
        hValue: _hValue,
        rIndex: -1,
        _rInterval: -1,
        rValue: -1
      });
      num++;
    } else if (val.dpType == 1) {
      tableData.push({
        num: num,
        id: val.id,
        name: val.name,
        dpType: val.dpType,
        fIndex: -1,
        fValue: -1,
        hViews: _hValue + '小时后',
        hIndex: _hIndex,
        hValue: _hValue,
        rIndex: _rIndex,
        _rInterval: _rInterval,
        rValue: _rValue,
        fViews: _rInterval + '小时' + _rValue + '毫米'
      });
      num++;
    }
  });

  $("#dispatch-simulation-left-table").bootstrapTable({
    columns: columns,
    data: tableData
  });

  $('#dispatch-simulation-left-table').on('click-cell.bs.table', function (event, field, value, row) {
    //console.log(field)
    var dpCode = $('#simulation-catalog-option select').val();
    var selectedIndex = checkedIndex;
    var selectType = row.dpType;
    var columnIndex = 2;
    if (field == 'fViews') {
      columnIndex = 2
    } else if (field == 'hViews') {
      columnIndex = 3;
    }
    MyLayer.showRadioList({
      data: simulation[selectedIndex],
      selectType: selectType,
      columnIndex: columnIndex,
      defalutPara: row,
      title: row.name + '参数选择'
    }, function (_data) {
      var arr, selectedIndex = checkedIndex;
      if (columnIndex == 2) {
        if (selectType == 0) {
          if (_data && _data.fIndex && _data.fValue) {
            row.fIndex = _data.fIndex;
            row.fValue = _data.fIndex == simulation[selectedIndex].frequencyList.length ? _data.fValue : -1;
            row.fViews = _data.fValue + "年一遇";
            if (_data.choose == 1)
              $('#dispatch-simulation-left-table').bootstrapTable('updateRow', {
                index: row.num - 1,
                row: row
              });
            else {
              var tbData = $('#dispatch-simulation-left-table').bootstrapTable('getData');
              tbData.forEach(function (val, index, arr) {
                val.fIndex = _data.fIndex;
                val.fValue = _data.fIndex == simulation[selectedIndex].frequencyList.length ? _data.fValue : -1;
                val.fViews = _data.fValue + "年一遇";
              });
              $('#dispatch-simulation-left-table').bootstrapTable('updateRow', tbData);
            }
          }
        } else if (selectType == 1) {
          if (_data && _data.rIndex && _data.rValue) {
            row.rIndex = _data.rIndex;
            row.rInterval = _data.rIndex == simulation[selectedIndex].rainIndex.length ? _data.rInterval : -1;
            row.rValue = _data.rIndex == simulation[selectedIndex].rainIndex.length ? _data.rValue : -1;
            row.fViews = _data.rInterval + '小时' + _data.rValue + '毫米';
            if (_data.choose == 1)
              $('#dispatch-simulation-left-table').bootstrapTable('updateRow', {
                index: row.num - 1,
                row: row
              });
            else {
              var tbData = $('#dispatch-simulation-left-table').bootstrapTable('getData');
              tbData.forEach(function (val, index, arr) {
                val.rIndex = _data.rIndex;
                val.rInterval = _data.rIndex == simulation[selectedIndex].rainIndex.length ? _data.rInterval : -1;
                val.rValue = _data.rIndex == simulation[selectedIndex].rainIndex.length ? _data.rValue : -1;
                val.fViews = _data.rInterval + '小时' + _data.rValue + '毫米';
              });
              $('#dispatch-simulation-left-table').bootstrapTable('load', tbData);
            }
          }
        }
      } else if (columnIndex == 3) {
        if (_data && _data.hIndex && _data.hValue) {
          row.hIndex = _data.hIndex;
          row.hValue = _data.hIndex == simulation[selectedIndex].hoursOfFloods.length ? _data.hValue : -1;
          row.hViews = _data.hValue + "小时后";
          if (_data.choose == 1)
            $('#dispatch-simulation-left-table').bootstrapTable('updateRow', {
              index: row.num - 1,
              row: row
            });
          else {
            var tbData = $('#dispatch-simulation-left-table').bootstrapTable('getData');
            tbData.forEach(function (val, index, arr) {
              val.hIndex = _data.hIndex;
              val.hValue = _data.hIndex == simulation[selectedIndex].hoursOfFloods.length ? _data.hValue : -1;
              val.hViews = _data.hValue + "小时后";
            });
            $('#dispatch-simulation-left-table').bootstrapTable('updateRow', tbData);
          }
        }
      }
    })
  });

  $('#simulation-catalog-option select').change(function () {
    var dpCode = $(this).val();
    $('#table').bootstrapTable('removeAll');
    getDispatchDefaultQuantity(myWindow, dpCode);
    var selectedIndex = 0;
    for (var i = 0; i < simulation.length; i++) {
      if (simulation[i].dpCode == dpCode) {
        selectedIndex = i;
        checkedIndex = i;
        break;
      }
    }
    var selectedType = simulation[selectedIndex].nodes[0].dpType;
    tableData = new Array();
    num = 1;
    simulation[selectedIndex].nodes.forEach(function (val, index, arr) {
      var _fIndex = -1, _fValue = -1, _rIndex = -1, _rInterval = -1, _rValue = -1, _hIndex = -1, _hValue = -1.0;
      try {
        _fIndex = val.fIndex;
        _fValue = val.fValue;
        _rIndex = val.rIndex;
        _rValue = val.rValue;
        _hIndex = val.hIndex;
        _hValue = val.hValue;
        if (_fIndex >= 0 && _fIndex < simulation[selectedIndex].hoursOfFloods.length) {
          _hValue = simulation[selectedIndex].hoursOfFloods[_hIndex];
        } else if (val.fValue > 0) {
          _hValue = val.hValue;
        } else {
          _hValue = 1;
        }
        if (selectedType == 0) {
          if (_fIndex >= 0 && _fIndex < simulation[selectedIndex].frequencyList.length) {
            _fValue = simulation[selectedIndex].frequencyList[_fIndex];
          } else if (val.fValue > 0) {
            _fValue = val.fValue;
          } else {
            _fValue = 100;
          }
        } else if (selectedType == 1) {
          _rIndex = val.rIndex;
          if (val.rIndex >= 0 && val.rIndex < simulation[selectedIndex].rainIndex.length) {
            _rValue = simulation[selectedIndex].rainIndex[val.rIndex].rainValue;
            _rInterval = simulation[selectedIndex].rainIndex[val.rIndex].hour;
          } else if (val.rValue != null && val.rValue.indexOf(",") != -1) {
            var rValueString = val.rValue;
            _rInterval = Number(rValueString.split(",")[0])
            _rValue = Number(rValueString.split(",")[1])
          } else {
            _rInterval = 1
            _rValue = 50.0;
          }
        }
      } catch (e) {
      }
      if (selectedType == 0) {
        tableData.push({
          num: num,
          id: val.id,
          name: val.name,
          dpType: val.dpType,
          fViews: _fValue + '年一遇',
          fIndex: _fIndex,
          fValue: _fValue,
          hViews: _hValue + '小时后',
          hIndex: _hIndex,
          hValue: _hValue,
          rIndex: -1,
          rInterval: -1,
          rValue: -1
        });
        num++;
      } else {
        tableData.push({
          num: num,
          id: val.id,
          name: val.name,
          dpType: val.dpType,
          fIndex: -1,
          fValue: -1,
          hViews: _hValue + '小时后',
          hIndex: _hIndex,
          hValue: _hValue,
          rIndex: _rIndex,
          rInterval: _rInterval,
          rValue: _rValue,
          fViews: _rInterval + '小时' + _rValue + '毫米'
        });
        num++;
      }
    });
    $('#dispatch-simulation-left-table').bootstrapTable('load', tableData);
  });

  myWindow.body.find('button').unbind('click').bind('click', function () {
    var selectedIndex = checkedIndex;
    var param = {};
    var tbData = $('#dispatch-simulation-left-table').bootstrapTable('getData');
    var arr = new Array();
    for (var i = 0; i < tbData.length > 0; i++) {
      var _rValue = "";
      if (tbData[i].dpType == 1) {
        if (tbData[i].rIndex == -1 || tbData[i].rIndex == simulation[selectedIndex].rainIndex.length) {
          _rValue = tbData[i].rInterval + "," + tbData[i].rValue
        }
      }
      arr.push({
        id: tbData[i].id,
        name: null,
        dpType: tbData[i].dpType,
        fIndex: tbData[i].fIndex,
        fValue: tbData[i].fIndex == simulation[selectedIndex].frequencyList.length ? tbData[i].fValue : -1,
        rIndex: tbData[i].rIndex,
        rValue: _rValue,
        hIndex: tbData[i].hIndex,
        hValue: tbData[i].hIndex == simulation[selectedIndex].hoursOfFloods.length ? tbData[i].hValue : -1,
        initStage: 0.0
      });
    }
    param.simulation = arr;
    param.dpIndex = getDpIndex(myWindow);
    var checkHongDongData;
    if ($("#check-hong-dong").prop("checked")) {
      checkHongDongData = true;
    } else {
      checkHongDongData = false;
    }
    param.enabled = checkHongDongData;
    initDispatchData(3, dispatchWindow, param);
    initPlayButton();
    $("#union-dispatch-button button[value='7']").css("display", "none");
    $("#union-dispatch-button button[value='8']").css("display", "none");
    $("#union-dispatch-button button[value='9']").css("display", "block");
    $("#union-dispatch-button button[value='10']").css("display", "none");
    $("#union-dispatch-button button[value='11']").css("display", "none");
    $("#union-dispatch-button button[value='12']").css("display", "block");
    $("#union-dispatch-button button[value='13']").css("display", "block");
    myWindow.hide();
    initOptimizationWindow();
  });
}

var reservoirList, riverList;
var curves = new Array();

function getDispatchDefaultQuantity(win, code) {
  ajaxCallJson({nodeType: Number(code)}, '/dispatch/getDispatchDefaultQuantity', function (_data) {
    if (_data && _data.flag && _data.data) {
      var html = '';
      reservoirList = _data.data.reservoir || [];
      for (var i = 0; i < reservoirList.length; i++) {
        //html+='<tr class="'+reservoirList[i].id+'"><td>'+reservoirList[i].name+'</td><td><input onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: inherit" value="'+reservoirList[i].maxStage+' " name="maxStage"></td><td><input onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: inherit" value=" '+reservoirList[i].maxQuantity+'" name="maxQuantity"></td><td><input onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: inherit" value=" '+reservoirList[i].initStage+'" name="initStage"></td></tr>'
        html += '<tr class="' + reservoirList[i].id + '">';
        html += '<td>' + reservoirList[i].name + '</td>';
        html += '<td><input onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: transparent" value="' + reservoirList[i].maxStage + ' " name="maxStage"></td>';
        html += '<td><input onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: transparent" value=" ' + reservoirList[i].maxQuantity + '" name="maxQuantity"></td>';
        html += '<td><input onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: transparent" value=" ' + (reservoirList[i].initStage == 0 ? "" : reservoirList[i].initStage) + '" name="initStage"></td>';
        html += '<td><input onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: transparent" value=" ' + (reservoirList[i].endStage == 0 ? "" : reservoirList[i].endStage) + '" name="endStage"></td>';
        html += '</tr>'
      }
      win.body.find('.simulation-reservoir-table-body').html(html);
      win.body.find('.simulation-reservoir-table').css("width", "100%");
      html = '';
      riverList = _data.data.down || [];
      for (var i = 0; i < riverList.length; i++) {
        //html+='<tr class="'+riverList[i].id+'"><td>'+riverList[i].name+'</td><td><input onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: inherit"  value="'+riverList[i].maxStage+'" name="maxStage"></td><td><input onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: inherit"  value="'+riverList[i].maxQuantity+'" name="maxQuantity"></td>';
        var id = riverList[i].id;
        html += '<tr class="' + id + '">';
        html += '<td>' + riverList[i].name + '</td>';
        html += '<td><input id="' + id + '@z' + i + '" onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: transparent"  value="' + riverList[i].maxStage + '" name="maxStage"></td>';
        html += '<td><input id="' + id + '@q' + i + '" onblur="changeInputValue(this)" style="width: 100%;height: 100%;border: none;background-color: transparent"  value="' + riverList[i].maxQuantity + '" name="maxQuantity"></td>';
        html += '</tr>';
        var flag = false;
        if (curves != null && curves.length > 0) {
          for (var j = 0; j < curves.length; j++) {
            if (curves[j].id != id)
              continue;
            flag = true;
            break;
          }
        }
        if (!flag) {
          ajaxCallJson({"mocd": id}, '/floodSituation/river/rating/curve', function (_data) {
            if (_data && _data.data != null) {
              var curve = {
                id: id,
                data: _data.data
              };
              curves.push(curve);
            }
          });
        }
      }
      win.body.find('.simulation-river-table-body').html(html);
      win.body.find('.simulation-river-table').css("width", "100%");
    }
  });
}

function getDpIndex(win) {
  var dpIndex = new Array();
  for (var i = 0; i < reservoirList.length; i++) {
    var obj = {};
    obj.nodeId = reservoirList[i].id;
    obj.nodeName = reservoirList[i].name;
    obj.priority = reservoirList[i].priority;
    obj.regulationMode = reservoirList[i].regulationMode;
    obj.maxStage = win.body.find('.' + reservoirList[i].id + ' input[name="maxStage"]').val();
    obj.maxQuantity = win.body.find('.' + reservoirList[i].id + ' input[name="maxQuantity"]').val();
    obj.endStage = win.body.find('.' + reservoirList[i].id + ' input[name="endStage"]').val();
    var initStage = win.body.find('.' + reservoirList[i].id + ' input[name="initStage"]').val();
    if (obj.maxStage)
      obj.maxStage = Number(obj.maxStage);
    if (obj.maxQuantity)
      obj.maxQuantity = Number(obj.maxQuantity);
    if (initStage && Number(initStage) > 0)
      obj.initStage = Number(initStage);
    dpIndex.push(obj);
  }
  for (var i = 0; i < riverList.length; i++) {
    var obj = {};
    obj.nodeId = riverList[i].id;
    obj.nodeName = riverList[i].name;
    obj.priority = riverList[i].priority;
    obj.regulationMode = riverList[i].regulationMode;
    obj.maxStage = win.body.find('.' + riverList[i].id + ' input[name="maxStage"]').val();
    obj.maxQuantity = win.body.find('.' + riverList[i].id + ' input[name="maxQuantity"]').val();
    if (obj.maxStage)
      obj.maxStage = Number(obj.maxStage);
    if (obj.maxQuantity)
      obj.maxQuantity = Number(obj.maxQuantity);
    dpIndex.push(obj);
  }
  return dpIndex;
}

function changeInputValue(node) {
  var dom = $(node);
  var name = node.name;
  var id = node.id;
  id = id.substr(0, id.indexOf('@'));
  var val = dom.val(), _val = 0.0;
  dom.attr("value", val);
  if (curves != null && curves.length > 0) {
    var x_arrs = [];
    var y_arrs = [];
    for (var i = 0; i < curves.length; i++) {
      if (curves[i].id != id)
        continue;
      x_arrs = curves[i].data.q;
      y_arrs = curves[i].data.z;
      break;
    }
    var inputs = myWindow.body.find('.' + id + ' input');
    _val = TreeInterpolations(x_arrs, y_arrs, parseFloat(val), name == "maxStage" ? 1 : 2);
    id = node.id;
    for (var i = 0; i < inputs.length; i++) {
      if (inputs[i].id == id)
        continue;
      if (inputs[i].id != id.replace("@" + (name == "maxStage" ? "z" : "q"), "@" + (name == "maxStage" ? "q" : "z")))
        continue;
      $(inputs[i]).val(_val);
      $(inputs[i]).text(_val);
      break;
    }
  }
}

function resizeDispatchContent() {
  var totalHeight = $('#union-dispatch').height();
  var buttonHeight = $('#union-dispatch-button').height();
  $('#union-dispatch-content').css("height", totalHeight - buttonHeight + "px")
}

$(window).resize(function () {
  resizeDispatchContent();
});
//放大相关图表
var enlargeDispatchChart = function (Class) {
  if (!Class) {
    return;
  }
  var myWindow;
  var data;
  switch (Class) {
    case "dispatch-union-chart":
      myWindow = new MyWindow($("#enlarge-dispatch-data-window"), {
        title: "联合调度图",
        isRestore: false,
        zIndex: 100,
        closeIcon: "images/window/window-restore.png"
      });
      myWindow.maximie();
      myWindow.show();
      $('#enlarge-dispatch-view').hide();
      createDispatchMapMaxChart("enlarge-dispatch-data-window", dispatchMapChartParamList);
      break;
    case "dispatch-flood-process":  //松柏山水库
      myWindow = new MyWindow($("#enlarge-pine-mountain-window"), {
        title: "松柏山水库-水库调度",
        isRestore: false,
        zIndex: 100,
        closeIcon: "images/window/window-restore.png"
      });
      myWindow.maximie();
      myWindow.show();
      for (var i = 0; i < dispatchReservoirData.length; i++) {
        if (dispatchReservoirData[i].title.indexOf('松柏山') != -1) {
          data = dispatchReservoirData[i];
          break
        }
      }
      $('#enlarge-pine-mountain-view').show();
      $('#enlarge-pine-mountain-chart').css("width", "100%").css("height", "98%");
      $('#enlarge-pine-mountain-table').html('<table id="enlarge-pine-mountain-table-content" ></table>');
      $('#enlarge-pine-mountain-table').hide();
      $('#enlarge-pine-mountain-view').html();
      $('#enlarge-pine-mountain-view').html('<img src="/images/data-table.png"  class="data-table" style="margin-top: -40px" title="数据图表" >');
      myWindow.body.find('.chart-container').show();
      data.isShowTitle = false;
      data.isShowToolbox = true;
      data.id = "enlarge-pine-mountain-chart";
      data.tableId = "enlarge-pine-mountain-table-content";
      resizeChartContainerSize(myWindow)
      var th = getMoniterClickTableHeight(myWindow);
      data.tableHeight = th;
      initReservoirDispatchChart(data, myWindow);
      myWindow.body.find('.export-excel').hide();
      $("#enlarge-pine-mountain-view").css("margin-top", "20px");
      $('#enlarge-pine-mountain-view').unbind('click').bind('click', function () {
        if ($('#enlarge-pine-mountain-view').attr('flag') == "chart") {
          $("#enlarge-pine-mountain-view").css("margin-top", "5px");
          $('#enlarge-pine-mountain-view').attr('flag', "table");
          myWindow.body.find('.chart-container').hide();
          $('#enlarge-pine-mountain-table').show();
          myWindow.body.find('.export-excel').show();
          myWindow.body.find('.export-excel').html('<a href="/floodSituation/dispatch/data?mocd=' + data.nodeId + '"><img src="/images/icon/export.png"  title="导出excel" ></a>');
          $('#enlarge-pine-mountain-view').html('<img src="/images/data-chart.png"  class="data-table" style="margin-top: -80px" title="数据图表" >');
        } else {
          $('#enlarge-pine-mountain-view').attr('flag', "chart");
          $("#enlarge-pine-mountain-view").css("margin-top", "20px");
          myWindow.body.find('.chart-container').show();
          myWindow.body.find('.export-excel').hide();
          $('#enlarge-pine-mountain-chart').css("width", "100%").css("height", "98%");
          $('#enlarge-pine-mountain-table').hide();
          $('#enlarge-pine-mountain-view').html('<img src="/images/data-table.png"  class="data-table" style="margin-top: -40px" title="数据表格" >');
          resizeChart();
        }
      });
      break;
    case "dispatch-water-process":  //花溪水库
      myWindow = new MyWindow($("#enlarge-huaxi-mountain-window"), {
        title: "花溪水库-水库调度",
        isRestore: false,
        zIndex: 100,
        closeIcon: "images/window/window-restore.png"
      });
      myWindow.maximie();
      myWindow.show();
      for (var i = 0; i < dispatchReservoirData.length; i++) {
        if (dispatchReservoirData[i].title.indexOf('花溪') != -1) {
          data = dispatchReservoirData[i];
          break;
        }
      }
      $('#enlarge-huaxi-mountain-view').show();
      $('#enlarge-huaxi-mountain-chart').css("width", "100%").css("height", "98%");
      $('#enlarge-huaxi-mountain-table').html('<table id="enlarge-huaxi-mountain-table-content" ></table>');
      $('#enlarge-huaxi-mountain-table').hide();
      $('#enlarge-huaxi-mountain-view').html();
      myWindow.body.find('.chart-container').show();
      data.isShowTitle = false;
      data.isShowToolbox = true;
      data.tableId = "enlarge-huaxi-mountain-table-content";
      resizeChartContainerSize(myWindow)
      var th = getMoniterClickTableHeight(myWindow);
      data.tableHeight = th;
      data.id = "enlarge-huaxi-mountain-chart";
      data.isShowTitle = false;
      initReservoirDispatchChart(data, myWindow);
      myWindow.body.find('.export-excel').hide();
      $('#enlarge-huaxi-mountain-view').html();
      $("#enlarge-huaxi-mountain-view").css("margin-top", "20px");
      $('#enlarge-huaxi-mountain-view').html('<img src="/images/data-table.png"  class="data-table" style="margin-top: -40px" title="数据图表" >');
      $('#enlarge-huaxi-mountain-view').unbind('click').bind('click', function () {
        if ($('#enlarge-huaxi-mountain-view').attr('flag') == "chart") {
          $('#enlarge-huaxi-mountain-view').attr('flag', "table");
          $("#enlarge-huaxi-mountain-view").css("margin-top", "5px");
          myWindow.body.find('.chart-container').hide();
          $('#enlarge-huaxi-mountain-table').show();
          myWindow.body.find('.export-excel').show();
          myWindow.body.find('.export-excel').html('<a href="/floodSituation/dispatch/data?mocd=' + data.nodeId + '"><img src="/images/icon/export.png"  title="导出excel" ></a>');
          $('#enlarge-huaxi-mountain-view').html('<img src="/images/data-chart.png"  class="data-table" style="margin-top: -80px" title="数据图表" >');
        } else {
          $('#enlarge-huaxi-mountain-view').attr('flag', "chart");
          $("#enlarge-huaxi-mountain-view").css("margin-top", "20px");
          myWindow.body.find('.chart-container').show();
          myWindow.body.find('.export-excel').hide();
          $('#enlarge-huaxi-mountain-chart').css("width", "100%").css("height", "98%");
          $('#enlarge-huaxi-mountain-table').hide();
          $('#enlarge-huaxi-mountain-view').html('<img src="/images/data-table.png"  class="data-table" style="margin-top: -40px" title="数据表格" >');
          resizeChart();
        }
      })

      break;
    case "dispatch-rain-process":   //区域洪水过程线
      myWindow = new MyWindow($("#enlarge-dispatch-window"), {
        title: "区域洪水过程线",
        isRestore: false,
        zIndex: 100,
        closeIcon: "images/window/window-restore.png"
      });
      myWindow.maximie();
      myWindow.show();
      $('#enlarge-dispatch-view').show();
      $('#enlarge-dispatch-chart').css("width", "100%").css("height", "98%");
      $('#enlarge-dispatch-table').hide();
      $('#enlarge-dispatch-view').html();
      $('#enlarge-dispatch-view').html('<img src="/images/data-table.png"  class="data-table" style="margin-top: -40px" title="数据图表" >');
      myWindow.body.find('.chart-container').show();
      myWindow.body.find('.export-excel').hide();
      dispatchSectionInFlow.isShowToolbox = true;
      createReservoirOutFlowAndWaterChart('enlarge-dispatch-chart', dispatchSectionInFlow, dispatchSectionWater, 1);
      $('#enlarge-dispatch-table').html('<table id="enlarge-dispatch-table-content" ></table>');
      var clickTableHeight = getMoniterClickTableHeight(myWindow);
      var tableData = [];
      //for(var j=0;j<dispatchSectionInFlow.data.length;j++){
      for (var i = 0; i < dispatchSectionInFlow.tm.length; i++) {
        var temp = {};
        temp.id = i + 1;
        temp.hxqjrlll = dispatchSectionInFlow.data[0].value[i];
        temp.xhhInFlow = dispatchSectionInFlow.data[1].value[i];
        temp.gchforeOutFlow = dispatchSectionInFlow.data[2].value[i];
        if (dispatchSectionInFlow.data[3]) {
          temp.sxhforeWater = dispatchSectionInFlow.data[3].value[i];
        }
        temp.hxqjrlsw = dispatchSectionWater.data[0].value[i];
        temp.xhhWater = dispatchSectionWater.data[1].value[i];
        temp.gchWater = dispatchSectionWater.data[2].value[i];
        if (dispatchSectionWater.data[3]) {
          temp.sxhWater = dispatchSectionWater.data[3].value[i];
        }
        tableData.push(temp);
        //}
      }

      var columns = [
        {
          field: 'id',
          title: '序号',
          align: 'center'
        },
        {
          field: 'hxqjrlll',
          title: '花溪水库区间流量(m³/s)',
          align: 'center'
        },
        {
          field: 'xhhInFlow',
          title: '小黄河流量(m³/s)',
          align: 'center'
        }, {
          field: 'gchforeOutFlow',
          title: '贯城河流量(m³/s)',
          align: 'center'
        }, {
          field: 'sxhforeWater',
          title: '市西河流量(m³/s)',
          align: 'center'
        }, {
          field: 'hxqjrlsw',
          title: '花溪水库区间水位(m)',
          align: 'center'
        },
        {
          field: 'xhhWater',
          title: '小黄河水位(m)',
          align: 'center'
        }, {
          field: 'gchWater',
          title: '贯城河水位(m)',
          align: 'center'
        }, {
          field: 'sxhWater',
          title: '市西河水位(m)',
          align: 'center'
        },
      ];
      var params = {
        id: 'enlarge-dispatch-table-content',
        height: clickTableHeight,
        data: tableData,
        columns: columns,
      };
      createChartTable(params, myWindow);
      $('#enlarge-dispatch-view').css("margin-top", "20px");
      $('#enlarge-dispatch-view').unbind('click').bind('click', function () {
        if ($('#enlarge-dispatch-view').attr('flag') == "chart") {
          $('#enlarge-dispatch-view').css("margin-top", "5px");
          $('#enlarge-dispatch-view').attr('flag', "table");
          myWindow.body.find('.chart-container').hide();
          $('#enlarge-dispatch-table').show();
          myWindow.body.find('.export-excel').show();
          var param = {}
          myWindow.body.find('.export-excel').html('<a href="/dispatch/getCurrentData/excel?param=' + param + '"><img src="/images/icon/export.png"  title="导出excel" ></a>');
          $('#enlarge-dispatch-view').html('<img src="/images/data-chart.png"  class="data-table" style="margin-top: -80px" title="数据图表" >');
        } else {
          $('#enlarge-dispatch-view').attr('flag', "chart");
          $('#enlarge-dispatch-view').css("margin-top", "20px");
          myWindow.body.find('.chart-container').show();
          myWindow.body.find('.export-excel').hide();
          $('#enlarge-dispatch-table').hide();
          $('#enlarge-dispatch-view').html('<img src="/images/data-table.png"  class="data-table" style="margin-top: -40px" title="数据表格" >');
          resizeChart();
        }
      });
      break;
    case "dispatch-area-flood":  //下游河道
      myWindow = new MyWindow($("#enlarge-downstream-channel-window"), {
        title: "下游河道洪水过程线",
        isRestore: false,
        zIndex: 100,
        closeIcon: "images/window/window-restore.png"
      });
      myWindow.maximie();
      myWindow.show();
      $('#enlarge-downstream-channel-view').show();
      $('#enlarge-downstream-channel-chart').css("width", "100%").css("height", "98%");
      $('#enlarge-downstream-channel-table').html('<table id="enlarge-downstream-channel-table-content" ></table>');
      $('#enlarge-downstream-channel-table').hide();
      myWindow.body.find('.chart-container').show();
      myWindow.body.find('.export-excel').hide();
      $('#enlarge-downstream-channel-view').html();
      dispatchDownInFlow.isShowToolbox = true;
      $('#enlarge-downstream-channel-view').html('<img src="/images/data-table.png" style="margin-top: -40px"  class="data-table" title="数据表格" >');
      createReservoirOutFlowAndWaterChart('enlarge-downstream-channel-chart', dispatchDownInFlow, dispatchDownWater, 1);
      resizeChartContainerSize(myWindow);
      var clickTableHeight = getMoniterClickTableHeight(myWindow);
      var tableData = [];
      //for(var j=0;j<dispatchSectionInFlow.data.length;j++){
      for (var i = 0; i < dispatchDownInFlow.tm.length; i++) {
        var temp = {};
        temp.id = i + 1;
        temp.jxlll = dispatchDownInFlow.data[0].value[i];
        temp.xhpjll = dispatchDownInFlow.data[1].value[i];
        temp.xchll = dispatchDownInFlow.data[2].value[i];
        temp.slhtll = dispatchDownInFlow.data[3].value[i];
        temp.gysll = dispatchDownInFlow.data[4].value[i];
        temp.hyqll = dispatchDownInFlow.data[5].value[i];
        temp.jxlWater = dispatchDownWater.data[0].value[i];
        temp.xhpqWater = dispatchDownWater.data[1].value[i];
        temp.xchWater = dispatchDownWater.data[2].value[i];
        temp.slhtWater = dispatchDownWater.data[3].value[i];
        temp.gysWater = dispatchDownWater.data[4].value[i];
        temp.hyqWater = dispatchDownWater.data[5].value[i];
        tableData.push(temp);
        //}
      }

      var columns = [
        {
          field: 'id',
          title: '序号',
          align: 'center'
        },
        {
          field: 'jxlll',
          title: '甲秀楼流量(m³/s)',
          align: 'center'
        },
        {
          field: 'xhpjll',
          title: '小河平桥流量(m³/s)',
          align: 'center'
        }, {
          field: 'xchll',
          title: '小车河流量(m³/s)',
          align: 'center'
        }, {
          field: 'slhtll',
          title: '十里河滩流量(m³/s)',
          align: 'center'
        }, {
          field: 'gysll',
          title: '贵阳(三)流量(m³/s)',
          align: 'center'
        },
        {
          field: 'hyqll',
          title: '红岩桥流量(m³/s)',
          align: 'center'
        }, {
          field: 'slhtWater',
          title: '十里河滩水位(m)',
          align: 'center'
        }, {
          field: 'xhpqWater',
          title: '小河平桥水位(m)',
          align: 'center'
        }, {
          field: 'xchWater',
          title: '小车河水位(m)',
          align: 'center'
        }, {
          field: 'jxlWater',
          title: '甲秀楼水位(m)',
          align: 'center'
        }, {
          field: 'gysWater',
          title: '贵阳(三)(m)',
          align: 'center'
        }, {
          field: 'hyqWater',
          title: '红岩桥水位(m)',
          align: 'center'
        },
      ];
      var params = {
        id: 'enlarge-downstream-channel-table-content',
        height: clickTableHeight,
        data: tableData,
        columns: columns,
      };
      createChartTable(params, myWindow);
      var param = {};
      $('#enlarge-downstream-channel-view').css("margin-top", "20px");
      $('#enlarge-downstream-channel-view').unbind('click').bind('click', function () {
        if ($('#enlarge-downstream-channel-view').attr('flag') == "chart") {
          $('#enlarge-downstream-channel-view').attr('flag', "table");
          $('#enlarge-downstream-channel-view').css("margin-top", "5px");
          myWindow.body.find('.chart-container').hide();
          $('#enlarge-downstream-channel-table').show();
          myWindow.body.find('.export-excel').show();
          myWindow.body.find('.export-excel').html('<a href="/dispatch/getCurrentData/downstream/excel?param=' + param + '"><img src="/images/icon/export.png"  title="导出excel" ></a>');
          $('#enlarge-downstream-channel-view').html('<img src="/images/data-chart.png"  class="data-table" style="margin-top: -80px" title="数据图表" >');
        } else {
          $('#enlarge-downstream-channel-view').attr('flag', "chart");
          $('#enlarge-downstream-channel-view').css("margin-top", "20px");
          myWindow.body.find('.chart-container').show();
          $('#enlarge-downstream-channel-table').hide();
          myWindow.body.find('.export-excel').hide();
          $('#enlarge-downstream-channel-view').html('<img src="/images/data-table.png"  class="data-table" style="margin-top: -40px" title="数据表格" >');
          resizeChart();
        }
      });
      break;
    case "dispatch-downstream-flood": //阿哈水库
      myWindow = new MyWindow($("#enlarge-aha-mountain-window"), {
        title: "阿哈水库-水库调度",
        isRestore: false,
        zIndex: 100,
        closeIcon: "images/window/window-restore.png"
      });
      myWindow.maximie();
      myWindow.show();
      for (var i = 0; i < dispatchReservoirData.length; i++) {
        if (dispatchReservoirData[i].title.indexOf('阿哈') != -1) {
          data = dispatchReservoirData[i];
          break
        }
      }
      $('#enlarge-aha-mountain-view').show();
      $('#enlarge-aha-mountain-chart').css("width", "100%").css("height", "98%");
      $('#enlarge-aha-mountain-table').html('<table id="enlarge-aha-mountain-table-content" ></table>');
      $('#enlarge-aha-mountain-table').hide();
      $('#enlarge-aha-mountain-view').html();
      $('#enlarge-aha-mountain-view').html('<img src="/images/data-table.png"  class="data-table" style="margin-top: -40px" title="数据图表" >');
      myWindow.body.find('.chart-container').show();
      data.isShowTitle = false;
      data.isShowToolbox = true;
      data.tableId = "enlarge-aha-mountain-table-content";
      resizeChartContainerSize(myWindow)
      var th = getMoniterClickTableHeight(myWindow);
      data.tableHeight = th;
      data.id = "enlarge-aha-mountain-chart";
      data.isShowTitle = false;
      initReservoirDispatchChart(data, myWindow);
      myWindow.body.find('.export-excel').hide();
      $("#enlarge-aha-mountain-view").css("margin-top", "20px");
      $('#enlarge-aha-mountain-view').unbind('click').bind('click', function () {
        if ($('#enlarge-aha-mountain-view').attr('flag') == "chart") {
          $('#enlarge-aha-mountain-view').attr('flag', "table");
          $("#enlarge-aha-mountain-view").css("margin-top", "5px");
          myWindow.body.find('.chart-container').hide();
          $('#enlarge-aha-mountain-table').show();
          myWindow.body.find('.export-excel').show();
          myWindow.body.find('.export-excel').html('<a href="/floodSituation/dispatch/data?mocd=' + data.nodeId + '"><img src="/images/icon/export.png"  title="导出excel" ></a>');
          $('#enlarge-aha-mountain-view').html('<img src="/images/data-chart.png"  class="data-table" style="margin-top: -80px" title="数据图表" >');
        } else {
          $('#enlarge-aha-mountain-view').attr('flag', "chart");
          $("#enlarge-aha-mountain-view").css("margin-top", "20px");
          myWindow.body.find('.chart-container').show();
          myWindow.body.find('.export-excel').hide();
          $('#enlarge-aha-mountain-chart').css("width", "100%").css("height", "98%");
          $('#enlarge-aha-mountain-table').hide();
          $('#enlarge-aha-mountain-view').html('<img src="/images/data-table.png"  class="data-table" style="margin-top: -40px" title="数据表格" >');
          resizeChart();
        }
      })
      break;
  }
}

//播放
var dispatchInterval;

function playDispatchChart(dom) {
  var node = $(dom);
  var play = node.attr("play");
  if (play == "true") {
    node.html("暂停");
    node.attr("play", "false");
  } else {
    node.html("播放");
    node.attr("play", "true");
    clearInterval(dispatchInterval);
    return;
  }
  if (node.attr("first") == "true") {
    dispatchSectionChart.option.grid.top = parseInt(dispatchSectionChart.option.grid.top) + 10;
    dispatchSectionChart.option.grid.right = parseInt(dispatchSectionChart.option.grid.right) + 20;
    dispatchDownChart.option.grid.top = parseInt(dispatchDownChart.option.grid.top) + 10;
    dispatchDownChart.option.grid.right = parseInt(dispatchDownChart.option.grid.right) + 20;
    for (var i = 0; i < dispatchReservoirChart.length; i++) {
      dispatchReservoirChart[i].option.grid.top = parseInt(dispatchReservoirChart[i].option.grid.top) + 10;
      dispatchReservoirChart[i].option.grid.right = parseInt(dispatchReservoirChart[i].option.grid.right) + 20;
    }
    node.attr("first", "false");
  }
  var time = dispatchDownChart.option.xAxis[0].data;
  dispatchInterval = setInterval(function () {
    var currentTime = time[dispatchTimeIndex];
    dispatchDownChart.option = initDispatchChartMarkline(dispatchDownChart, currentTime);
    dispatchSectionChart.option = initDispatchChartMarkline(dispatchSectionChart, currentTime);
    for (var i = 0; i < dispatchReservoirChart.length; i++) {
      dispatchReservoirChart[i].option = initDispatchChartMarkline(dispatchReservoirChart[i], currentTime);
    }
    var reservoirData = new Array(), sectionData = new Array(), downData = new Array();
    for (var i = 0; i < dispatchReservoirData.length; i++) {
      var temp = {};
      temp.inQ = dispatchReservoirData[i].foreInFlow[dispatchTimeIndex];
      temp.OtQ = dispatchReservoirData[i].foreOutFlow[dispatchTimeIndex];
      temp.z = dispatchReservoirData[i].foreWater[dispatchTimeIndex];
      temp.nodeId = dispatchReservoirData[i].nodeId;
      temp.nodeName = dispatchReservoirData[i].title;
      reservoirData.push(temp)
    }
    for (var i = 0; i < dispatchSectionInFlow.data.length; i++) {
      var temp = {};
      temp.inQ = dispatchSectionInFlow.data[i].value[dispatchTimeIndex];
      temp.z = dispatchSectionWater.data[i].value[dispatchTimeIndex];
      temp.nodeId = dispatchSectionInFlow.data[i].nodeId;
      temp.nodeName = dispatchSectionInFlow.data[i].name;
      sectionData.push(temp)
    }
    for (var i = 0; i < dispatchDownInFlow.data.length; i++) {
      var temp = {};
      temp.inQ = dispatchDownInFlow.data[i].value[dispatchTimeIndex];
      temp.nodeId = dispatchDownInFlow.data[i].nodeId;
      temp.nodeName = dispatchDownInFlow.data[i].name;
      downData.push(temp)
    }
    updateDispatchMapChart({
      reservoirFlood: reservoirData,
      sectionFlood: sectionData,
      downFlood: downData
    });
    $('#union-dispatch-button .dispatch-current-time').html('当前时间：' + time[dispatchTimeIndex]);
    dispatchTimeIndex++;
    if (dispatchTimeIndex == time.length) {
      dispatchTimeIndex = 0;
    }
  }, 1500)

}

var initDispatchChartMarkline = function (obj, time) {
  var option = obj.option;
  var chart = obj.chart;
  for (var i = 0; i < option.series.length; i++) {
    if (option.series[i].markLine) {
      option.series[i].markLine.data[0][0].coord[0] = time;
      option.series[i].markLine.data[0][1].coord[0] = time;
      option.series[i].markLine.data[0][1].label.normal.formatter = time;
      option.series[i].markLine.data[0][1].lineStyle.normal.opacity = 1;
      option.series[i].markLine.data[0][1].label.normal.show = true;
    }
  }
  var op = chart.getOption();
  if (option.legend.selected) {
    option.legend.selected = op.legend[0].selected
  }
  chart.setOption(option);
  return option;
}

/**
 * @param {int} type 1:实时 2：历史 3：模拟
 * @param {myWindow} object
 * **/
function initDispatchData(type, myWindow, _param) {
  stopDispatchTimer();
  //$(".dispatch-message").text("测试");
  clearInterval(dispatchInterval);
  myWindow.body.find(".play-controller").attr("first", "true");
  var index;
  layui.use('layer', function () {
    var layer = layui.layer;
    index = layer.msg("数据加载中,请稍等...", {icon: 16, time: 3 * 1000000, skin: 'layer-ext-simulation'});
  });
  var param = {}, url = "",
    btn;
  if (_param)
    param = _param;
  if (type === 1) {
    url = "/dispatch/getCurrentData";
    btn = $($("#union-dispatch-button button")[0]);
  } else if (type === 2) {
    url = "/dispatch/getHistoryData";
    btn = $($("#union-dispatch-button button")[1]);
  } else if (type === 3) {
    url = "/dispatch/getSimulationData";
    btn = $($("#union-dispatch-button button")[2]);
  } else {
    console.error("没有类型:" + type + "业务");
    return;
  }
  ajaxCallJson(param, url, function (result) {
    if (!result) {
      layer.msg("水库联合调度暂无数据", {time: 1500});
      myWindow.hide();
      return;
    }
    //$("#union-dispatch-button button").css("background-color","rgba(25, 136, 211, 0.6)");
    btn.addClass("button-check-class");
    layer.close(index);
    if (type == 2 || type == 3 || (type == 1 && param && param.dpType && param.dpType == 1))
      startDispatchTimer();
    initDispatchDataDetail(myWindow, result);
  });


}

var initDispatchDataDetail = function (myWindow, result) {
  myWindow.show();
  resizeDispatchContent();
  if (!result) {
    return;
  }
  var data = result.data;
  if (!data) {
    return;
  }
  thisDispatchId = result.data.dispatchId;
  var time = data.tm;
  // dispatchRainData={
  //     tm:time,
  //     drp:data.rain,
  //     drps:data.rainx||[]
  // }
  // dispatchReservoirInFlow={
  //     tm:time,
  //     data:[]
  // }
  // dispatchReservoirOutFlow={
  //     tm:time,
  //     data:[]
  // };
  // dispatchReservoirWater={
  //     tm:time,
  //     data:[]
  // };
  dispatchSectionInFlow = {
    tm: time,
    data: []
  };
  dispatchSectionWater = {
    tm: time,
    data: []
  };
  dispatchDownInFlow = {
    tm: time,
    data: []
  };
  dispatchDownWater = {
    tm: time,
    data: []
  };
  var reservoirData = data.reservoirFlood || [];
  var sectionData = data.sectionFlood || [];
  var downData = data.downFlood || [];
  for (var i = 0; i < reservoirData.length; i++) {
    reservoirData[i].inFlow = deleteMoreDispathData(time, formatArrayData(reservoirData[i].inFlow));
    reservoirData[i].outFlow = deleteMoreDispathData(time, formatArrayData(reservoirData[i].outFlow));
    reservoirData[i].z = deleteMoreDispathData(time, formatArrayData(reservoirData[i].z));
    if (reservoirData[i].gateData && reservoirData[i].gateData.length > 0) {
      reservoirData[i].gateData.forEach(function (val) {
        val.fotq = deleteMoreDispathData(time, formatArrayData(val.fotq));
        val.rotq = deleteMoreDispathData(time, formatArrayData(val.rotq));
      })
    }
    // dispatchReservoirInFlow.data.push({
    //     nodeId:reservoirData[i].nodeId,
    //     nodeName:reservoirData[i].nodeName+"入库",
    //     name:reservoirData[i].nodeName,
    //     value:reservoirData[i].inFlow
    // });
    // dispatchReservoirOutFlow.data.push({
    //     nodeId:reservoirData[i].nodeId,
    //     nodeName:reservoirData[i].nodeName+"出库",
    //     name:reservoirData[i].nodeName,
    //     value:reservoirData[i].outFlow
    // });
    // dispatchReservoirWater.data.push({
    //     nodeId:reservoirData[i].nodeId,
    //     nodeName:reservoirData[i].nodeName+"水位",
    //     name:reservoirData[i].nodeName,
    //     value:reservoirData[i].z
    // })
    dispatchReservoirData[i] = {
      xData: time,
      foreInFlow: reservoirData[i].inFlow,
      foreOutFlow: reservoirData[i].outFlow,
      foreWater: reservoirData[i].z,
      title: reservoirData[i].nodeName,
      nodeId: reservoirData[i].nodeId,
      isShowTitle: true
    };
    //增加调度数据
    if (reservoirData[i].gateData && reservoirData[i].gateData.length > 0)
      dispatchReservoirData[i].gateCurveList = reservoirData[i].gateData;
    if (dispatchReservoirData[i].title.indexOf('花溪') != -1) {
      dispatchReservoirData[i].id = 'water-process-chart';
    }
    if (dispatchReservoirData[i].title.indexOf('阿哈') != -1) {
      dispatchReservoirData[i].id = 'downstream-flood-chart';
    }
    if (dispatchReservoirData[i].title.indexOf('松柏山') != -1) {
      dispatchReservoirData[i].id = 'flood-process-chart';
    }
    dispatchReservoirChart[i] = initReservoirDispatchChart(dispatchReservoirData[i])
  }
  for (var i = 0; i < sectionData.length; i++) {
    sectionData[i].inFlow = deleteMoreDispathData(time, formatArrayData(sectionData[i].inFlow));
    sectionData[i].outFlow = deleteMoreDispathData(time, formatArrayData(sectionData[i].outFlow));
    sectionData[i].z = deleteMoreDispathData(time, formatArrayData(sectionData[i].z));
    dispatchSectionInFlow.data.push({
      nodeId: sectionData[i].nodeId,
      nodeName: sectionData[i].nodeName + "流量",
      name: sectionData[i].nodeName,
      value: sectionData[i].outFlow
    });
    dispatchSectionWater.data.push({
      nodeId: sectionData[i].nodeId,
      nodeName: sectionData[i].nodeName + "水位",
      name: sectionData[i].nodeName,
      value: sectionData[i].z
    })
  }
  for (var i = 0; i < downData.length; i++) {
    if (downData[i].nodeName.indexOf('甲秀楼') != -1) {
      arrayDataChange(downData, 0, i);
    }
  }
  for (var i = 0; i < downData.length; i++) {
    downData[i].inFlow = deleteMoreDispathData(time, formatArrayData(downData[i].inFlow));
    downData[i].outFlow = deleteMoreDispathData(time, formatArrayData(downData[i].outFlow));
    downData[i].z = deleteMoreDispathData(time, formatArrayData(downData[i].z));
    dispatchDownInFlow.data.push({
      nodeId: downData[i].nodeId,
      nodeName: downData[i].nodeName + "流量",
      name: downData[i].nodeName,
      value: downData[i].inFlow
    });
    dispatchDownWater.data.push({
      nodeId: downData[i].nodeId,
      nodeName: downData[i].nodeName + "水位",
      name: downData[i].nodeName,
      value: downData[i].z
    })
  }
  createDispatchMap(data);
  dispatchSectionInFlow.Title = "区域洪水过程线";
  dispatchDownInFlow.Title = "下游河道洪水过程线";
  //dispatchRainChart=createDispatchRainChart('rain-process-chart',dispatchRainData); //降水过程线
  // dispatchInFlowChart=createDispatchReservoirInFlowChart('flood-process-chart',dispatchReservoirInFlow);//入库过程线
  // dispatchOutFlowChart=createReservoirOutFlowAndWaterChart('water-process-chart',dispatchReservoirOutFlow,dispatchReservoirWater); //水位和出库过程线
  dispatchSectionChart = createReservoirOutFlowAndWaterChart('rain-process-chart', dispatchSectionInFlow, dispatchSectionWater); //区间洪水过程线
  dispatchDownChart = createReservoirOutFlowAndWaterChart('area-flood-chart', dispatchDownInFlow, dispatchDownWater); //下游河道洪水过程线
  $('#union-dispatch-button .dispatch-publish-time').html('发布时间：' + time[0]);
}

var createDispatchMap = function (rt) {
  var list = new Array();
  dispatchConfList = new Array();
  cacheDispatchData.reservoirFlood = new Array();
  cacheDispatchData.sectionFlood = new Array();
  cacheDispatchData.downFlood = new Array();
  if (rt) {
    $.getJSON('json/dispatch.json', function (dispatchJsonConf) {
      if (dispatchJsonConf && dispatchJsonConf.length > 0) {
        var dispatchConf;
        if (rt.reservoirFlood && rt.reservoirFlood.length > 0) {
          cacheDispatchData.reservoirFlood = rt.reservoirFlood;
          rt.reservoirFlood.forEach(function (value, index, array) {
            dispatchConf = null;
            var img = 'images/dispatch/reservoir.png';
            if (value.warningLevel && value.warningLevel > 0) {
              var tempImg = img.split('.');
              img = tempImg[0] + value.warningLevel + '.' + tempImg[1];
            }
            for (var i = 0; i < dispatchJsonConf.length; i++) {
              if (dispatchJsonConf[i].id == value.nodeId) {
                dispatchConf = dispatchJsonConf[i];
                break;
              }
            }
            if (dispatchConf) {
              list.push({
                id: value.nodeId,
                name: value.nodeName,
                value: dispatchConf.value,
                img: img,
                size: 25,
                aLevel: value.warningLevel,
                type: obj_type_reservoir,
                labelDesc: value.nodeName + "\n入库洪峰:" + getNumber(value.maxInq) + "m³/s" +
                "\n最高库水位:" + getNumber(value.maxZ) + "m" +
                "\n最大下泄流量:" + getNumber(value.maxOtq) + "m³/s" +
                "\n超警:" + value.warning || "",
                markPointSize: [145, 70],
                markPointSizeOffset: dispatchConf.markPointSizeOffset
              });
              dispatchConf.warning = value.warning || "";
              dispatchConfList.push(dispatchConf);
            }

          })
        }
        if (rt.sectionFlood && rt.sectionFlood.length > 0) {
          cacheDispatchData.sectionFlood = rt.sectionFlood;
          rt.sectionFlood.forEach(function (value, index, array) {
            dispatchConf = null;
            var img = 'images/dispatch/section.png';
            if (value.warningLevel && value.warningLevel > 0) {
              var tempImg = img.split('.');
              img = tempImg[0] + value.warningLevel + '.' + tempImg[1];
            }
            for (var i = 0; i < dispatchJsonConf.length; i++) {
              if (dispatchJsonConf[i].id == value.nodeId) {
                dispatchConf = dispatchJsonConf[i];
                break;
              }
            }
            if (dispatchConf) {
              list.push({
                id: value.nodeId,
                name: value.nodeName,
                value: dispatchConf.value,
                img: img,
                size: 15,
                aLevel: value.warningLevel,
                labelDesc: value.nodeName + "\n流量:" + getNumber(value.maxInq) + "m³/s" +
                "\n最高水位:" + getNumber(value.maxZ) + "m" +
                "\n超警:" + value.warning || "",
                markPointSize: [115, 55],
                markPointSizeOffset: dispatchConf.markPointSizeOffset
              });
              dispatchConf.warning = value.warning || "";
              dispatchConfList.push(dispatchConf);
            }

          })
        }
        if (rt.downFlood && rt.downFlood.length > 0) {
          cacheDispatchData.downFlood = rt.downFlood;
          rt.downFlood.forEach(function (value, index, array) {
            dispatchConf = null;
            var img = 'images/dispatch/HydrologyStation.png';
            if (value.warningLevel && value.warningLevel > 0) {
              var tempImg = img.split('.');
              img = tempImg[0] + value.warningLevel + '.' + tempImg[1];
            }
            for (var i = 0; i < dispatchJsonConf.length; i++) {
              if (dispatchJsonConf[i].id == value.nodeId) {
                dispatchConf = dispatchJsonConf[i];
                break;
              }
            }
            if (dispatchConf) {
              list.push({
                id: value.nodeId,
                name: value.nodeName,
                value: dispatchConf.value,
                img: img,
                size: [15, 28],
                aLevel: value.warningLevel,
                type: obj_type_river_section,
                labelDesc: value.nodeName + "\n流量:" + getNumber(value.maxInq) + "m³/s" +
                "\n最高水位:" + getNumber(value.maxZ) + "m" +
                "\n超警:" + value.warning || "",
                markPointSize: [115, 55],
                markPointSizeOffset: dispatchConf.markPointSizeOffset
              });
              dispatchConfList.push(dispatchConf);
            }

          })
        }
        dispatchMapChartParamList = list;
        createDispatchMapChart('dispatch-union-chart', list);
      }
    })
  }
}

/**
 * 更新图数据
 * @param domId 图区域dom id值
 * @param list [{id,name,value,img,size,aLevel}]
 * @param bgimg 背景图片
 */
var dispatchMapChart;
var createDispatchMapChart = function (domId, list, _bgimg) {
  var bgimg = 'images/dispatch/newmap.jpg';
  if (_bgimg) {
    bgimg = _bgimg;
  }
  dispatchMapChart = echarts.init(document.getElementById(domId));


  dispatchMapChart.setOption(getMapChartOption(domId, list, bgimg));
  $(window).resize(function () {
    dispatchMapChart.resize();
  })
  dispatchMapChart.on('dblclick', function (params) {
    if (params && params.data && params.data.id && params.data.type)
      monitorClick({mocd: params.data.id, name: params.data.name, type: params.data.type});
  });
}
var createDispatchMapMaxChart = function (domId, list, _bgimg) {
  var bgimg = 'images/dispatch/newmap.jpg';
  if (_bgimg)
    bgimg = _bgimg;
  var myChart = echarts.init(document.getElementById(domId));


  myChart.setOption(getMapChartOption(domId, list, bgimg));
  $(window).resize(function () {
    myChart.resize();
  })
  myChart.on('dblclick', function (params) {
    if (params && params.data && params.data.id && params.data.type)
      monitorClick({mocd: params.data.id, name: params.data.name, type: params.data.type});
  });
}
var updateDispatchMapChart = function (rt) {
  var list = new Array();
  if (rt) {
    if (dispatchConfList && dispatchConfList.length > 0) {
      var dispatchConf;
      if (rt.reservoirFlood && rt.reservoirFlood.length > 0) {
        cacheDispatchData.reservoirFlood = rt.reservoirFlood;
        rt.reservoirFlood.forEach(function (value, index, array) {
          dispatchConf = null;
          var img = 'images/dispatch/reservoir.png';
          if (value.warningLevel && value.warningLevel > 0) {
            var tempImg = img.split('.');
            img = tempImg[0] + value.warningLevel + '.' + tempImg[1];
          }
          for (var i = 0; i < dispatchConfList.length; i++) {
            if (dispatchConfList[i].id == value.nodeId) {
              dispatchConf = dispatchConfList[i];
              break;
            }
          }
          if (dispatchConf)
            list.push({
              id: value.nodeId,
              name: value.nodeName,
              value: dispatchConf.value,
              img: img,
              size: 25,
              aLevel: value.warningLevel,
              type: obj_type_reservoir,
              labelDesc: value.nodeName + "\n入库流量:" + getNumber(value.inQ) + "m³/s" +
              "\n库水位:" + getNumber(value.z) + "m" +
              "\n下泄流量:" + getNumber(value.OtQ) + "m³/s" +
              "\n超警:" + dispatchConf.warning || "",
              markPointSize: [145, 70],
              markPointSizeOffset: dispatchConf.markPointSizeOffset
            });
        })
      }
      if (rt.sectionFlood && rt.sectionFlood.length > 0) {
        cacheDispatchData.sectionFlood = rt.sectionFlood;
        rt.sectionFlood.forEach(function (value, index, array) {
          dispatchConf = null;
          var img = 'images/dispatch/section.png';
          if (value.warningLevel && value.warningLevel > 0) {
            var tempImg = img.split('.');
            img = tempImg[0] + value.warningLevel + '.' + tempImg[1];
          }
          for (var i = 0; i < dispatchConfList.length; i++) {
            if (dispatchConfList[i].id == value.nodeId) {
              dispatchConf = dispatchConfList[i];
              break;
            }
          }
          if (dispatchConf)
            list.push({
              id: value.nodeId,
              name: value.nodeName,
              value: dispatchConf.value,
              img: img,
              size: 15,
              aLevel: value.warningLevel,
              labelDesc: value.nodeName + "\n流量:" + getNumber(value.inQ) + "m³/s" +
              "\n水位:" + getNumber(value.z) + "m" +
              "\n超警:" + dispatchConf.warning || "",
              markPointSize: [115, 55],
              markPointSizeOffset: dispatchConf.markPointSizeOffset
            });
        })
      }
      if (rt.downFlood && rt.downFlood.length > 0) {
        cacheDispatchData.downFlood = rt.downFlood;
        rt.downFlood.forEach(function (value, index, array) {
          dispatchConf = null;
          var img = 'images/dispatch/HydrologyStation.png';
          if (value.warningLevel && value.warningLevel > 0) {
            var tempImg = img.split('.');
            img = tempImg[0] + value.warningLevel + '.' + tempImg[1];
          }
          for (var i = 0; i < dispatchConfList.length; i++) {
            if (dispatchConfList[i].id == value.nodeId) {
              dispatchConf = dispatchConfList[i];
              break;
            }
          }
          if (dispatchConf)
            list.push({
              id: value.nodeId,
              name: value.nodeName,
              value: dispatchConf.value,
              img: img,
              size: 15,
              aLevel: value.warningLevel,
              type: obj_type_river_section,
              labelDesc: value.nodeName + "\n流量:" + getNumber(value.inQ) + "m³/s" +
              "\n水位:" + getNumber(value.z) + "m" +
              "\n超警:" + value.warning || "",
              markPointSize: [115, 55],
              markPointSizeOffset: dispatchConf.markPointSizeOffset
            });
        })
      }
      dispatchMapChartParamList = list;
      dispatchMapChart.setOption(getMapChartOption('dispatch-union-chart', list));
    }
  }
}
var getNumber = function (val) {
  if (val)
    return Number(val).toFixed(2);
  else
    return '-';
}
var getMapChartOption = function (domId, list, _bgimg) {
  var option = {}, bgimg = 'images/dispatch/newmap.jpg';
  if (_bgimg)
    bgimg = _bgimg;
  var h = $("#" + domId).height();
  var w = $("#" + domId).width();
  var width = h / (900 / 1400);
  var height = h;
  option.grid = {left: 'center', width: width, height: height, top: 0};
  option.xAxis = [
    {
      gridIndex: 0, min: 0, max: 10,
      axisLine: {show: false},
      axisTick: {show: false},
      splitLine: {show: false},
      axisLabel: {show: false},
    }
  ];
  option.yAxis = [
    {
      gridIndex: 0, min: 0, max: 10,
      axisLine: {show: false},
      axisTick: {show: false},
      splitLine: {show: false},
      axisLabel: {show: false},
    }
  ];
  option.graphic = {
    elements: [{
      type: 'group',
      id: 'background',
      width: w,
      height: h,
      children: [{
        type: 'image',
        id: 'map',
        bounding: 'all',
        left: 'center',
        style: {
          image: bgimg,
          width: width,
          height: height,
          opacity: 1
        }
      }]
    }]
  };
  if (w - width > 0) {
    option.graphic.elements[0].children.push({
      type: 'image',
      id: 'mapL',
      bounding: 'all',
      left: 0,
      style: {
        image: 'images/dispatch/mapl.jpg',
        width: (w - width) / 2,
        height: height,
        opacity: 1
      }
    });
    option.graphic.elements[0].children.push({
      type: 'image',
      id: 'mapR',
      bounding: 'all',
      right: 0,
      style: {
        image: 'images/dispatch/mapr.jpg',
        width: (w - width) / 2,
        height: height,
        opacity: 1
      }
    });
  }
  option.series = new Array();
  option.series.push();
  var markPointData = new Array();
  list.forEach(function (value, index, array) {
    var _position = 'right', _offset = [10, 0];
    if (value.name == '小黄河') {
      _position = 'bottom', _offset = [0, 5];
    }
    markPointData.push({
      symbol: 'rect',
      symbolSize: value.markPointSize,
      symbolOffset: value.markPointSizeOffset,
      silent: true,
      coord: value.value,
      labelDesc: value.labelDesc,
      label: {
        normal: {
          show: true, position: 'insideLeft', formatter: function (param) {
            return param.data.labelDesc;
          }, textStyle: {
            color: '#1b59c8',//069eff
            fontStyle: 'normal',
            fontWeight: 'normal',
            fontFamily: 'Microsoft YaHei',
            fontSize: 12,
          }
        }
      },
      itemStyle: {
        normal: {
          color: "rgba(190,235,253,0.6)",
          borderColor: '#fb242c',
          borderWidth: 0.5,

        }
      }
    });
    option.series.push({
      name: value.name,
      type: 'effectScatter',
      xAxisIndex: 0,
      yAxisIndex: 0,
      showEffectOn: 'render',
      rippleEffect: {
        brushType: 'stroke'
      },
      symbol: 'image://' + value.img,
      symbolSize: value.size,
      scale: 3.5,
      hoverAnimation: true,
      label: {
        normal: {
          formatter: '{b}',
          position: _position,
          offset: _offset,
          show: true,
          textStyle: {color: '#4c6cff'}
        }
      },
      itemStyle: {
        normal: {
          color: '#f4e925',
          shadowBlur: 10,
          shadowColor: '#333'
        }
      },
      zlevel: 1,
      data: [value]
    });
  });
  option.series.push({
    type: 'effectScatter',
    name: 'pointLabelDesc',
    z: 3,
    markPoint: {
      silent: true,
      data: markPointData
    }
  });
  option.textStyle = {
    color: '#1b59c8',//069eff
    fontStyle: 'oblique',
    fontWeight: 'bolder',
    fontFamily: 'Microsoft YaHei',
    fontSize: 16,
  }
  return option;
}

//删除多余的数据
function deleteMoreDispathData(tm, data) {
  var length = tm.length;
  return data.slice(0, length);
}

function initPlayButton() {
  $("#union-dispatch-button button[value='4']").attr("play", 'true').html('播放');
  $('#union-dispatch-button .dispatch-current-time').html("");
  clearInterval(dispatchInterval);
}

function selectDispatch(dom) {
  var $dom = $(dom).attr('data')
  var $domname = $(dom).attr('dataname')
  ajaxCallJson({dispatchId: $dom}, '/dispatch/getDispatchResult', function (_data) {
    initDispatchDataDetail(dispatchWindow, _data);
    $(".save-dispatch-title").text("");
    $(".save-dispatch-title").text($domname);
  })
  layer.close(calculationContentLayer);
}

//创建优化调度计算页面窗口
function initOptimizationWindow() {
  if (!winOptimizationChartWindow) {
    winOptimizationChartWindow = new MyWindow($("#optimizationrate"), {
      title: "优化调度计算示意图",
      width: 960,
      height: 500,
      isMax: false,
      headDbClick: false,
      zIndex: 90
    });
    initFlag = true;
  }
  if (winOptimizationChartWindow) {
    $("#" + winOptimizationChartWindow.id).find(".window-close").click(function () {
      ajaxCallJson({dispatchId: thisDispatchId}, '/dispatch/getDispatchResult', function (_data) {
        initDispatchDataDetail(dispatchWindow, _data);
      })
    })
  }
}

//优化计算保存方法
function saveOptimizationFunction(type) {
  var html = '<div style="margin-left: 10%;margin-top: 10%"><div style="display: inline-block;margin-top: 10px">名称：</div><div  style="display: inline-block" ><input type="text" style="width: 200px;height:30px " class="form-control" id="calculation-results-name" placeholder="请输入名称"></div></div>';
  var index = layer.open({
      type: 1,
      area: ['300px', '200px'],
      content: html,
      title: '保存计算成果',
      skin: 'win-class',
      btn: ['确定'],
      yes: function () {
        var bcrnm = $('#calculation-results-name').val();
        if (!bcrnm) {
          layer.msg('请填写名称！', {time: 2500});
          return;
        }
        ajaxCallJson({
          dispatchId: thisDispatchId,
          name: bcrnm,
          type: type
        }, '/dispatch/saveDispatchResult', function (result) {
          if (result && result.data) {
            var data = result.data;
            if (data) {
              layer.msg('保存成功', {time: 1500})
            } else {
              layer.msg('保存出错,请联系管理员!', {time: 1500})
            }
          } else {
            layer.msg('保存出错,请联系管理员!', {time: 1500})
          }
        });
        layer.close(index);
      }
    }
  );
}

function loadDispatchImage(event) {
  var isShow = $(event).is(":checked")
  var dispatchPointLayer;
  var dispatchLayerID = "dispatchLayerID"
  if (isShow) {
    require(["myMap/layer/PointLayer"], function (PointLayer) {
      var mapPointArr = [{
        adcd: null,
        addr: null,
        adnm: null,
        lgtd: 106.686565,
        lttd: 26.596823,
        mocd: "PP_80542900",
        monm: "贵阳三库联合调度",
        motype: "50",
        oecd: null,
        stcd: "80542900",
        wlevel: 0
      }];
      var classBreakInfos = [{
        maxValue: 0,
        minValue: 0,
        symbol: {
          height: "32px",
          type: "picture-marker",
          url: "/images/mapIcon/01/4.png",
          width: "32px"
        }
      }];
      dispatchPointLayer = new PointLayer(mapPointArr, classBreakInfos, dispatchLayerID);
      map.add(dispatchPointLayer);
    });

  } else {
    toRemoveMapPoint(dispatchLayerID)
  }
}