/**
 * Created by  on 2017-03-10.
 */
function MyWindow(dom, option) {
  var self = this;
  self.id = 'window_' + new Date().getTime();
  var divStr = "<div id='" + self.id + "' style='display: none;box-shadow: rgba(81, 109, 162, 0.85) 1px 2px 5px;border-radius: 4px'>";
  divStr += "<div>"
  divStr += "	<div class='window-header' id='" + self.id + "_header" + "' style='border-radius: 4px'>";
  divStr += "		<div class='window-icon'></div>";
  divStr += "		<span class='window-title'></span>";
  divStr += "		<div class='window-tool'>";
  divStr += "		    <img src='/images/window/window-restore.png' class='window-restore-icon' style='display: none'>";
  divStr += "			<img src='/images/window/window-max.png' class='window-max-icon'>";
  divStr += "			<span class='window-close-icon window-close'></span>";
  divStr += "		</div>";
  divStr += "	</div>";
  divStr += "	<div class='window-line'></div>";
  divStr += "</div>"
  divStr += "	<div class='window-body-container'>";
  divStr += "	    <div style='padding: 5px 0 5px 0;'></div>";
  divStr += "	</div>";
  divStr += "</div>";
  $(document.body).append(divStr);
  self.dom = $("#" + self.id);
  self.head = $(self.dom.children("div")[0]);
  self.body = $($(self.dom.children("div")[1]).children("div").get(0));
  self.option = {};
  self.state = 'restore';
  self.isClose = false;
  if (dom)
    this.setWindow(dom, option);
}

/**
 * 设置窗口属性及内容
 * @param dom  窗口内容
 * @param option  窗口属性
 * @returns {MyWindow}
 * option default value:
 * {
 *  modal:false,
 *  width:(bodyHeight * 0.6*16)/9
 *  height:bodyHeight * 0.6
 *  background:'rgba(0, 102, 204, 0.6)',
 *  position:'absolute',
 *  top:parseInt(bodyHeight-option.height)/2+'px',
 *  left:parseInt(bodyWidth-option.width)/2+'px',
 *  zIndex:99,
 *  border:'solid rgba(255, 255, 255, 0.7) 1px',
 *  title:'',
 *  isDrag:true,//是否可拖拽
 *  isRestore:true,//是否显示恢复图标
 * }
 */
var bodyWidth = $("body").width(),
  bodyHeight = $('body').height();
MyWindow.prototype.setWindow = function (dom, option) {
  var self = this,
    html;
  if (typeof (dom) == "string") {
    if (dom.indexOf('<') > -1)
      html = dom;
    else
      html = '<iframe src="' + dom + '" style="background-color: rgba(9, 25, 57, 0.95);box-shadow: rgba(81, 109, 162, 0.85) 1px 2px 5px" width="100%" height="99%" frameborder=0 scrolling="no"></iframe>'
  } else if (typeof (dom) == "object") {
    html = dom[0].outerHTML;
    dom.remove();
  } else
    throw new Error("Argument error");
  var size = MyWindow.resizeMyWindowSize();
  this.body.empty();
  this.body.append(html);
  if (!option)
    option = {};
  if (!option.modal)
    option.modal = false;
  if (!option.width)
    option.width = size.width;
  if (!option.height)
    option.height = size.height;
  if (!option.background)
    option.background = 'rgba(9, 25, 57, 0.95)';
  if (!option.position)
    option.position = 'absolute';
  if (!option.top)
    option.top = parseInt(bodyHeight - option.height) / 2 + 'px';
  if (!option.left)
    option.left = parseInt(bodyWidth - option.width) / 2 + 'px';
  if (!option.zIndex)
    option.zIndex = 9999;
  if (!option.border)
    option.border = 'solid rgba(9, 25, 57, 0.95) 1px';
  if (!option.title)
    option.title = '';
  if (!option.isDrag)
    option.isDrag = true;
  if (option.isRestore == undefined)
    option.isRestore = true;
  if (option.isMax == undefined)
    option.isMax = true;
  if (option.windowLine == undefined) {
    this.head.find(".window-line").css("display", "block");
  }
  if (option.restoreIcon) {
    this.head.find(".window-restore-icon").attr("src", option.restoreIcon);
  }
  if (option.closeIcon) {
    this.head.find(".window-close-icon").attr("src", option.closeIcon);
  }
  if (option.windowLine) {
    this.head.find(".window-line").css("display", "none");
  }
  if (option.setLevel == undefined)
    option.setLevel = true;

  this.option = option;
  this.dom.css("height", option.height);
  this.dom.css("width", option.width);
  this.dom.css("background", option.background);
  this.dom.css("position", option.position);
  this.dom.css("top", option.top);
  this.dom.css("left", option.left);
  this.dom.css("z-index", option.zIndex);
  this.dom.css("border", option.border);
  this.head.find(".window-title").text(option.title);
  if (option.setLevel) {
    this.dom.on('click', function () {
      if (WindowManager.getNewWindow()) {
        WindowManager.setNewWindow(false);
        return;
      }
      var mz = WindowManager.getWinMaxZIndex();
      mz++;
      self.dom.css('z-index', mz);
      WindowManager.setWinMaxZIndex(mz);
    })
  }
  if (option.max) {
    self.maximie();
  }

  if (this.option.isDrag) {
    $("#" + this.id).draggable({
      containment: "parent",
      cancel: "div.window-body-container"
    });
  }

  if (option.headDbClick || option.headDbClick == undefined) {
    self.head.dblclick(function () {
      if (self.state == "max")
        self.restore();
      else
        self.maximie();
    });
  }
  MyWindow.addEvent(self.dom.find(".window-max-icon")[0], "click", function (e) {
    self.maximie();
    if (e && e.stopPropagation)
      e.stopPropagation();
    else
    //否则，我们需要使用IE的方式来取消事件冒泡
      window.event.cancelBubble = true;
    return false;
  }, false);

  MyWindow.addEvent(self.dom.find(".window-close-icon")[0], "click", function (e) {
    if (self.isClose)
      self.close();
    else
      self.hide();
    if (e && e.stopPropagation)
      e.stopPropagation();
    else
    //否则，我们需要使用IE的方式来取消事件冒泡
      window.event.cancelBubble = true;
    return false;
  }, false);
  MyWindow.addEvent(self.dom.find(".window-restore-icon")[0], "click", function (e) {
    self.restore();
    if (e && e.stopPropagation)
      e.stopPropagation();
    else
    //否则，我们需要使用IE的方式来取消事件冒泡
      window.event.cancelBubble = true;
    return false;
  }, false);
  WindowManager.windows.put(self.id, self);
  return self;
}
MyWindow.prototype.show = function () {
  if (!this.dom)
    throw new Error("this window is close");
  var maxZ = WindowManager.getWinMaxZIndex();
  if (this.getZIndex() != -999 && maxZ >= this.getZIndex()) {
    if (maxZ == 0)
      maxZ = this.getZIndex();
    else
      maxZ++;
    this.setZIndex(maxZ);
  }
  WindowManager.setWinMaxZIndex(maxZ);
  WindowManager.setNewWindow(true);
  this.dom.show();
  this.resize();
}
MyWindow.prototype.shows = function () {
  if (!this.dom)
    throw new Error("this window is close");
  var maxZ = WindowManager.getWinMaxZIndex();
  if (this.getZIndex() != -999 && maxZ >= this.getZIndex()) {
    if (maxZ == 0)
      maxZ = this.getZIndex();
    else
      maxZ++;
    this.setZIndex(maxZ);
  }
  WindowManager.setWinMaxZIndex(maxZ);
  WindowManager.setNewWindow(true);
  this.dom.show();
  //this.resize();
}
MyWindow.prototype.hide = function () {
  if (!this.dom)
    throw new Error("this window is close");
  this.dom.hide();
}
MyWindow.prototype.close = function () {
  this.dom.remove();
  this.dom = null;
  WindowManager.windows.remove(this.id);
  if (this.onClose) this.onClose();
}
MyWindow.prototype.maximie = function () {
  if (this.option.isRestore) {
    $(this.dom.find(".window-max-icon")).hide()
    $(this.dom.find(".window-restore-icon")).show();
  } else {
    $(this.dom.find(".window-max-icon")).hide()
    $(this.dom.find(".window-restore-icon")).hide();
  }
  this.state = 'max';
  this.resize();
}
MyWindow.prototype.restore = function () {
  $(this.dom.find(".window-max-icon")).show()
  $(this.dom.find(".window-restore-icon")).hide();
  this.state = 'restore';
  var size = MyWindow.resizeMyWindowSize(),
    dom = this.dom;
  this.option.height = size.height;
  this.option.width = size.width;
  this.option.top = parseInt($('body').height() - this.option.height) / 2 + 'px';
  this.option.left = parseInt($("body").width() - this.option.width) / 2 + 'px';
  this.resize();
}
//大小改变时body自适应
MyWindow.prototype.resize = function () {
  var dom = this.dom;
  if (this.state == 'max') {
    dom.css("height", $('body').height());
    dom.css("width", $("body").width());
    dom.css("top", 0);
    dom.css("left", 0);
    //drag.stopDrag(this.id+"_header");
  } else {
    dom.css("height", this.option.height);
    dom.css("width", this.option.width);
    dom.css("top", this.option.top);
    dom.css("left", this.option.left);
    //drag.startDrag(this.id+"_header",this.id);
  }
  var bodyHeight = this.dom.height() - this.head.height();
  $(this.body.children("div")[0]).css("height", bodyHeight - 10);
  this.body.css('height', bodyHeight + "px");
  if (this.resizeCallback && typeof (this.resizeCallback) == "function")
    this.resizeCallback();
  if (!this.option.isMax) {
    $(this.dom.find(".window-max-icon")).hide()
  }
}
MyWindow.prototype.resizecbfn = function (fn) {
  this.resizeCallback = fn;
  if (this.resizeCallBack && typeof (this.resizeCallBack) == "function")
    this.resizeCallBack();
}

MyWindow.prototype.resizeCallBackFn = function (fn) {
  this.resizeCallBack = fn;
}
MyWindow.prototype.setClose = function (_isClose) {
  this.isClose = _isClose;
}
MyWindow.prototype.setTitle = function (_title) {
  this.head.find("span").text(_title);
}
MyWindow.prototype.getState = function () {
  return this.state;
}
MyWindow.prototype.setZIndex = function (zIndex) {
  this.dom.css("z-index", zIndex);
}
MyWindow.prototype.getZIndex = function () {
  return this.dom.css("z-index");
}
//绑定事件
MyWindow.addEvent = function (element, eventType, handler, capture) {
  try {
    if (element.addEventListener)
      element.addEventListener(eventType, handler, capture);
    else if (element.attachEvent)
      element.attachEvent("on" + eventType, handler);
  } catch (e) {
    console.error(e);
  }
};
MyWindow.resizeMyWindowSize = function () {
  var width, height;
  if (bodyHeight >= 800) {
    height = bodyHeight * 0.7;
  }
  if (bodyHeight < 800 && bodyHeight > 720) {
    height = bodyHeight * 0.75;
  }
  if (bodyHeight <= 720 && bodyHeight > 700) {
    height = bodyHeight * 0.8;
  }
  if (bodyHeight <= 700) {
    height = bodyHeight * 0.9;
  }
  width = height * (bodyWidth / bodyHeight);
  return {
    width: width,
    height: height
  }
}
//设置标题
MyWindow.prototype.setTitle = function (title) {
  if (title) {
    this.option.title = title;
    this.head.find(".window-title").html(title);
  }
}
