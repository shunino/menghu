var index = 0, t = 0;
var clickLayer, sr,forecastClickLayer;
var mapPointArrLastData=[];
$(function () {
  note.on("map.ready", () => {
    typhoonPathMap=new Map();
    typhoonPathLineMap=new Map();
    typhoonPathDataIndexMap=new Map();
    stopTyphoonPathIndexMap=new Map();
    typhoonPathDataIndexChildMap=new Map();
    // initLoadStopEditingData();
    // onLoadStopEditingTimeArray();//没有停编的时间参数
  });
  note.on("subject.change", (e, subject) => {
    if (subject.id === "10") {
      getUserRegion();
      $("#footer-legend").css("width","484px");
      $("#footer-legend").attr("src", "/images/typhoonpng/typhoon-lengend.png");
      $('#typhoon-path-cloud-chart').attr('flag','radar');
      var isFirst=true;
      onLoadTyphoonCloudChart(isFirst);
      initTyphoon();
      if(layerID!=undefined){
        for(var i=0;i<layerID.length;i++){
          if(layerID[i]!="wmsADCD"){
            minmap.remove(minmap.findLayerById(layerID[i]))
          }
        }
      }
    } else {
      $("#click-typhoon-path-list").css("display","none");
      $("#footer-legend").css("width","240px");
      $('#typhoon-path-radar').attr('flag','cloud');
      $('#typhoon-path-radar').html(" ");
      $('#typhoon-path-radar').html('<img  src="/images/typhoonpng/cloud-check.png"><span style="color: #00A8FF">雷达</span>');
      clearTyphoonPathLayer(true);
      // getUserRegion();
      $("#typhoon-query-win").hide(500);
      $("#typhoon-query-content").hide(500);
      $("#typhoon-play").hide(500);
      $("#typhoon-query-layer-contort").hide();
      $("#typhoon-newest-query-content").hide();
    }
  });

});

function initTyphoon() {
  $("#click-typhoon-path-list").css("display","block");
  var wq_win = $("#typhoon-query-win");
  wq_win.css("display", "none");
  wq_win.css("top", "140px").css("right", "10px");
  selectChangeData();
  init24Path();
  $("#typhoon-query-win").find("select").unbind('change').bind('change', function () {
    selectChangeData();
  });
}

$('#typhoon-query-close').click(function () {
  // clearInterval(warmPointTyphoonTimer);
  note.notify("clear.typhoon.radar");
  $('#typhoon-query-win').hide(600);
  $('#typhoon-query-content').hide(600);
  $("#typhoon-play").hide(500);
  $("#typhoon-query-layer-contort").hide();
  $("#typhoon-newest-query-content").css("display","none");
  clearTyphoonPathLayer();
  if (map.findLayerById("typhoonPathRadarChart" )) {
    map.remove(map.findLayerById("typhoonPathRadarChart" ))
  }
  if (map.findLayerById("clickCordonLayer")) {
    map.remove(map.findLayerById("clickCordonLayer"))
  }
  if (map.findLayerById("clickVigilance24Layer")) {
    map.remove(map.findLayerById("clickVigilance24Layer"))
  }
  if (map.findLayerById("clickVigilance48Layer")) {
    map.remove(map.findLayerById("clickVigilance48Layer"))
  }
  if (map.findLayerById("typhoonPath24Hour")) {
    map.remove(map.findLayerById("typhoonPath24Hour"))
  }
  if (map.findLayerById("typhoonPath48Hour" )) {
    map.remove(map.findLayerById("typhoonPath48Hour" ))
  }
  if (map.findLayerById("typhoonPath72Hour" )) {
    map.remove(map.findLayerById("typhoonPath72Hour" ))
  }
  if (map.findLayerById("typhoonPathCloudChart30Min" )) {
    map.remove(map.findLayerById("typhoonPathCloudChart30Min" ))
  }
  for (var i = 0; i < saveIDList.length; i++) {
    if (map.findLayerById("clickLayer" + saveIDList[i])) {
      map.remove(map.findLayerById("clickLayer" + saveIDList[i]))
    }
    if (map.findLayerById("showImagesPoint" + saveIDList[i])) {
      map.remove(map.findLayerById("showImagesPoint" + saveIDList[i]))
    }
    if (map.findLayerById("clickCordonTextLayer" + saveIDList[i])) {
      map.remove(map.findLayerById("clickCordonTextLayer" + saveIDList[i]))
    }
    if (map.findLayerById("forecastClickLayer" + saveIDList[i])) {
      map.remove(map.findLayerById("forecastClickLayer" + saveIDList[i]))
    }
    if (map.findLayerById("clickLayerSector" + saveIDList[i])) {
      map.remove(map.findLayerById("clickLayerSector" + saveIDList[i]))
    }
    clearInterval(typhoonPathDataIndexMap.get(saveIDList[i]));
  }
});

function init24Path() {
  require([
    "esri/layers/GraphicsLayer",
    "esri/Graphic",
    "esri/symbols/TextSymbol"
  ], function (GraphicsLayer, Graphic, TextSymbol) {
    var graphics24PointLayer = new GraphicsLayer({"id": "clickCordonLayer"});
    map.add(graphics24PointLayer);
    var point24List = [
      {
        lng: 127.88, lat: 30
      },
      {
        lng: 127.88, lat: 28
      },
      {
        lng: 127.88, lat: 26
      },
      {
        lng: 127.88, lat: 24
      },
      {
        lng: 127.88, lat: 22
      },
      {
        lng: 127.88, lat: 20
      },
    ];
    var point48List = [
      {
        lng: 133, lat: 30
      },
      {
        lng: 133, lat: 28
      },
      {
        lng: 133, lat: 26
      },
      {
        lng: 133, lat: 24
      },
      {
        lng: 133, lat: 22
      },
      {
        lng: 133, lat: 20
      },
    ];
    for (var i = 0; i < point24List.length; i++) {
      var point24 = {
        type: "point", // autocasts as new Point()
        x: point24List[i].lng,
        y: point24List[i].lat,
        z: 20000
      };
      var text24 = "", text48 = "";
      switch (i) {
        case 0:
          text24 = "24";
          text48 = "48";
          break;
        case 1:
          text24 = "小";
          text48 = "小";
          break;
        case 2:
          text24 = "时";
          text48 = "时";
          break;
        case 3:
          text24 = "警";
          text48 = "警";
          break;
        case 4:
          text24 = "戒";
          text48 = "戒";
          break;
        case 5:
          text24 = "线";
          text48 = "线";
          break;
        default:
          throw text;
      }
      var text24Symbol = {
        type: "text",  // autocasts as new TextSymbol()
        color: [255, 255, 0],
        haloColor: "black",
        haloSize: "1px",
        text: text24,
        xoffset: 3,
        yoffset: 3,
        font: {  // autocast as new Font()
          size: 12,
          // family: "sans-serif",
          // weight: "bold"
        }
      };

      var point24Graphic = new Graphic({
        geometry: point24,
        symbol: text24Symbol
      });
      var point48 = {
        type: "point", // autocasts as new Point()
        x: point48List[i].lng,
        y: point48List[i].lat,
        z: 20000
      };
      var text48Symbol = {
        type: "text",  // autocasts as new TextSymbol()
        color: [255, 255, 0],
        haloColor: "black",
        haloSize: "1px",
        text: text48,
        xoffset: 3,
        yoffset: 3,
        font: {  // autocast as new Font()
          size: 12,
          // family: "sans-serif",
          // weight: "bold"
        }
      };
      var point48Graphic = new Graphic({
        geometry: point48,
        symbol: text48Symbol
      });
      graphics24PointLayer.add(point24Graphic);
      graphics24PointLayer.add(point48Graphic);
    }


    var clickVigilanceLayer = new GraphicsLayer({"id": "clickVigilance24Layer"});
    map.add(clickVigilanceLayer);
    var polyline = {
      type: "polyline", // autocasts as new Polyline()
      paths: [[127, 34], [127, 22], [119, 18], [119, 11], [113, 4.5], [105, 0]]
    };

    var lineSymbol = {
      type: "simple-line", // autocasts as SimpleLineSymbol()
      color: [255, 0, 0],
      width: 1
    };

    var polylineGraphic = new Graphic({
      geometry: polyline,
      symbol: lineSymbol
    });
    clickVigilanceLayer.add(polylineGraphic);


    var click48VigilanceLayer = new GraphicsLayer({"id": "clickVigilance48Layer"});
    map.add(click48VigilanceLayer);
    var poly48line = {
      type: "polyline",
      paths: [[132, 34], [132, 15], [120, 0], [105, 0]]
    };

    var line48Symbol = {
      type: "simple-line",
      color: [255, 255, 0],
      width: 1,
      style: "short-dash"
    };

    var polyline48Graphic = new Graphic({
      geometry: poly48line,
      symbol: line48Symbol
    });
    click48VigilanceLayer.add(polyline48Graphic);
  })
}

function selectChangeData() {
  var level = $("#typhoon-query-win").find("select[name='level']").val();
  let params = {
    url: typhoonPathList,
    httpType: "get",
    paramMap: {year: level},
  };
  var selectNameList,selectNameListID=[];
  ajaxCallJson(params, '/base/transfer', function (res) {
    if (res.flag) {
      var data = JSON.parse(JSON.parse(res.data).data);
      var html = '';
      var checkName = "";
      for (var i = 0; i < data.length; i++) {
        checkName = "";
        checkName = (data[i].tfbh).substring(2, data[i].tfbh.length) + data[i].cname + " " + data[i].ename;
        var current = "";
        var selectName = data[i].year + "年" + (data[i].tfbh).substring(2, data[0].tfbh.length) + " " + data[i].cname+" "+(data[i].iscurrent===0?"已停编":"");
        if (data[i].iscurrent == 0) {
          current = "已停编"
        } else {
          current = "";
          selectNameList=(data[i].year + "年" + (data[i].tfbh).substring(2, data[i].tfbh.length) + " " + data[i].cname+" "+(data[i].iscurrent===0?"已停编":""))
          var obj = { id: data[i].ident, isCheck: true, name: selectNameList };
          onLoadStopEditingTimeArray(obj,true);//没有停编的时间参数
        }
        if(data[i].iscurrent===1){
          html += '<div style="margin-left: 15px">';
          html += '<label style="display: flex"><input type="checkbox" name="' + selectName + '" checked="checked" class="input_check" onclick="initLoadReproduceLayer(this)" id="' + data[i].ident + '">' + checkName + '</label>';
          html += "</div>";
        }else{
          html += '<div style="margin-left: 15px">';
          html += '<label style="display: flex"><input type="checkbox" name="' + selectName + '"  class="input_check" onclick="initLoadReproduceLayer(this)" id="' + data[i].ident + '">' + checkName + '</label>';
          html += "</div>";
        }
      }
      $('#query_typhoon_div').html(html);
    }
  })
}

//加载台风内容 列表
function initTyphoonContent(name, res) {
  $("#typhoon-query-layer-contort").css("display","block").css("top", "595px").css("right", "10px");
  var wq_content = $("#typhoon-query-content");
  wq_content.css("display", "block");
  wq_content.css("top", "345px").css("right", "10px");
  $("#typhoon-play").css("display", "block");
  $("#typhoon-play").css("top", "325px").css("right", "10px").css("min-width", "48px");
  $("#typhoon-content-title").html(" ");
  $("#typhoon-content-title").html(name);
  var html = "";
  $('#query_typhoon_content').html("");
  html += "<div style='overflow: hidden'><ul class='ul-typhoon'><li class='typhoon-ul-li'>过去时间</li><li class='typhoon-ul-mid' style='width: 105px;'>移速(km/h)</li><li class='typhoon-ul-li-min' style='width: 100px'>气压(百帕)</li><li class='typhoon-ul-li-min' style='width: 170px'>风速(m/s)/风力</li></ul></div>";
  html += "<div style='overflow: auto;width: 100%;height: 180px;cursor: pointer'>"
  for (var i=res[0].pointses.length-1;i>=0;i--) {
    res[0].pointses[i].remark=res[0].cname;
    res[0].pointses[i].cname=res[0].cname;
    res[0].pointses[i].ename=res[0].ename;
    var valueStr = JSON.stringify(res[0].pointses[i]);
    html += "<ul class='ul-typhoon' style='color: #ffffff' obj='" + valueStr + "' onclick='onClickShowDataMessage(this)'><li class='typhoon-ul-li'>" + moment(res[0].pointses[i].time).format('MM[/]DD HH') + "时" + "</li>";
    html += "<li class='typhoon-ul-mid' style='width: 105px;'>" + res[0].pointses[i].movespeed +"</li>";
    html += "<li class='typhoon-ul-li-min'>" + res[0].pointses[i].pressure + "</li>";
    html += "<li class='typhoon-ul-li-min' style='width: 160px'>" + res[0].pointses[i].speed + "/"+ res[0].pointses[i].power +"级"+ "</li></ul>";
  }
  html += "</div>";
  $('#query_typhoon_content').html(html);
}
//鼠标点击加载详细数据
function onClickShowDataMessage(data) {
  var objData=JSON.parse($(data).attr("obj"));
  require([
    "esri/geometry/Point",
  ], function (Point) {
    var pointMapData=new Point({
      x: objData.lng,
      y: objData.lat
    });
    objData.time= moment(objData.time).format('YYYY[-]MM[-]DD HH');
    // objData.tfbh= objData.tfbh+objData.remark;
    initLoadTyphoon(objData, pointMapData);
  })
}
//加载台风路径
var pointGraphicList = [], lineGraphicList = [], imagesPointLayerList = [], saveIDList = [],forecastLineList=[],forecastPointGraphicList=[];
var lastCheckLayer, lastCheckDom,lastCheckIdLayer,lastCheckLayerCheckID,firstCheckLayerCheckID,lastCheckLayerCheckBJTimeID;
var isCheckShowLayer=false;
var isLoadDataLayer=false;
var allPointDataList;
var saveChangeTyphoonList=[],saveIDChangeTyphoon=[],saveChangeTyphoonLineList=[];
var typhoonPathMap,typhoonPathLineMap,typhoonPathDataIndexMap,stopTyphoonPathIndexMap,typhoonPathDataIndexChildMap,stopTyphoonPathCacheIndexMap=new Map(),stopTyphoonNoEitingPathCacheIndexMap=new Map();
function initTyphoonPath(dom,isFirst,isShowNoStop) {
  lastCheckDom = "";
  lastCheckDom = dom;
  $("#typhoon-newest-query-content").css("display","none");
  var id = "";
  var isCheck = "";
  var name = "";
  if(isFirst){
    id = dom.id;
    isCheck = dom.isCheck;
    name = dom.name;
  }else{
    id = $(dom).attr("id");
    isCheck = $(dom).is(":checked");
    name = $(dom).attr("name");
  }
  // if(isLoadDataLayer==true){
  //   $(dom).prop("checked",!isCheck);
  //   layui.use('layer', function () {
  //     var layers= layer.msg("正在加载当前选择台风，请稍候！", {
  //       time: 2000,
  //       shade: [0.2, '#000']
  //     });
  //   });
  //   return;
  // }

  lastCheckLayer = "";
  lastCheckLayer = id;
  if (isCheck == false) {
    typhoonPathMap.delete(id);
    typhoonPathLineMap.delete(id);
    isCheckShowLayer=true;
    clearTyphoonPathLayer(undefined,id);
    clearInterval(stopTyphoonPathIndexMap.get(id));
    clearInterval(stopTyphoonPathCacheIndexMap.get(id));
    return
  }else{
    if (saveIDList.indexOf(id) == -1) {
      lastCheckIdLayer="";
      lastCheckIdLayer=id;
      saveIDList.push(id);
    }
    isCheckShowLayer=false;
  }
  var level = $("#typhoon-query-win").find("select[name='level']").val();
  let params = {
    url: typhoonPathContent,
    httpType: "get",
    paramMap: {year: level, tfbh: id},
  };
  allPointDataList=[];
  ajaxCallJson(params, '/base/transfer', function (res) {
    if (res.flag) {
      var path = JSON.parse(JSON.parse(res.data).data);
      allPointDataList=path;
      initTyphoonContent(name, path);
      require([
        "esri/layers/GraphicsLayer",
        "esri/Graphic",
        "myMap/layer/PointLayer"
      ], function (GraphicsLayer, Graphic, PointLayer) {
        forecastClickLayer = new GraphicsLayer({"id": "forecastClickLayer" + id});
        map.add(forecastClickLayer);
        clickLayer = new GraphicsLayer({"id": "clickLayer" + id});
        map.add(clickLayer);
        var graphicsPointTextLayer = new GraphicsLayer({ "id": "clickCordonTextLayer"+ id });
        map.add(graphicsPointTextLayer);
        var point24 = {
          type: "point", // autocasts as new Point()
          x: path[0].pointses[0].lng+2,
          y: path[0].pointses[0].lat,
          z: 20000
        };
        var text24 =path[0].ident+path[0].cname ;
        var text24Symbol = {
          type: "text",
          color: [255, 255, 255],
          haloColor: "black",
          haloSize: "1px",
          text: text24,
          xoffset: 3,
          yoffset: 3,
          font: {
            size: 18,
          }
        };
        var pointTextGraphic = new Graphic({
          geometry: point24,
          symbol: text24Symbol
        });
        graphicsPointTextLayer.add(pointTextGraphic);
        var temp = [], tempArray = [],forecast;
        var forecastTemp=[],forecastTempArray=[],dottedLineArray=[],dottedLineColorArray=[];
        pointGraphicList = [];
        lineGraphicList = [];
        forecastLineList=[];
        forecastPointGraphicList=[];
        imagesPointLayerList = [];
        mapPointArrLastData=[];
        var mapLandingDataArrLastData=[];
        if(path[0].land){
          if(JSON.parse(path[0].land).length>0){
            console.info(JSON.parse(path[0].land));
            var landingData=JSON.parse(path[0].land);
            var mapLandingPointArr=[],classLandingBreakInfos=[];
            for(var g = 0; g < landingData.length; g++){
               mapLandingPointArr.push({
                 adcd: null,
                 addr: "",
                 adnm: "",
                 lgtd: parseFloat(landingData[g].lng),
                 lttd: parseFloat(landingData[g].lat),
                 mocd: "",
                 monm: landingData[g].info,
                 motype: "TF-03",
                 oecd: "",
                 stcd: "",
                 wlevel: 1
               });
               classLandingBreakInfos.push({
                maxValue: 1,
                minValue: 1,
                symbol: {
                  height: "24px",
                  type: "picture-marker",
                  url: "/images/typhoonpng/landing-point.png",
                  width: "24px",
                }
              });
            }
            var showLandingImagesPointLayer = new PointLayer(mapLandingPointArr, classLandingBreakInfos, "showLandingImagesPoint" + id);
            mapLandingDataArrLastData.push(showLandingImagesPointLayer)
          }
        }
        for (var i = 0; i < path[0].pointses.length; i++) {
          temp = [];
          temp.push(path[0].pointses[i].lng);
          temp.push(path[0].pointses[i].lat);
          temp.push(20000);
          tempArray.push(temp);
          if(path[0].pointses[path[0].pointses.length-1].forecast&&i===path[0].pointses.length-1){
            if(path[0].pointses[path[0].pointses.length-1].forecast.length===0){
              return;
            }
            forecast=path[0].pointses[path[0].pointses.length-1].forecast;
            for(var h = 0; h < forecast.length; h++){
              var forecastArrayLength=[],forecastPointGraphicLength=[],dottedLineChildArray=[];
              forecastTempArray=[];
              for(var j = 0; j < forecast[h].points.length; j++){
                let dottedLineObj={};
                forecastTemp = [];
                forecastTemp.push(parseFloat(forecast[h].points[j].lng));
                forecastTemp.push(parseFloat(forecast[h].points[j].lat));
                forecastTemp.push(20000);
                forecastTempArray.push(forecastTemp);
                dottedLineObj.x=parseFloat(forecast[h].points[j].lng);
                dottedLineObj.y=parseFloat(forecast[h].points[j].lat);
                dottedLineChildArray.push(dottedLineObj);
                var forecastColor;
                if(forecast[h].sets&&forecast[h].sets==="中国"){
                  forecastColor= "#ff3c4e";
                }
                if(forecast[h].sets&&forecast[h].sets==="中国香港"){
                  forecastColor= "#FEBD00";
                }
                if(forecast[h].sets&&forecast[h].sets==="中国台湾"){
                  forecastColor= "#FF00FE";
                }
                if(forecast[h].sets&&forecast[h].sets==="日本"){
                  forecastColor= "#24BC00";
                }
                if(forecast[h].sets&&forecast[h].sets==="美国"){
                  forecastColor= "#04FAF7";
                }
                var forecastPolyline = {
                  type: "polyline", // autocasts as new Polyline()
                  paths: forecastTempArray
                };
                var forecastSymbol = {
                  type: "simple-line", // autocasts as SimpleLineSymbol()
                  color: forecastColor,
                  style: "short-dash",
                };
                var polylineGraphic = new Graphic({
                  geometry: forecastPolyline,
                  symbol: forecastSymbol
                });
                var forecastPoint = {
                  type: "point", // autocasts as new Point()
                  x: forecast[h].points[j].lng,
                  y: forecast[h].points[j].lat,
                  z: 20000
                };
                var forecastMarkerSymbol = {
                  type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
                  color: forecastColor,
                  size: 12,
                  outline: {
                    // autocasts as new SimpleLineSymbol()
                    color: forecastColor,
                    width: 1
                  }
                };
                var forecastTemplate = {
                  title: "{name}",
                  content: [{
                    type: "fields",
                    fieldInfos: [{
                      fieldName: "time",
                      label: "到达时间",
                      visible: true
                    }, {
                      fieldName: "lng",
                      label: "中心位置",
                      visible: true
                    }, {
                      fieldName: "power",
                      label: "风速风力",
                      visible: true
                    }, {
                      fieldName: "pressure",
                      label: "中心气压",
                      visible: true
                    }, {
                      fieldName: "movespeed",
                      label: "未来移速",
                      visible: true
                    }, {
                      fieldName: "movedir",
                      label: "未来移向",
                      visible: true
                    },]
                  }]
                };
                var forecastPointGraphic = new Graphic({
                  geometry: forecastPoint,
                  symbol: forecastMarkerSymbol,
                  attributes: {
                    tfbh: path[0].tfbh,
                    cname: forecast[h].sets,
                    ename: moment(forecast[h].points[j].time).format('MM月DD日HH时')+" 预报",
                    iscurrent: forecast[h].points[j].iscurrent,
                    time: moment(forecast[h].points[j].time).format('YYYY[-]MM[-]DD HH'),
                    lng: forecast[h].points[j].lng,
                    lat: forecast[h].points[j].lat,
                    power: forecast[h].points[j].power,
                    pressure: forecast[h].points[j].pressure,
                    speed: forecast[h].points[j].speed,
                    movespeed: forecast[h].points[j].movespeed,
                    movedir: forecast[h].points[j].movedir,
                    radius7: forecast[h].points[j].radius7,
                    radius7quad: forecast[h].points[j].radius7quad,
                    radius10: forecast[h].points[j].radius10,
                    radius10quad: forecast[h].points[j].radius10quad,
                    radius12: forecast[h].points[j].radius12,
                    radius12quad: forecast[h].points[j].radius12quad,
                    motype: "TF-02"//预报
                  },
                  popupTemplate: forecastTemplate
                });
                forecastArrayLength.push(polylineGraphic);
                forecastPointGraphicLength.push(forecastPointGraphic);
              }
              dottedLineColorArray.push(forecastColor);
              dottedLineArray.push(dottedLineChildArray);
              forecastLineList.push(forecastArrayLength);
              forecastPointGraphicList.push(forecastPointGraphicLength);
            }
          }
          var arColor7, arColor10, arColor12;
          if (path[0].pointses[i].radius7) {
            arColor7 = [83, 168, 113];
          }
          if (path[0].pointses[i].radius10) {
            arColor10 = [175, 192, 130];
          }
          if (path[0].pointses[i].radius12) {
            arColor12 = [185, 121, 96];
          }
          var arPower = path[0].pointses[i].power;
          var arColor = "";
          if (arPower <= 7) {
            arColor = "#02FF02"
          } else if (7 < arPower&&arPower <= 9) {
            arColor = "#6e94d0"
          } else if (9 < arPower&&arPower <= 11) {
            arColor = "#FFFB05"
          } else if (11 < arPower&&arPower <= 13) {
            arColor = "#FFAC05"
          } else if (13 < arPower &&arPower<= 15) {
            arColor = "#F171F9"
          } else if (15 < arPower) {
            arColor = "#FE0202"
          }
          //加载台风点数据显示
          var point = {
            type: "point", // autocasts as new Point()
            x: path[0].pointses[i].lng,
            y: path[0].pointses[i].lat,
            z: 20000
          };

          var mapPointArr = [{
            adcd: null,
            addr: "",
            adnm: "",
            lgtd: path[0].pointses[i].lng,
            lttd: path[0].pointses[i].lat,
            mocd: "",
            monm: "",
            motype: "",
            oecd: "",
            stcd: "",
            wlevel: 1,
            z:20000
          }];
          var classBreakInfos = [{
            maxValue: 1,
            minValue: 1,
            symbol: {
              height: "42px",
              type: "picture-marker",
              url: "/images/typhoonpng/typhoon1.png",
              width: "42px",
            }
          }];
          if(i===0){
            var showImagesPointOneLayer = new PointLayer(mapPointArr, classBreakInfos, "showImagesPoint"+path[0].ident );
            map.add(showImagesPointOneLayer.pointLayer);
          }
          var showImagesPointLayer = new PointLayer(mapPointArr, classBreakInfos, "showImagesPoint" + id);
          imagesPointLayerList.push(showImagesPointLayer);
          var markerSymbol = {
            type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
            color: arColor,
            size: 12,
            outline: {
              // autocasts as new SimpleLineSymbol()
              color: arColor,
              width: 1
            }
          };
          var template = {
            title: "{name}",
            content: [{
              type: "fields",
              fieldInfos: [{
                fieldName: "time",
                label: "到达时间",
                visible: true
              }, {
                fieldName: "lng",
                label: "中心位置",
                visible: true
              }, {
                fieldName: "power",
                label: "风速风力",
                visible: true
              }, {
                fieldName: "pressure",
                label: "中心气压",
                visible: true
              }, {
                fieldName: "movespeed",
                label: "未来移速",
                visible: true
              }, {
                fieldName: "movedir",
                label: "未来移向",
                visible: true
              },]
            }]
          };
          var pointGraphic = new Graphic({
            geometry: point,
            symbol: markerSymbol,
            attributes: {
              tfbh: path[0].tfbh,
              cname: path[0].cname,
              ename: path[0].ename,
              iscurrent: path[0].iscurrent,
              time: moment(path[0].pointses[i].time).format('YYYY[-]MM[-]DD HH'),
              lng: path[0].pointses[i].lng,
              lat: path[0].pointses[i].lat,
              power: path[0].pointses[i].power,
              pressure: path[0].pointses[i].pressure,
              speed: path[0].pointses[i].speed,
              movespeed: path[0].pointses[i].movespeed,
              movedir: path[0].pointses[i].movedir,
              radius7: path[0].pointses[i].radius7,
              radius7quad: path[0].pointses[i].radius7quad,
              radius10: path[0].pointses[i].radius10,
              radius10quad: path[0].pointses[i].radius10quad,
              radius12: path[0].pointses[i].radius12,
              radius12quad: path[0].pointses[i].radius12quad,
              motype: "TF-01"
            },
            popupTemplate: template
          });
          mapPointArrLastData.push(pointGraphic);
          var polyline = {
            type: "polyline", // autocasts as new Polyline()
           paths: tempArray
          };
          var lineSymbol = {
            type: "simple-line", // autocasts as SimpleLineSymbol()
            color: [1, 100, 255],
            width: 2
          };

          var polylineGraphic = new Graphic({
            geometry: polyline,
            symbol: lineSymbol
          });
          lineGraphicList.push(polylineGraphic);
          pointGraphicList.push(pointGraphic);
        }
        if (saveIDChangeTyphoon.indexOf(id) == -1) {
          saveIDChangeTyphoon.push(id);
          saveChangeTyphoonList.push(pointGraphicList);
          saveChangeTyphoonLineList.push(lineGraphicList);
        }
        typhoonPathMap.set(id, pointGraphicList);
        typhoonPathLineMap.set(id, lineGraphicList);
        playTyphoonData(undefined,typhoonPathMap.get(id),typhoonPathLineMap.get(id),id,imagesPointLayerList,forecastLineList,forecastPointGraphicList,clickLayer,forecastClickLayer,mapLandingDataArrLastData,dottedLineArray,dottedLineColorArray);
        if(isShowNoStop){
        }else{
          playTyphoonLayerCacheData(pointGraphicList,id);
        }
      })
    }
  })

}

function gotoTyphoonData(lgt, lat) {
  view.goTo({
    center: [lgt, lat],
    zoom: 5,
    heading: 0,
    tilt: 0
  })

}
var indexTimeInterval;
var objTyphoons = {},isShowPlay;
//播放台风没有停编时候的图层
function playTyphoonNoStopLayerCacheData(data,id) {
  if(stopTyphoonNoEitingPathCacheIndexMap.size===1){
    return
  }
  let indexOne = 0;
  let indexStopTimeInterval = setInterval(function () {
    if(indexOne===0){
      onLoadPlayReproduce(data[indexOne],id);
    }else{
      if(data.length>7){
        let indexLength=indexOne+7;
        if(indexLength>=data.length){
          indexLength=data.length-1;
        }
        initLayerCacheTyphoonPath(data[indexOne],id,data[indexOne-1],data[indexLength]);
      }else{
        initLayerCacheTyphoonPath(data[indexOne],id,data[indexOne-1],data[data.length-1]);
      }
    }
    indexOne++;
    if (indexOne === data.length) {
      $("#typhoon-path-head-title").html("");
      $("#typhoon-path-head-title").css("display","block");
      $("#typhoon-path-head-title").html("时间："+moment(data[data.length-1].time).format('YYYY-MM-DD HH:mm'));
      indexOne = 0;
      clearInterval(indexStopTimeInterval);
    }
  }, 1000);
  stopTyphoonNoEitingPathCacheIndexMap.set(id, indexStopTimeInterval);
}
//播放台风当前图层
function playTyphoonLayerCacheData(data,id) {
  let indexOne = 0;
  let indexTimeInterval = setInterval(function () {
    if(indexOne===0){
      onLoadPlayReproduce(data[indexOne].attributes,id);
    }else{
      if(data.length>7){
        let indexLength=indexOne+7;
        if(indexLength>=data.length){
          indexLength=data.length-1;
        }
        initLayerCacheTyphoonPath(data[indexOne].attributes,id,data[indexOne-1].attributes,data[indexLength].attributes);
      }else{
        initLayerCacheTyphoonPath(data[indexOne].attributes,id,data[indexOne-1].attributes,data[data.length-1].attributes);
      }
    }
    indexOne++;
    if (indexOne == data.length) {
      indexOne = 0;
      $("#typhoon-path-head-title").html("");
      $("#typhoon-path-head-title").css("display","block");
      $("#typhoon-path-head-title").html("时间："+moment(data[data.length-1].attributes.time).format('YYYY-MM-DD HH:mm'));
      clearInterval(indexTimeInterval);
    }
  }, 1000);
  stopTyphoonPathCacheIndexMap.set(id, indexTimeInterval);
}
//播放台风路径
function playTyphoonData(isShow,data,lineData,id,imagesPointData,forecastData,forecastPointData,clickLayer,forecastClickLayer,mapLandingDataArrLastData,dottedLineArray,dottedLineColorArray) {
  if (isShow) {
    clearTyphoonPathLayer();
    for (var i = 0; i < saveIDList.length; i++) {
      if (lastCheckLayer == saveIDList[i]) {
        if (map.findLayerById("clickLayer" + saveIDList[i])) {
          map.remove(map.findLayerById("clickLayer" + saveIDList[i]))
        }
        if (map.findLayerById("showImagesPoint" + saveIDList[i])) {
          map.remove(map.findLayerById("showImagesPoint" + saveIDList[i]))
        }
        if (map.findLayerById("forecastClickLayer" + saveIDList[i])) {
          map.remove(map.findLayerById("forecastClickLayer" + saveIDList[i]))
        }
      }
    }
    isShowPlay="isShowPlay";
    initTyphoonPath(lastCheckDom,"isShowPlay");

  }else{
    let indexOne = 0,forecastTimeInterval,forecastIndex=0;
    let indexTimeInterval = setInterval(function () {
      clickLayer.add(data[indexOne]);
      clickLayer.add(lineData[indexOne]);
      if (map.findLayerById("showImagesPoint"+id)) {
        map.findLayerById("showImagesPoint"+id).source.items = imagesPointData[indexOne].source;
        map.findLayerById("showImagesPoint"+id).renderer.classBreakInfos = imagesPointData[indexOne].classBreakInfosArr;
      }
      initLoadSectorAre(data[indexOne].attributes,id);
      indexOne++;
      isLoadDataLayer=true;
      clearInterval(forecastTimeInterval);
      if (indexOne == data.length) {
        if(forecastData.length>0){
          forecastTimeInterval = setInterval(function () {
            onLoadChildForecast(forecastData[forecastIndex],forecastPointData[forecastIndex],forecastClickLayer);
            onClickDottedLine(dottedLineArray[forecastIndex],forecastClickLayer,dottedLineColorArray[forecastIndex]);
            forecastIndex++;
            if(forecastIndex === forecastData.length){
              forecastIndex=0;
              clearInterval(forecastTimeInterval);
            }
          },150);
        }
        if(mapLandingDataArrLastData.length>0){
          // mapLandingDataArrLastData[0].pointLayer.visible=false;
          console.info();
          mapLandingDataArrLastData[0].pointLayer.labelingInfo[0].labelPlacement="above-right";
          map.add(mapLandingDataArrLastData[0].pointLayer);
        }
        indexOne = 0;
        clearInterval(indexTimeInterval);
        isLoadDataLayer=false;
        require([
          "esri/geometry/Point",
        ], function (Point) {
          var pointMapData=new Point({
            x: data[data.length-1].attributes.lng,
            y: data[data.length-1].attributes.lat
          });
          // initLoadTyphoon(data[data.length-1].attributes, pointMapData,true);
          initLoadSectorAre(data[data.length-1].attributes,data[data.length-1].attributes.tfbh);
          initLoadNewestContent(data[data.length-1].attributes, pointMapData);
        });
        var typhoonDataObj=[];
        for (let i = 1; i <= 4; i++) {
          let obj = {
            mapPointArr: [],
            classBreakInfos: []
          };
          let mapPointArr = {
            adcd: null,
            addr: "",
            adnm: "",
            lgtd: data[data.length-1].attributes.lng,
            lttd: data[data.length-1].attributes.lat,
            mocd: "",
            monm: "",
            motype: "",
            oecd: "",
            stcd: "",
            wlevel: 1,
            z:20000
          };
          let classBreakInfos = {
            maxValue: 1,
            minValue: 1,
            symbol: {
              height: "42px",
              type: "picture-marker",
              url: "/images/typhoonpng/typhoon"+i+".png",
              width: "42px",
            }
          };
          obj.mapPointArr.push(mapPointArr);
          obj.classBreakInfos.push(classBreakInfos);
          typhoonDataObj.push(obj);
        }
        initLoadTyphoonPNG(id,typhoonDataObj);
      }
    }, 1000);
    stopTyphoonPathIndexMap.set(id, indexTimeInterval);
  }
}
function onLoadChildForecast(forecastData,forecastPointData,forecastClickLayer) {
  for(var i = 0; i< forecastData.length; i++){
    // forecastClickLayer.add(forecastData[i]);
    forecastClickLayer.add(forecastPointData[i]);
  }
}
function initLoadTyphoonPNG(id,data) {
  var  warmPointTyphoonTimer = window.setInterval(function () {
     if (typhoonTimerFlag === data.length) {
       typhoonTimerFlag = 0;
     }
     onClickDataTyphoonRefresh(id,data[typhoonTimerFlag]);
   }, 400);
  typhoonPathDataIndexMap.set(id, warmPointTyphoonTimer);
}
var  typhoonTimerFlag=0;
function onClickDataTyphoonRefresh(id,data) {
  require(["myMap/layer/PointLayer"], function (PointLayer) {
    var pointLayerObj1 = new PointLayer(data.mapPointArr, data.classBreakInfos, 'typhoonPointLayerBigScreenId');
    if (map.findLayerById("showImagesPoint"+id)) {
      map.findLayerById("showImagesPoint"+id).source.items = pointLayerObj1.source;
      map.findLayerById("showImagesPoint"+id).renderer.classBreakInfos = pointLayerObj1.classBreakInfosArr;
    }
    typhoonTimerFlag++;
  });
}
function clearTyphoonPathLayer(show,id) {
  $("#typhoon-path-head-title").css("display","none");
  clearTyphoonCacheMap(lastCheckLayer);
  if(id){
    clearInterval(stopTyphoonPathIndexMap.get(id));
  }
  if (map.findLayerById("forecastClickChildLayer")) {
    map.remove(map.findLayerById("forecastClickChildLayer"))
  }
  if (map.findLayerById("clickLayerSector")) {
    map.remove(map.findLayerById("clickLayerSector"))
  }
  if (map.findLayerById("typhoonPath24Hour")) {
    map.remove(map.findLayerById("typhoonPath24Hour"))
  }
  if (map.findLayerById("typhoonPath48Hour" )) {
    map.remove(map.findLayerById("typhoonPath48Hour" ))
  }
  if (map.findLayerById("typhoonPath72Hour" )) {
    map.remove(map.findLayerById("typhoonPath72Hour" ))
  }
  if(id){
  }else{
    if (map.findLayerById("typhoonPathCloudChart30Min" )) {
      map.remove(map.findLayerById("typhoonPathCloudChart30Min" ))
    }
    note.notify("clear.typhoon.radar");
    if (map.findLayerById("typhoonPathRadarChart" )) {
      map.remove(map.findLayerById("typhoonPathRadarChart" ))
    }
  }
  if (map.findLayerById("typhoonPathFloodChartOne" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartOne" ))
  }
  if (map.findLayerById("typhoonPathFloodChartTwo" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartTwo" ))
  }
  if (map.findLayerById("typhoonPathFloodChartThree" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartThree" ))
  }
  if (map.findLayerById("clickLayerSector" + id)) {
    map.remove(map.findLayerById("clickLayerSector" + id))
  }
  if (map.findLayerById("showLandingImagesPoint" + id)) {
    map.remove(map.findLayerById("showLandingImagesPoint" + id))
  }
  if (map.findLayerById("typhoonMotionCloud"+id )) {
    map.remove(map.findLayerById("typhoonMotionCloud"+id ))
  }
  if (show == true) {
    for (var i = 0; i < saveIDList.length; i++) {
      if (map.findLayerById("clickLayer" + saveIDList[i])) {
        map.remove(map.findLayerById("clickLayer" + saveIDList[i]))
      }
      if (map.findLayerById("showImagesPoint" + saveIDList[i])) {
        map.remove(map.findLayerById("showImagesPoint" + saveIDList[i]))
      }
      if (map.findLayerById("clickCordonTextLayer" + saveIDList[i])) {
        map.remove(map.findLayerById("clickCordonTextLayer" + saveIDList[i]))
      }
      if (map.findLayerById("forecastClickLayer" + saveIDList[i])) {
        map.remove(map.findLayerById("forecastClickLayer" + saveIDList[i]))
      }
      if (map.findLayerById("clickLayerSector" + saveIDList[i])) {
        map.remove(map.findLayerById("clickLayerSector" + saveIDList[i]))
      }
      if (map.findLayerById("showLandingImagesPoint" + saveIDList[i])) {
        map.remove(map.findLayerById("showLandingImagesPoint" + saveIDList[i]))
      }
      if (map.findLayerById("typhoonMotionCloud"+saveIDList[i] )) {
        map.remove(map.findLayerById("typhoonMotionCloud"+saveIDList[i] ))
      }
      clearInterval(typhoonPathDataIndexMap.get(saveIDList[i]));
      clearInterval(stopTyphoonPathIndexMap.get(saveIDList[i]));
    }
    if (map.findLayerById("clickLayerSector" + lastCheckLayer)) {
      map.remove(map.findLayerById("clickLayerSector" + lastCheckLayer))
    }
    if (map.findLayerById("clickCordonLayer")) {
      map.remove(map.findLayerById("clickCordonLayer"))
    }
    if (map.findLayerById("clickVigilance24Layer")) {
      map.remove(map.findLayerById("clickVigilance24Layer"))
    }
    if (map.findLayerById("clickVigilance48Layer")) {
      map.remove(map.findLayerById("clickVigilance48Layer"))
    }
  } else {
    for (var i = 0; i < saveIDList.length; i++) {
      if (id === saveIDList[i]) {
        if (map.findLayerById("clickLayer" + saveIDList[i])) {
          map.remove(map.findLayerById("clickLayer" + saveIDList[i]))
        }
        if (map.findLayerById("showImagesPoint" + saveIDList[i])) {
          map.remove(map.findLayerById("showImagesPoint" + saveIDList[i]))
        }
        if (map.findLayerById("forecastClickLayer" + saveIDList[i])) {
          map.remove(map.findLayerById("forecastClickLayer" + saveIDList[i]))
        }
        if (map.findLayerById("clickCordonTextLayer" + saveIDList[i])) {
          map.remove(map.findLayerById("clickCordonTextLayer" + saveIDList[i]))
        }
        if (map.findLayerById("showLandingImagesPoint" + saveIDList[i])) {
          map.remove(map.findLayerById("showLandingImagesPoint" + saveIDList[i]))
        }
        if (map.findLayerById("typhoonMotionCloud"+saveIDList[i] )) {
          map.remove(map.findLayerById("typhoonMotionCloud"+saveIDList[i] ))
        }
        clearInterval(typhoonPathDataIndexMap.get(saveIDList[i]));
        clearInterval(stopTyphoonPathIndexMap.get(saveIDList[i]));
      }
    }
  }
}
var predictionPointDataList=[],predictionLineDataList=[];

function clickTyphoonData(objs, mapPoint) {
  for (var l = 0; l < saveIDList.length; l++) {
    if (map.findLayerById("forecastClickLayer" + saveIDList[l])) {
      map.remove(map.findLayerById("forecastClickLayer" + saveIDList[l]))
    }
  }
  var forecastTemp=[],forecastTempArray=[];
  predictionPointDataList=[];
  predictionLineDataList=[];
  for (var i=0;i<allPointDataList[0].pointses.length;i++){
    if(objs.lng===allPointDataList[0].pointses[i].lng&&objs.lat===allPointDataList[0].pointses[i].lat){
      require([
        "esri/layers/GraphicsLayer",
        "esri/Graphic",
        "myMap/layer/PointLayer"
      ], function (GraphicsLayer, Graphic, PointLayer) {
        forecastClickLayer = new GraphicsLayer({"id": "forecastClickLayer" + lastCheckLayer});
        map.add(forecastClickLayer);
        var forecast=allPointDataList[0].pointses[i].forecast[0].points;
        for(var j=0;j<forecast.length;j++){
          forecastTemp = [];
          forecastTemp.push(forecast[j].lng);
          forecastTemp.push(forecast[j].lat);
          forecastTemp.push(20000);
          forecastTempArray.push(forecastTemp);
          var forecastColor = "#8cff3f";
          var forecastPolyline = {
            type: "polyline", // autocasts as new Polyline()
            paths: forecastTempArray
          };
          var forecastSymbol = {
            type: "simple-line", // autocasts as SimpleLineSymbol()
            color: "#8cff3f",
            style: "short-dash",
          };
          forecastSymbol.style = "short-dash-dot";
          var polylineGraphic = new Graphic({
            geometry: forecastPolyline,
            symbol: forecastSymbol
          });
          var forecastPoint = {
            type: "point", // autocasts as new Point()
            x: forecast[j].lng,
            y: forecast[j].lat,
            z: 20000
          };
          var forecastMarkerSymbol = {
            type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
            color: forecastColor,
            outline: {
              // autocasts as new SimpleLineSymbol()
              color: forecastColor,
              width: 1
            }
          };
          var forecastTemplate = {
            title: "{name}",
            content: [{
              type: "fields",
              fieldInfos: [{
                fieldName: "time",
                label: "到达时间",
                visible: true
              }, {
                fieldName: "lng",
                label: "中心位置",
                visible: true
              }, {
                fieldName: "power",
                label: "风速风力",
                visible: true
              }, {
                fieldName: "pressure",
                label: "中心气压",
                visible: true
              }, {
                fieldName: "movespeed",
                label: "未来移速",
                visible: true
              }, {
                fieldName: "movedir",
                label: "未来移向",
                visible: true
              },]
            }]
          };
          var forecastPointGraphic = new Graphic({
            geometry: forecastPoint,
            symbol: forecastMarkerSymbol,
            attributes: {
              tfbh: allPointDataList[0].tfbh,
              cname: allPointDataList[0].cname,
              ename: allPointDataList[0].ename,
              iscurrent: forecast[j].iscurrent,
              time: moment(forecast[j].time).format('YYYY[-]MM[-]DD HH'),
              lng: forecast[j].lng,
              lat: forecast[j].lat,
              power: forecast[j].power,
              pressure: forecast[j].pressure,
              speed: forecast[j].speed,
              movespeed: forecast[j].movespeed,
              movedir: forecast[j].movedir,
              radius7: forecast[j].radius7,
              radius7quad: forecast[j].radius7quad,
              radius10: forecast[j].radius10,
              radius10quad: forecast[j].radius10quad,
              radius12: forecast[j].radius12,
              radius12quad: forecast[j].radius12quad,
              motype: "TF-01"
            },
            popupTemplate: forecastTemplate
          });
          predictionLineDataList.push(polylineGraphic);
          predictionPointDataList.push(forecastPointGraphic);
        }
      });
    }
  }
  var indexprediction=0;
  var indexPredictionTimeInterval = setInterval(function () {
    forecastClickLayer.add(predictionLineDataList[indexprediction]);
    forecastClickLayer.add(predictionPointDataList[indexprediction]);
    indexprediction++;
    if (indexprediction === predictionPointDataList.length) {
      indexprediction = 0;
      clearInterval(indexPredictionTimeInterval);
    }
  }, 150)
}

//台风点数据点击
function initLoadTyphoon(objs, mapPoint,ishow) {
  var monm = (objs.tfbh ? (objs.tfbh).substring(2, objs.tfbh.length) : '') + (objs.cname ? objs.cname : '') + "(" + (objs.ename ? objs.ename : '') + ")";
  var current = "";
  if (objs.iscurrent == 0) {
    current = "已停编"
  } else {
    current = "";
  }
  monm += current;
  var obj = {
    monm: monm, //
    lng: objs.lng ? objs.lng : '-', //
    lat: objs.lat ? objs.lat : '-', //
    movedir: objs.movedir ? objs.movedir : '-', //
    movespeed: objs.movespeed ? objs.movespeed : '-', //
    power: objs.power ? objs.power : '-', //
    pressure: objs.pressure ? objs.pressure : '-', //
    time: objs.time, //
    mapPoint: mapPoint,
    speed: objs.speed,
    radius7:objs.radius7 ? objs.radius7 : '-',
  };
  var html = '';
  html += '<div id="popup" class="pointlayer-popup">' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">中心位置</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.lat + 'N/' + obj.lng + 'E' + '</div>' +
    '</div>' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">风速风力</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.speed + '米/秒(' + obj.power + '级)' + '</div>' +
    '</div>' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">中心气压</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.pressure + '(百帕)' + '</div>' +
    '</div>';
  html += '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">未来移速</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.movespeed + '公里/小时' + '</div>' +
    '</div>';
  html += '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">未来移向</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.movedir + '</div>' +
    '</div>';
  html += '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">到达时间</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.time + '时' + '</div>' +
    '</div>';
  html += '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">七级半径</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.radius7 + ' 公里' + '</div>' +
    '</div>' +
    '</div>';
  showPopup(html, obj);
  // initLoadSectorAre(objs,objs.tfbh);
  loadTyphoonMotionCloud(objs,objs.tfbh,ishow);//台风数据点击加载云图
  onLoadTimeRadarLayer(objs.time,objs.tfbh,undefined,true);//台风数据点击加载雷达
  onLoadTimePrecipitationLayer(objs.time,objs.tfbh,undefined,true);//台风数据点击加载降水
  onLoadTimeFloodTyphoonPathLayer(objs.time,objs.tfbh,undefined,true);//台风数据点击加载洪水
  $("#typhoon-path-head-title").html("");
  $("#typhoon-path-head-title").css("display","block");
  $("#typhoon-path-head-title").html("时间："+moment(objs.time).format('YYYY-MM-DD HH:mm'));
}
//台风预报数据点击
function initLoadPredictionTyphoon(objs, mapPoint) {
  var monm = (objs.cname ? objs.cname : '') + "(" + (objs.ename ? objs.ename : '') + ")";
  var current = "";
  if (objs.iscurrent == 0) {
    current = "已停编"
  } else {
    current = "";
  }
  monm += current;
  var obj = {
    monm: monm, //
    lng: objs.lng ? objs.lng : '-', //
    lat: objs.lat ? objs.lat : '-', //
    movedir: objs.movedir ? objs.movedir : '-', //
    movespeed: objs.movespeed ? objs.movespeed : '-', //
    power: objs.power ? objs.power : '-', //
    pressure: objs.pressure ? objs.pressure : '-', //
    time: objs.time, //
    mapPoint: mapPoint,
    speed: objs.speed,
    radius7:objs.radius7 ? objs.radius7 : '-',
  };
  var html = '';
  html += '<div id="popup" class="pointlayer-popup">' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">当前位置</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.lat + 'N/' + obj.lng + 'E' + '</div>' +
    '</div>' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">最大风速</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.speed + '米/秒' + '</div>' +
    '</div>' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">中心气压</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.pressure + '百帕' + '</div>' +
    '</div>';
  html += '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">风力</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.power  + '</div>' +
    '</div>' +
    '</div>';
  showPopup(html, obj);
  initLoadSectorAre(objs,objs.tfbh)
}
//台风登陆点数据点击
function initLoadLandingTyphoon(objs, mapPoint) {
  var monm = (objs.cname ? objs.cname : '') + "(" + (objs.ename ? objs.ename : '') + ")";
  var current = "";
  if (objs.iscurrent == 0) {
    current = "已停编"
  } else {
    current = "";
  }
  monm += current;
  var obj = {
    monm: monm, //
    lng: objs.lng ? objs.lng : '-', //
    lat: objs.lat ? objs.lat : '-', //
    movedir: objs.movedir ? objs.movedir : '-', //
    movespeed: objs.movespeed ? objs.movespeed : '-', //
    power: objs.power ? objs.power : '-', //
    pressure: objs.pressure ? objs.pressure : '-', //
    time: objs.time, //
    mapPoint: mapPoint,
    speed: objs.speed,
    radius7:objs.radius7 ? objs.radius7 : '-',
  };
  var html = '';
  html += '<div id="popup" class="pointlayer-popup">' +
    '<div class="pointlayer-popup-item">' +
    // '<div class="popup-item-name popup-item">当前位置</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.monm + '</div>' +
    '</div>'+
    '</div>';
  showPopup(html, obj);
  initLoadSectorAre(objs,objs.tfbh)
}
//鼠标点击画台风影响面积
var clickSectorLayer;

function initLoadSectorAre(objs,id) {
  if (map.findLayerById("clickLayerSector"+id)) {
    map.remove(map.findLayerById("clickLayerSector"+id))
  }
  require([
    "esri/layers/GraphicsLayer",
    "esri/Graphic"
  ], function (GraphicsLayer, Graphic) {
    clickSectorLayer = new GraphicsLayer({"id": "clickLayerSector"+id});
    map.add(clickSectorLayer);
    if (objs.radius7 != undefined) {
      var points = new Array();
      var center = [];
      var areLineSymbol = {
        type: "simple-fill",
        color: [222, 109, 79, 0.2],
        outline: {
          color: [255, 255, 255],
          width: 1
        }
      };

      function getPoints(center, cradius, startAngle) {
        var radius = cradius / 100;
        var pointNum = 90;
        var endAngle = startAngle + 90;

        var sin;
        var cos;
        var x;
        var y;
        var angle;

        for (var i = 0; i <= pointNum; i++) {
          angle = startAngle + (endAngle - startAngle) * i
            / pointNum;
          sin = Math.sin(angle * Math.PI / 180);
          cos = Math.cos(angle * Math.PI / 180);
          x = center[0] + radius * sin;
          y = center[1] + radius * cos;
          points.push([x, y]);
        }
      }

      center.push(objs.lng);
      center.push(objs.lat);
      if(objs.radius7quad===null){
        return;
      }
      if(objs.radius7quad){
        getPoints(center, JSON.parse(objs.radius7quad).ne, 0);//东北方向
        getPoints(center, JSON.parse(objs.radius7quad).se, 90);
        getPoints(center, JSON.parse(objs.radius7quad).sw, 180);
        getPoints(center, JSON.parse(objs.radius7quad).nw, 270);
      }
      points[points.length] = points[0];//首尾连接
      var arePolygon = {
        type: "polygon",
        rings: points
      };
      var polylineGraphic = new Graphic({
        geometry: arePolygon,
        symbol: areLineSymbol
      });
      clickSectorLayer.add(polylineGraphic);
    }
    if (objs.radius10 != undefined) {
      var points = new Array();
      var center = [];
      var areLineSymbol = {
        type: "simple-fill",
        color: [200, 39, 79, 0.2],
        outline: {
          color: [255, 255, 255],
          width: 1
        }
      };

      function getPoint10s(center, cradius, startAngle) {
        var radius = cradius / 100;
        var pointNum = 90;
        var endAngle = startAngle + 90;

        var sin;
        var cos;
        var x;
        var y;
        var angle;

        for (var i = 0; i <= pointNum; i++) {
          angle = startAngle + (endAngle - startAngle) * i
            / pointNum;
          sin = Math.sin(angle * Math.PI / 180);
          cos = Math.cos(angle * Math.PI / 180);
          x = center[0] + radius * sin;
          y = center[1] + radius * cos;
          points.push([x, y]);
        }
      }

      center.push(objs.lng);
      center.push(objs.lat);
      if(objs.radius10quad===null){
        return;
      }
      if(objs.radius10quad){
        getPoint10s(center, JSON.parse(objs.radius10quad).ne, 0);//东北方向
        getPoint10s(center, JSON.parse(objs.radius10quad).se, 90);
        getPoint10s(center, JSON.parse(objs.radius10quad).sw, 180);
        getPoint10s(center, JSON.parse(objs.radius10quad).nw, 270);
      }
      points[points.length] = points[0];//首尾连接
      var arePolygon = {
        type: "polygon",
        rings: points
      };
      var polylineGraphic = new Graphic({
        geometry: arePolygon,
        symbol: areLineSymbol
      });
      clickSectorLayer.add(polylineGraphic);
    }
    if (objs.radius12 != undefined) {
      var points = new Array();
      var center = [];
      var areLineSymbol = {
        type: "simple-fill",
        color: [227, 139, 79, 0.2],
        outline: {
          color: [255, 255, 255],
          width: 1
        }
      };

      function getPoint12s(center, cradius, startAngle) {
        var radius = cradius / 100;
        var pointNum = 90;
        var endAngle = startAngle + 90;

        var sin;
        var cos;
        var x;
        var y;
        var angle;

        for (var i = 0; i <= pointNum; i++) {
          angle = startAngle + (endAngle - startAngle) * i
            / pointNum;
          sin = Math.sin(angle * Math.PI / 180);
          cos = Math.cos(angle * Math.PI / 180);
          x = center[0] + radius * sin;
          y = center[1] + radius * cos;
          points.push([x, y]);
        }
      }

      center.push(objs.lng);
      center.push(objs.lat);
      if(objs.radius12quad===null){
        return;
      }
      if(objs.radius12quad){
        getPoint12s(center, JSON.parse(objs.radius12quad).ne, 0);//东北方向
        getPoint12s(center, JSON.parse(objs.radius12quad).se, 90);
        getPoint12s(center, JSON.parse(objs.radius12quad).sw, 180);
        getPoint12s(center, JSON.parse(objs.radius12quad).nw, 270);
      }
      points[points.length] = points[0];//首尾连接
      var arePolygon = {
        type: "polygon",
        rings: points
      };
      var polylineGraphic = new Graphic({
        geometry: arePolygon,
        symbol: areLineSymbol
      });
      clickSectorLayer.add(polylineGraphic);
    }
  })
}
$('#real01').click(function() {
  if (map.findLayerById("typhoonPathDataRainReal" )) {
    map.remove(map.findLayerById("typhoonPathDataRainReal" ))
  }
  if (map.findLayerById("typhoonPath24Hour")) {
    map.remove(map.findLayerById("typhoonPath24Hour"))
  }
  if (map.findLayerById("typhoonPath48Hour" )) {
    map.remove(map.findLayerById("typhoonPath48Hour" ))
  }
  if (map.findLayerById("typhoonPath72Hour" )) {
    map.remove(map.findLayerById("typhoonPath72Hour" ))
  }
  if($(this).hasClass("typhoon-check-selected")){
    return
  }
  let body = {
    interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
    method: "getLayerPlayInfoByMode",
    args: ["1",1,0,{}]
  };
  ajaxCallJson(body, '/rpc', function (res) {
    if(res.data){
      let realTime=moment(SYSTEM.getSystemTime()).format('H');
      if(realTime==="8"||realTime==="9"){
        realTime=moment(SYSTEM.getSystemTime()).format('YYYY-MM-DDT00:00:00')+"Z"
      }else{
        realTime=moment(SYSTEM.getSystemTime()).add(24, 'hours').format('YYYY-MM-DDT00:00:00')+"Z";
      }
      var aaaa=  new StatusableWMSLayer({
        id: "typhoonPathDataRainReal",
        url: res.data.nodes[0].url,
        sublayers: [{
          name: res.data.nodes[0].layers
        }],
        fullExtent: {
          xmin: res.data.nodes[0].minx,
          xmax: res.data.nodes[0].maxx,
          ymin: res.data.nodes[0].miny,
          ymax: res.data.nodes[0].maxy,
        },
        customLayerParameters: {
          dim_batch:  "",
          dim_type: res.data.nodes[0].viewparams.dim_type,
          styles:  res.data.nodes[0].styles,
          time:realTime,
        },
        spatialReference: 4326,
        opacity: 0.6,
        visible: true
      });
      map.add(aaaa);
    }
  })
});
$('#rc01').click(function() {
  if (map.findLayerById("typhoonPathDataRainReal")) {
    map.remove(map.findLayerById("typhoonPathDataRainReal"))
  }
  if (map.findLayerById("typhoonPath24Hour")) {
    map.remove(map.findLayerById("typhoonPath24Hour"))
  }
  if (map.findLayerById("typhoonPath48Hour" )) {
    map.remove(map.findLayerById("typhoonPath48Hour" ))
  }
  if (map.findLayerById("typhoonPath72Hour" )) {
    map.remove(map.findLayerById("typhoonPath72Hour" ))
  }
  var aaaa=  new StatusableWMSLayer({
    id: "typhoonPath24Hour",
    url: typhoonPathRainRUL,
    sublayers: [{
      name: "after_china"
    }],
    fullExtent: {
      maxx: 163.699664036523,
      maxy: 59.9600713430146,
      minx: 46.7238942459223,
      miny: 7.43324811210926,
    },
    customLayerParameters: {
      dim_batch:  moment(SYSTEM.getSystemTime()).add(-8, 'hours').format('YYYYMMDDHH'),
      dim_type: "after24",
      styles: "rain24",
      time: moment(SYSTEM.getSystemTime()).add(-8, 'hours').add(1, 'days').format('YYYY-MM-DD HH:00:00 ')
    },
    spatialReference: 4326,
    opacity: 0.6,
    visible: true
  })
  map.add(aaaa);
});
$('#rc02').click(function() {
  if (map.findLayerById("typhoonPathDataRainReal")) {
    map.remove(map.findLayerById("typhoonPathDataRainReal"))
  }
  if (map.findLayerById("typhoonPath24Hour")) {
    map.remove(map.findLayerById("typhoonPath24Hour"))
  }
  if (map.findLayerById("typhoonPath48Hour" )) {
    map.remove(map.findLayerById("typhoonPath48Hour" ))
  }
  if (map.findLayerById("typhoonPath72Hour" )) {
    map.remove(map.findLayerById("typhoonPath72Hour" ))
  }
  var aaaa=  new StatusableWMSLayer({
    id: "typhoonPath48Hour",
    url: typhoonPathRainRUL,
    sublayers: [{
      name: "after_china"
    }],
    fullExtent: {
      maxx: 163.699664036523,
      maxy: 59.9600713430146,
      minx: 46.7238942459223,
      miny: 7.43324811210926,
    },
    customLayerParameters: {
      dim_batch:  moment(SYSTEM.getSystemTime()).add(-8, 'hours').format('YYYYMMDDHH'),
      dim_type: "after24",
      styles: "rain24",
      time: moment(SYSTEM.getSystemTime()).add(-8, 'hours').add(2, 'days').format('YYYY-MM-DD HH:00:00 ')
    },
    spatialReference: 4326,
    opacity: 0.6,
    visible: true
  })
  map.add(aaaa);
});
$('#rc03').click(function() {
  if (map.findLayerById("typhoonPathDataRainReal")) {
    map.remove(map.findLayerById("typhoonPathDataRainReal" ))
  }
  if (map.findLayerById("typhoonPath24Hour")) {
    map.remove(map.findLayerById("typhoonPath24Hour"))
  }
  if (map.findLayerById("typhoonPath48Hour" )) {
    map.remove(map.findLayerById("typhoonPath48Hour" ))
  }
  if (map.findLayerById("typhoonPath72Hour" )) {
    map.remove(map.findLayerById("typhoonPath72Hour" ))
  }
  var aaaa=  new StatusableWMSLayer({
    id: "typhoonPath72Hour",
    url: typhoonPathRainRUL,
    sublayers: [{
      name: "after_china"
    }],
    fullExtent: {
      maxx: 163.699664036523,
      maxy: 59.9600713430146,
      minx: 46.7238942459223,
      miny: 7.43324811210926,
    },
    customLayerParameters: {
      dim_batch:  moment(SYSTEM.getSystemTime()).add(-8, 'hours').format('YYYYMMDDHH'),
      dim_type: "after24",
      styles: "rain24",
      time: moment(SYSTEM.getSystemTime()).add(-8, 'hours').add(3, 'days').format('YYYY-MM-DD HH:00:00 ')
    },
    spatialReference: 4326,
    opacity: 0.6,
    visible: true
  })
  map.add(aaaa);
});
//云图
function onLoadTyphoonCloudChart(isFirst){
  if($('#typhoon-path-cloud-chart ').attr('flag')==="radar") {
    isShowFirstRadar=0;
    $('#typhoon-path-cloud-chart').attr('flag', 'table');
    $('#typhoon-path-cloud-chart').html(" ");
    $('#typhoon-path-cloud-chart').html('<img  src="/images/typhoonpng/radar.png"><span style="color: #ffffff">云图</span>');
    if(lastCheckLayerCheckBJTimeID){
      loadTyphoonMotionCloud(lastCheckLayerCheckBJTimeID,lastCheckLayer,undefined,true,true);//台风数据点击加载云图
    }
    // note.notify("visible.typhoon.radar");
    // if(isFirst){
    // }else{
    //   if($('#typhoon-path-radar ').attr('flag')==="table"){
    //     onLoadNewestRadar();
    //   }
    // }
  }else{
    $('#typhoon-path-cloud-chart').attr('flag','radar');
    $('#typhoon-path-cloud-chart').html(" ");
    $('#typhoon-path-cloud-chart').html('<img  src="/images/typhoonpng/radar-check.png"><span style="color: #00A8FF">云图</span>');
    if (map.findLayerById("typhoonCacheMotionCloud"+lastCheckLayer+lastCheckLayerCheckID)) {
      map.remove(map.findLayerById("typhoonCacheMotionCloud"+lastCheckLayer+lastCheckLayerCheckID))
    }
    if (map.findLayerById("typhoonMotionCloud"+lastCheckLayer)) {
      map.remove(map.findLayerById("typhoonMotionCloud"+lastCheckLayer))
    }
    clearTyphoonCacheMap(lastCheckLayer,true);
    // if (map.findLayerById("typhoonPathCloudChart30Min" )) {
    //   map.remove(map.findLayerById("typhoonPathCloudChart30Min" ))
    // }
    // if($('#typhoon-path-radar ').attr('flag')==="cloud"){
    //   isShowFirstRadar=0;
    //   if (map.findLayerById("typhoonPathRadarChart" )) {
    //     map.remove(map.findLayerById("typhoonPathRadarChart" ))
    //   }
    // }
    // if(isShowFirstRadar===0){
    //   note.notify("clear.typhoon.radar");
    // }
    // for (var i = 0; i < saveIDList.length; i++) {
    //   if (map.findLayerById("typhoonMotionCloud"+saveIDList[i] )) {
    //     map.remove(map.findLayerById("typhoonMotionCloud"+saveIDList[i] ))
    //   }
    // }
  }
}
//加载最新云图
function onLoadNewestCloudChart(){
  if (map.findLayerById("typhoonPathCloudChart30Min" )) {
    map.remove(map.findLayerById("typhoonPathCloudChart30Min" ))
  }
  var aaaa=  new StatusableWMSLayer({
    id: "typhoonPathCloudChart30Min",
    url: typhoonPathRainRUL,
    sublayers: [{
      name: "satellite_china"
    }],
    fullExtent: {
      xmin: 46.7238942459223,
      xmax: 163.699664036523,
      ymin: 7.43324811210926,
      ymax: 59.9600713430146,
    },
    customLayerParameters: {
      dim_batch:  "",
      dim_type: "",
      styles: "",
      time: moment(SYSTEM.getSystemTime()).add(-8, 'hours').format('YYYY-MM-DD HH:00:00')
      // time:"2019-08-10 08:00:00"
    },
    spatialReference: 4326,
    opacity: 1,
    visible: true
  });
  map.add(aaaa);
}

var isShowFirstRadar=0;
//雷达
function onLoadTyphoonRadar(){
  if($('#typhoon-path-radar ').attr('flag')==="cloud"){
    isShowFirstRadar=1;
    $('#typhoon-path-radar').attr('flag','table');
    $('#typhoon-path-radar').html(" ");
    $('#typhoon-path-radar').html('<img  src="/images/typhoonpng/cloud.png"><span style="color: #ffffff">雷达</span>');
    onLoadTimeRadarLayer(lastCheckLayerCheckBJTimeID,lastCheckLayer,undefined,true,true);//台风数据点击加载雷达
    // note.notify("visible.typhoon.cloud");
    // if($('#typhoon-path-cloud-chart ').attr('flag')==="table") {
    //   onLoadNewestCloudChart();
    // }
  }else{
    $('#typhoon-path-radar').attr('flag','cloud');
    $('#typhoon-path-radar').html(" ");
    $('#typhoon-path-radar').html('<img  src="/images/typhoonpng/cloud-check.png"><span style="color: #00A8FF">雷达</span>');
    if (map.findLayerById("typhoonPathRadarChart"+lastCheckLayer+lastCheckLayerCheckID)) {
      map.remove(map.findLayerById("typhoonPathRadarChart"+lastCheckLayer+lastCheckLayerCheckID))
    }
    if (map.findLayerById("typhoonPathCloudChartCheckClick"+lastCheckLayer)) {
      map.remove(map.findLayerById("typhoonPathCloudChartCheckClick"+lastCheckLayer))
    }
    clearTyphoonCacheMap(lastCheckLayer,true);
    // if (map.findLayerById("typhoonPathRadarChart" )) {
    //   map.remove(map.findLayerById("typhoonPathRadarChart" ))
    // }
    // if($('#typhoon-path-cloud-chart ').attr('flag')==="radar") {
    //   if (map.findLayerById("typhoonPathCloudChart30Min" )) {
    //     map.remove(map.findLayerById("typhoonPathCloudChart30Min" ))
    //   }
    // }
    // if(isShowFirstRadar===1){
    //   note.notify("clear.typhoon.radar");
    // }
  }
}
//洪水
function onLoadTyphoonFlood() {
  if($('#check-typhoon-flood-data ').attr('flag')==="flood"){
    $('#check-typhoon-flood-data').attr('flag','table');
    $('#check-typhoon-flood-data').html(" ");
    $('#check-typhoon-flood-data').html('<img  src="/images/typhoonpng/flood.png"><span style="color: #ffffff">洪水</span>');
    onLoadTimeFloodTyphoonPathLayer(lastCheckLayerCheckBJTimeID,lastCheckLayer,undefined,true,true);//台风数据点击加载洪水
  }else{
    $('#check-typhoon-flood-data').attr('flag','flood');
    $('#check-typhoon-flood-data').html(" ");
    $('#check-typhoon-flood-data').html('<img  src="/images/typhoonpng/flood-check.png"><span style="color: #00A8FF">洪水</span>');
    if (map.findLayerById("typhoonPathFloodChartOne"+lastCheckLayer+lastCheckLayerCheckID)) {
      map.remove(map.findLayerById("typhoonPathFloodChartOne"+lastCheckLayer+lastCheckLayerCheckID))
    }
    if (map.findLayerById("typhoonPathFloodChartOneCheckClick"+lastCheckLayer)) {
      map.remove(map.findLayerById("typhoonPathFloodChartOneCheckClick"+lastCheckLayer))
    }
    clearTyphoonCacheMap(lastCheckLayer,true);
  }
}
//降水
function onLoadTyphoonRain() {
  if($('#check-typhoon-rain-data ').attr('flag')==="rain"){
    $('#check-typhoon-rain-data').attr('flag','table');
    $('#check-typhoon-rain-data').html(" ");
    $('#check-typhoon-rain-data').html('<img  src="/images/typhoonpng/rain.png"><span style="color: #ffffff">降水</span>');
    onLoadTimePrecipitationLayer(lastCheckLayerCheckBJTimeID,lastCheckLayer,undefined,true,true);//台风数据点击加载降水
  }else{
    $('#check-typhoon-rain-data').attr('flag','rain');
    $('#check-typhoon-rain-data').html(" ");
    $('#check-typhoon-rain-data').html('<img  src="/images/typhoonpng/rain-check.png"><span style="color: #00A8FF">降水</span>');
    if (map.findLayerById("typhoonPathPrecipitationChart"+lastCheckLayer+lastCheckLayerCheckID)) {
      map.remove(map.findLayerById("typhoonPathPrecipitationChart"+lastCheckLayer+lastCheckLayerCheckID))
    }
    if (map.findLayerById("typhoonPathPrecipitationChartCheckClick"+lastCheckLayer)) {
      map.remove(map.findLayerById("typhoonPathPrecipitationChartCheckClick"+lastCheckLayer))
    }
    clearTyphoonCacheMap(lastCheckLayer,true);
  }
}
//加载最新雷达图
function onLoadNewestRadar(){
  if (map.findLayerById("typhoonPathRadarChart" )) {
    map.remove(map.findLayerById("typhoonPathRadarChart" ))
  }
  let body = {
    interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
    method: "getLayerPlayInfoByMode",
    args: ["9",1,0,{}]
  };
  ajaxCallJson(body, '/rpc', function (res) {
    if(res.data){
      var dataTime=moment(res.data.nodes[1].dim_batch,"YYYY-MM-DD HH:mm").unix();
      var aaaa=  new StatusableWMSLayer({
        id: "typhoonPathRadarChart",
        url: res.data.nodes[1].url,
        sublayers: [{
          name: res.data.nodes[1].layers
        }],
        fullExtent: {
          xmin: res.data.nodes[1].minx,
          xmax: res.data.nodes[1].maxx,
          ymin: res.data.nodes[1].miny,
          ymax: res.data.nodes[1].maxy,
        },
        customLayerParameters: {
          dim_batch:  res.data.nodes[1].dim_batch,
          dim_type: "",
          styles:  res.data.nodes[1].styles,
          time:moment.unix(dataTime).format("YYYY-MM-DDTHH:mm:ss")+"Z",
        },
        spatialReference: 4326,
        opacity: 0.6,
        visible: true
      })
      map.add(aaaa);
    }
  })
}
$('#flood01').click(function() {
  if (map.findLayerById("typhoonPathFloodChartOne" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartOne" ))
  }
  if (map.findLayerById("typhoonPathFloodChartTwo" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartTwo" ))
  }
  if (map.findLayerById("typhoonPathFloodChartThree" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartThree" ))
  }
  var aaaa=  new StatusableWMSLayer({
    id: "typhoonPathFloodChartOne",
    url: typhoonPathFloodRUL,
    sublayers: [{
      name: "xyyj:fore_rf"
    }],
    fullExtent: {
      xmin: 46.7238942459223,
      xmax: 163.699664036523,
      ymin: 7.43324811210926,
      ymax: 59.9600713430146,
    },
    customLayerParameters: {
      time:  moment(SYSTEM.getSystemTime()).add(3, 'd').format('YYYY-MM-DDHH'),
    },
    spatialReference: 4326,
    opacity: 0.6,
    visible: true
  });
  map.add(aaaa);
});
$('#flood02').click(function() {
  if (map.findLayerById("typhoonPathFloodChartOne" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartOne" ))
  }
  if (map.findLayerById("typhoonPathFloodChartTwo" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartTwo" ))
  }
  if (map.findLayerById("typhoonPathFloodChartThree" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartThree" ))
  }
  var aaaa=  new StatusableWMSLayer({
    id: "typhoonPathFloodChartTwo",
    url: typhoonPathFloodRUL,
    sublayers: [{
      name: "xyyj:fore_sf"
    }],
    fullExtent: {
      xmin: 46.7238942459223,
      xmax: 163.699664036523,
      ymin: 7.43324811210926,
      ymax: 59.9600713430146,
    },
    customLayerParameters: {
      time:  moment(SYSTEM.getSystemTime()).add(3, 'd').format('YYYY-MM-DDHH'),
    },
    spatialReference: 4326,
    opacity: 0.6,
    visible: true
  });
  map.add(aaaa);
});
$('#flood03').click(function() {
  if (map.findLayerById("typhoonPathFloodChartOne" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartOne" ))
  }
  if (map.findLayerById("typhoonPathFloodChartTwo" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartTwo" ))
  }
  if (map.findLayerById("typhoonPathFloodChartThree" )) {
    map.remove(map.findLayerById("typhoonPathFloodChartThree" ))
  }
  var aaaa=  new StatusableWMSLayer({
    id: "typhoonPathFloodChartThree",
    url: typhoonPathFloodRUL,
    sublayers: [{
      name: "xyyj:fore_72f"
    }],
    fullExtent: {
      xmin: 46.7238942459223,
      xmax: 163.699664036523,
      ymin: 7.43324811210926,
      ymax: 59.9600713430146,
    },
    customLayerParameters: {
      time:  moment(SYSTEM.getSystemTime()).add(3, 'd').format('YYYY-MM-DDHH'),
    },
    spatialReference: 4326,
    opacity: 0.6,
    visible: true
  });
  map.add(aaaa);
});
$("#check-typhoon-rain-data span").click(function() {
  if($(this).hasClass("typhoon-check-selected")){
    $(this).removeClass('typhoon-check-selected');
    if (map.findLayerById("typhoonPathDataRainReal")) {
      map.remove(map.findLayerById("typhoonPathDataRainReal"))
    }
    if (map.findLayerById("typhoonPath24Hour")) {
      map.remove(map.findLayerById("typhoonPath24Hour"))
    }
    if (map.findLayerById("typhoonPath48Hour" )) {
      map.remove(map.findLayerById("typhoonPath48Hour" ))
    }
    if (map.findLayerById("typhoonPath72Hour" )) {
      map.remove(map.findLayerById("typhoonPath72Hour" ))
    }
  }else{
    $(this).siblings('span').removeClass('typhoon-check-selected');
    $(this).addClass('typhoon-check-selected');
  }
});
$("#check-typhoon-flood-data span").click(function() {
  if($(this).hasClass("typhoon-check-selected")){
    $(this).removeClass('typhoon-check-selected');
    if (map.findLayerById("typhoonPathFloodChartOne" )) {
      map.remove(map.findLayerById("typhoonPathFloodChartOne" ))
    }
    if (map.findLayerById("typhoonPathFloodChartTwo" )) {
      map.remove(map.findLayerById("typhoonPathFloodChartTwo" ))
    }
    if (map.findLayerById("typhoonPathFloodChartThree" )) {
      map.remove(map.findLayerById("typhoonPathFloodChartThree" ))
    }
  }else{
    $(this).siblings('span').removeClass('typhoon-check-selected');
    $(this).addClass('typhoon-check-selected');
  }
});
$("#typhoon-query-hide-content").click(function () {
  $("#click-typhoon-path-list").css("display","block");
  $("#typhoon-query-win").css("display","none");
  $("#typhoon-query-content").css("display","none");
  $("#typhoon-query-layer-contort").css("display","none");
  $("#typhoon-newest-query-content").css("display","none");
});
$("#click-typhoon-path-list").click(function () {
  $("#typhoon-query-win").css("display","block").css("top", "140px").css("right", "10px");
  var wq_content = $("#typhoon-query-content");
  if(saveIDList&&saveIDList.length===0){
    $("#typhoon-query-content").css("display","none");
    $("#typhoon-query-layer-contort").css("display","none");
  }else{
    wq_content.css("display", "block");
    wq_content.css("top", "355px").css("right", "10px");
    $("#typhoon-query-layer-contort").css("display","block").css("top", "605px").css("right", "10px");
  }
});
function initLoadNewestContent(obj) {
  $("#typhoon-newest-query-content").css("display","block").css("top", "670px").css("right", "10px");
  var html = '';
  html += '<div id="popup" class="pointlayer-popup" >' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">中心位置</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.lat + 'N/' + obj.lng + 'E' + '</div>' +
    '</div>' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">风速风力</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.speed + '米/秒(' + obj.power + '级)' + '</div>' +
    '</div>' +
    '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">中心气压</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.pressure + '(百帕)' + '</div>' +
    '</div>';
  html += '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">未来移速</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.movespeed + '公里/小时' + '</div>' +
    '</div>';
  html += '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">未来移向</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.movedir + '</div>' +
    '</div>';
  html += '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">到达时间</div>' +
    '<div class="popup-item-vlaue popup-item">' + obj.time + '时' + '</div>' +
    '</div>';
  html += '<div class="pointlayer-popup-item">' +
    '<div class="popup-item-name popup-item">七级半径</div>' +
    '<div class="popup-item-vlaue popup-item">' + (obj.radius7===null?"-":obj.radius7) + ' 公里' + '</div>' +
    '</div>' +
    '</div>';
  $("#typhoon-newest-query-content").html(html);
}
//鼠标点击加载云图
function loadTyphoonMotionCloud(obj,id,isShow,isLast) {
  if(isShow){
    return;
  }
  if($('#typhoon-path-cloud-chart ').attr('flag')==="table") {
    if (map.findLayerById("typhoonMotionCloud"+id )) {
      map.remove(map.findLayerById("typhoonMotionCloud"+id ))
    }
    if(!isLast){
      clearTyphoonCacheMap(id);
    }
    note.notify("clear.typhoon.radar");
    var dataTime=moment(obj.time).add(-8, 'hours').format('YYYY-MM-DD HH:00:00');
    var aaaa=  new StatusableWMSLayer({
      id: "typhoonMotionCloud"+id,
      url: typhoonPathRainRUL,
      sublayers: [{
        name: "satellite_china"
      }],
      fullExtent: {
        xmin: 46.7238942459223,
        xmax: 163.699664036523,
        ymin: 7.43324811210926,
        ymax: 59.9600713430146,
      },
      customLayerParameters: {
        dim_batch:  "",
        dim_type: "",
        styles: "",
        time: dataTime
        // time:"2019-08-10 08:00:00"
      },
      spatialReference: 4326,
      opacity: 1,
      visible: true
    })
    map.add(aaaa);
  }
}

//获取虚线点的方法
function onClickDottedLine(forecastTemp,forecastClickLayer,dottedLineColorArray) {
  let body = {
    interface: "com.ec.ws.service.def.wms.WmsLayerService",
    method: "getDottedLine",
    args: [forecastTemp,0.05]
  };
  ajaxCallJson(body, '/rpc', function (res) {
    if(res.data){
      require([
        "esri/Graphic",
      ], function (Graphic, ) {
        for (let i = 1; i < res.data.length; i++) {
          let forecastTempFirstArray = [],forecastTempArray=[],forecastTempTwoArray=[];
          forecastTempFirstArray.push(res.data[i].start.x);
          forecastTempFirstArray.push(res.data[i].start.y);
          forecastTempFirstArray.push(20000);
          forecastTempTwoArray.push(res.data[i].end.x);
          forecastTempTwoArray.push(res.data[i].end.y);
          forecastTempTwoArray.push(20000);
          forecastTempArray[0]=forecastTempFirstArray;
          forecastTempArray[1]=forecastTempTwoArray;
          var forecastPolyline = {
            type: "polyline", // autocasts as new Polyline()
            paths: forecastTempArray
          };
          var forecastSymbol = {
            type: "simple-line", // autocasts as SimpleLineSymbol()
            color: dottedLineColorArray,
            style: "short-dash",
          };
          var polylineGraphic = new Graphic({
            geometry: forecastPolyline,
            symbol: forecastSymbol
          });
          forecastClickLayer.add(polylineGraphic);
        }
      });
    }
  });
}

// 缓存云图数组
var cacheCloudTyphoonPath=new Map(),cacheRadarTyphoonPath=new Map(),cachePrecipitationTyphoonPath=new Map(),cacheFloodTyphoonPathPath=new Map();
function initLayerCacheTyphoonPath(obj,id,firstId,lastID) {
  if(firstId){
    $("#typhoon-path-head-title").html("");
    $("#typhoon-path-head-title").css("display","block");
    $("#typhoon-path-head-title").html("时间："+moment(firstId.time).format('YYYY-MM-DD HH:mm'));
    let dataFirstShowTime=moment(firstId.time).add(-8, 'hours').format('DDHH');
    if (map.findLayerById("typhoonCacheMotionCloud"+id+dataFirstShowTime )) {
      map.remove(map.findLayerById("typhoonCacheMotionCloud"+id+dataFirstShowTime ))
    }
    if (map.findLayerById("typhoonPathRadarChart"+id+dataFirstShowTime )) {
      map.remove(map.findLayerById("typhoonPathRadarChart"+id+dataFirstShowTime ))
    }
    if (map.findLayerById("typhoonPathPrecipitationChart"+id+dataFirstShowTime )) {
      map.remove(map.findLayerById("typhoonPathPrecipitationChart"+id+dataFirstShowTime ))
    }
    if (map.findLayerById("typhoonPathFloodChartOne"+id+dataFirstShowTime )) {
      map.remove(map.findLayerById("typhoonPathFloodChartOne"+id+dataFirstShowTime ))
    }
    cacheCloudTyphoonPath.delete(id+dataFirstShowTime);
    cacheRadarTyphoonPath.delete(id+dataFirstShowTime);
    cachePrecipitationTyphoonPath.delete(id+dataFirstShowTime);
    cacheFloodTyphoonPathPath.delete(id+dataFirstShowTime);
    lastCheckLayerCheckBJTimeID=lastID.time;
    let dataTime=moment(lastID.time).add(-8, 'hours').format('YYYY-MM-DD HH:00:00');
    let dataLastIDShowTime=moment(lastID.time).add(-8, 'hours').format('DDHH');
    if($('#typhoon-path-cloud-chart ').attr('flag')==="table") {//云图图层
      let aaaa=  new StatusableWMSLayer({
        id: "typhoonCacheMotionCloud"+id+dataLastIDShowTime,
        url: typhoonPathRainRUL,
        sublayers: [{
          name: "satellite_china"
        }],
        fullExtent: {
          xmin: 46.7238942459223,
          xmax: 163.699664036523,
          ymin: 7.43324811210926,
          ymax: 59.9600713430146,
        },
        customLayerParameters: {
          dim_batch:  "",
          dim_type: "",
          styles: "",
          time: dataTime
          // time:"2019-08-10 08:00:00"
        },
        spatialReference: 4326,
        opacity: 0,
        visible: true
      });
      if (!map.findLayerById("typhoonCacheMotionCloud"+id+dataLastIDShowTime)) {
        map.add(aaaa);
      }
      cacheCloudTyphoonPath.set(id+dataLastIDShowTime, aaaa);
      lastCheckLayerCheckID=dataLastIDShowTime;
      firstCheckLayerCheckID=dataFirstShowTime;
      if(cacheCloudTyphoonPath.size===1){
        if (map.findLayerById("typhoonCacheMotionCloud"+id+dataLastIDShowTime )) {
          map.remove(map.findLayerById("typhoonCacheMotionCloud"+id+dataLastIDShowTime ))
        }
        map.add(aaaa);
      }
    }
    if($('#typhoon-path-radar').attr('flag')==="table"){
      onLoadTimeRadarLayer(dataTime,id+dataLastIDShowTime,firstId);//雷达图层
    }
    if($('#check-typhoon-rain-data').attr('flag')==="table"){
      onLoadTimePrecipitationLayer(dataTime,id+dataLastIDShowTime,firstId);//降水图层
    }
    if($('#check-typhoon-flood-data').attr('flag')==="table"){
      onLoadTimeFloodTyphoonPathLayer(dataTime,id+dataLastIDShowTime,firstId);//洪水图层
    }
    onLoadPlayReproduce(obj,id,dataFirstShowTime);
  }else{
    let dataTime=moment(obj.time).add(-8, 'hours').format('YYYY-MM-DD HH:00:00');
    let dataShowTime=moment(obj.time).add(-8, 'hours').format('DDHH');
    let aaaa=  new StatusableWMSLayer({
      id: "typhoonCacheMotionCloud"+id+dataShowTime,
      url: typhoonPathRainRUL,
      sublayers: [{
        name: "satellite_china"
      }],
      fullExtent: {
        xmin: 46.7238942459223,
        xmax: 163.699664036523,
        ymin: 7.43324811210926,
        ymax: 59.9600713430146,
      },
      customLayerParameters: {
        dim_batch:  "",
        dim_type: "",
        styles: "",
        time: dataTime
      },
      spatialReference: 4326,
      opacity: 0,
      visible: true
    });
    map.add(aaaa);
    if($('#typhoon-path-cloud-chart ').attr('flag')==="table") {//云图图层
      cacheCloudTyphoonPath.set(id + dataShowTime, aaaa);
    }
    if($('#typhoon-path-radar').attr('flag')==="table"){
      onLoadTimeRadarLayer(dataTime,id+dataShowTime);//雷达图层
    }
    if($('#check-typhoon-rain-data').attr('flag')==="table"){
      onLoadTimePrecipitationLayer(dataTime,id+dataShowTime);//降水图层
    }
    if($('#check-typhoon-flood-data').attr('flag')==="table"){
      onLoadTimeFloodTyphoonPathLayer(dataTime,id+dataShowTime);//洪水图层
    }
  }
}

function onLoadPlayReproduce(obj,id) {
  var dataShowTime=moment(obj.time).add(-8, 'hours').format('DDHH');
  if($('#typhoon-path-cloud-chart').attr('flag')==="table"){
    if (map.findLayerById("typhoonCacheMotionCloud"+id+dataShowTime)) {
      map.findLayerById("typhoonCacheMotionCloud"+id+dataShowTime).opacity=1;
    }
  }
  if($('#typhoon-path-radar').attr('flag')==="table"){
    if (map.findLayerById("typhoonPathRadarChart"+id+dataShowTime)) {
      map.findLayerById("typhoonPathRadarChart"+id+dataShowTime).opacity=0.6;
    }
  }
  if($('#check-typhoon-rain-data').attr('flag')==="table"){
    if (map.findLayerById("typhoonPathPrecipitationChart"+id+dataShowTime)) {
      map.findLayerById("typhoonPathPrecipitationChart"+id+dataShowTime).opacity=0.6;
    }
  }
  if($('#check-typhoon-flood-data').attr('flag')==="table"){
    if (map.findLayerById("typhoonPathFloodChartOne"+id+dataShowTime)) {
      map.findLayerById("typhoonPathFloodChartOne"+id+dataShowTime).opacity=0.6;
    }
  }
}
//初始化就加载缓存图层 云图 雷达
function initLoadReproduceLayer(dom,isFirst) {
  var level = $("#typhoon-query-win").find("select[name='level']").val();
  var id = "", layers;
  if(isFirst){
    id = dom.id;
  }else{
    id = $(dom).attr("id");
  }
  if($(dom).is(":checked")===false){
    typhoonPathMap.delete(id);
    typhoonPathLineMap.delete(id);
    isCheckShowLayer=true;
    clearTyphoonPathLayer(undefined,id);
    clearInterval(stopTyphoonPathIndexMap.get(id));
    clearInterval(stopTyphoonPathCacheIndexMap.get(id));
    return;
  }
  if($(dom).is(":checked")===true&&lastCheckLayer!==id){
    clearTyphoonCacheMap(lastCheckLayer);
    clearInterval(stopTyphoonPathCacheIndexMap.get(lastCheckLayer));
  }
  let params = {
    url: typhoonPathContent,
    httpType: "get",
    paramMap: {year: level, tfbh: id},
  };
  ajaxCallJson(params, '/base/transfer', function (res) {
    if (res.flag) {
      let path = JSON.parse(JSON.parse(res.data).data);
      let index=0;
      for (let i = 0; i < path[0].pointses.length; i++){
        if(i>7){
          continue;
        }
        if(path[0].pointses.length<7){
          index=path[0].pointses.length;
        }else{
          index=i;
        }
        initLayerCacheTyphoonPath(path[0].pointses[i],id);
      }
      initTyphoonPath(dom,isFirst);
    }
  })
}

//以时间参数获取雷达图
function onLoadTimeRadarLayer(time,id,firstId,checkClick,isLast) {
  if(checkClick){
    if($('#typhoon-path-radar ').attr('flag')==="cloud"){
      return
    }
    if(!isLast){
      clearTyphoonCacheMap(id);
    }
    let body = {
      interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
      method: "getLayerPlayInfoByMode",
      args: ["9",1,0,{}]
    };

    ajaxCallJson(body, '/rpc', function (res) {
      if(res.data){
        let dateTime=moment(time).add(-8, 'hours').format('YYYY-MM-DD HH:mm:ss');
        var dataTime=moment(dateTime,"YYYY-MM-DD HH:mm").unix();
        let dim_batch=moment(dateTime).format('YYYYMMDDHHmm');
        var aaaa=  new StatusableWMSLayer({
          id: "typhoonPathCloudChartCheckClick"+id,
          url: res.data.nodes[1].url,
          sublayers: [{
            name: res.data.nodes[1].layers
          }],
          fullExtent: {
            xmin: res.data.nodes[1].minx,
            xmax: res.data.nodes[1].maxx,
            ymin: res.data.nodes[1].miny,
            ymax: res.data.nodes[1].maxy,
          },
          customLayerParameters: {
            dim_batch:  dim_batch,
            dim_type: "",
            styles:  res.data.nodes[1].styles,
            time:moment.unix(dataTime).format("YYYY-MM-DDTHH:mm:ss")+"Z",
          },
          spatialReference: 4326,
          opacity: 0.6,
          visible: true
        });
        map.add(aaaa);
      }
    })
  }
  if(firstId){
    let body = {
      interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
      method: "getLayerPlayInfoByMode",
      args: ["9",1,0,{}]
    };
    ajaxCallJson(body, '/rpc', function (res) {
      if(res.data){
        let dateTime=moment(time).add(-8, 'hours').format('YYYY-MM-DD HH:mm:ss');
        var dataTime=moment(dateTime,"YYYY-MM-DD HH:mm").unix();
        let dim_batch=moment(dateTime).format('YYYYMMDDHHmm');
        var aaaa=  new StatusableWMSLayer({
          id: "typhoonPathRadarChart"+id,
          url: res.data.nodes[1].url,
          sublayers: [{
            name: res.data.nodes[1].layers
          }],
          fullExtent: {
            xmin: res.data.nodes[1].minx,
            xmax: res.data.nodes[1].maxx,
            ymin: res.data.nodes[1].miny,
            ymax: res.data.nodes[1].maxy,
          },
          customLayerParameters: {
            dim_batch:  dim_batch,
            dim_type: "",
            styles:  res.data.nodes[1].styles,
            time:moment.unix(dataTime).format("YYYY-MM-DDTHH:mm:ss")+"Z",
          },
          spatialReference: 4326,
          opacity: 0,
          visible: true
        });
        if (!map.findLayerById("typhoonPathRadarChart"+id)) {
          map.add(aaaa);
        }
        cacheRadarTyphoonPath.set(id, aaaa);
        if(cacheRadarTyphoonPath.size===1){
          if (map.findLayerById("typhoonPathRadarChart"+id )) {
            map.remove(map.findLayerById("typhoonPathRadarChart"+id ))
          }
          aaaa.opacity=0.6;
          map.add(aaaa);
        }
      }
    })
  }else{
    let body = {
      interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
      method: "getLayerPlayInfoByMode",
      args: ["9",1,0,{}]
    };
    ajaxCallJson(body, '/rpc', function (res) {
      if(res.data){
        let dateTime=moment(time).add(-8, 'hours').format('YYYY-MM-DD HH:mm:ss');
        var dataTime=moment(dateTime,"YYYY-MM-DD HH:mm").unix();
        let dim_batch=moment(dateTime).format('YYYYMMDDHHmm');
        var aaaa=  new StatusableWMSLayer({
          id: "typhoonPathRadarChart"+id,
          url: res.data.nodes[1].url,
          sublayers: [{
            name: res.data.nodes[1].layers
          }],
          fullExtent: {
            xmin: res.data.nodes[1].minx,
            xmax: res.data.nodes[1].maxx,
            ymin: res.data.nodes[1].miny,
            ymax: res.data.nodes[1].maxy,
          },
          customLayerParameters: {
            dim_batch:  dim_batch,
            dim_type: "",
            styles:  res.data.nodes[1].styles,
            time:moment.unix(dataTime).format("YYYY-MM-DDTHH:mm:ss")+"Z",
          },
          spatialReference: 4326,
          opacity: 0,
          visible: true
        });
        map.add(aaaa);
        cacheRadarTyphoonPath.set(id,aaaa);
      }
    })
  }
}

//以时间参数获取降水图层
function onLoadTimePrecipitationLayer(time,id,firstId,checkClick,isLast) {
  if(checkClick){
    if($('#check-typhoon-rain-data ').attr('flag')==="rain"){
      return;
    }
    if(!isLast){
      clearTyphoonCacheMap(id);
    }
    let body = {
      interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
      method: "getLayerPlayInfoByMode",
      args: ["1",1,0,{}]
    };
    ajaxCallJson(body, '/rpc', function (res) {
      if(res.data){
        let dateTime=moment(time).add(-8, 'hours').format('YYYY-MM-DD HH:mm:ss');
        var dataTime=moment(dateTime,"YYYY-MM-DD HH:mm").unix();
        let aaaa=  new StatusableWMSLayer({
          id: "typhoonPathPrecipitationChartCheckClick"+id,
          url: res.data.nodes[0].url,
          sublayers: [{
            name: res.data.nodes[0].layers
          }],
          fullExtent: {
            xmin: res.data.nodes[0].minx,
            xmax: res.data.nodes[0].maxx,
            ymin: res.data.nodes[0].miny,
            ymax: res.data.nodes[0].maxy,
          },
          customLayerParameters: {
            dim_batch:  "",
            dim_type: res.data.nodes[0].viewparams.dim_type,
            styles:  res.data.nodes[0].styles,
            time:moment.unix(dataTime).format('YYYY-MM-DDTHH:mm:ss')+"Z",
          },
          spatialReference: 4326,
          opacity: 0.6,
          visible: true
        });
        map.add(aaaa);
      }
    })
  }
  if(firstId){
    let body = {
      interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
      method: "getLayerPlayInfoByMode",
      args: ["1",1,0,{}]
    };
    ajaxCallJson(body, '/rpc', function (res) {
      if(res.data){
        var dataTime=moment(time,"YYYY-MM-DD HH:mm").unix();
        var aaaa=  new StatusableWMSLayer({
          id: "typhoonPathPrecipitationChart"+id,
          url: res.data.nodes[0].url,
          sublayers: [{
            name: res.data.nodes[0].layers
          }],
          fullExtent: {
            xmin: res.data.nodes[0].minx,
            xmax: res.data.nodes[0].maxx,
            ymin: res.data.nodes[0].miny,
            ymax: res.data.nodes[0].maxy,
          },
          customLayerParameters: {
            dim_batch:  "",
            dim_type: res.data.nodes[0].viewparams.dim_type,
            styles:  res.data.nodes[0].styles,
            time:moment.unix(dataTime).format('YYYY-MM-DDTHH:mm:ss')+"Z",
          },
          spatialReference: 4326,
          opacity:0,
          visible: true
        });
        if (!map.findLayerById("typhoonPathPrecipitationChart"+id)) {
          map.add(aaaa);
        }
        cachePrecipitationTyphoonPath.set(id, aaaa);
        if(cachePrecipitationTyphoonPath.size===1){
          if (map.findLayerById("typhoonPathPrecipitationChart"+id )) {
            map.remove(map.findLayerById("typhoonPathPrecipitationChart"+id ))
          }
          aaaa.opacity=0.6;
          map.add(aaaa);
        }
      }
    })
  }else{
    let body = {
      interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
      method: "getLayerPlayInfoByMode",
      args: ["1",1,0,{}]
    };
    ajaxCallJson(body, '/rpc', function (res) {
      if(res.data){
        var dataTime=moment(time,"YYYY-MM-DD HH:mm").unix();
        var aaaa=  new StatusableWMSLayer({
          id: "typhoonPathPrecipitationChart"+id,
          url: res.data.nodes[0].url,
          sublayers: [{
            name: res.data.nodes[0].layers
          }],
          fullExtent: {
            xmin: res.data.nodes[0].minx,
            xmax: res.data.nodes[0].maxx,
            ymin: res.data.nodes[0].miny,
            ymax: res.data.nodes[0].maxy,
          },
          customLayerParameters: {
            dim_batch:  "",
            dim_type: res.data.nodes[0].viewparams.dim_type,
            styles:  res.data.nodes[0].styles,
            time:moment.unix(dataTime).format('YYYY-MM-DDTHH:mm:ss')+"Z",
          },
          spatialReference: 4326,
          opacity: 0,
          visible: true
        });
        map.add(aaaa);
        cachePrecipitationTyphoonPath.set(id,aaaa);
      }
    })
  }
}
//以时间参数获取洪水图层
function onLoadTimeFloodTyphoonPathLayer(time,id,firstId,checkClick,isLast) {
  if(checkClick){
    if($('#check-typhoon-flood-data ').attr('flag')==="flood"){
      return;
    }
    if(!isLast){
      clearTyphoonCacheMap(id);
    }
    let body = {
      interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
      method: "getLayerPlayInfoByMode",
      args: ["2",1,0,{}]
    };
    ajaxCallJson(body, '/rpc', function (res) {
      if(res.data){
        let dateTime=moment(time).add(1, 'd').format('YYYY-MM-DD 00:00:00');
        var dataTime=moment(dateTime).unix();
        var aaaa=  new StatusableWMSLayer({
          id: "typhoonPathFloodChartOneCheckClick"+id,
          url: res.data.nodes[0].url,
          sublayers: [{
            name: res.data.nodes[0].layers
          }],
          fullExtent: {
            xmin: res.data.nodes[0].minx,
            xmax: res.data.nodes[0].maxx,
            ymin: res.data.nodes[0].miny,
            ymax: res.data.nodes[0].maxy,
          },
          customLayerParameters: {
            viewparams:"pubts:"+dataTime,
          },
          spatialReference: 4326,
          opacity: 0.6,
          visible: true
        });
        map.add(aaaa);
      }
    })
  }
  if(firstId){
    let body = {
      interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
      method: "getLayerPlayInfoByMode",
      args: ["2",1,0,{}]
    };
    ajaxCallJson(body, '/rpc', function (res) {
      if(res.data){
        let dateTime=moment(time).add(1, 'd').format('YYYY-MM-DD 00:00:00');
        var dataTime=moment(dateTime).unix();
        var aaaa=  new StatusableWMSLayer({
          id: "typhoonPathFloodChartOne"+id,
          url: res.data.nodes[0].url,
          sublayers: [{
            name: res.data.nodes[0].layers
          }],
          fullExtent: {
            xmin: res.data.nodes[0].minx,
            xmax: res.data.nodes[0].maxx,
            ymin: res.data.nodes[0].miny,
            ymax: res.data.nodes[0].maxy,
          },
          customLayerParameters: {
            viewparams:"pubts:"+dataTime,
          },
          spatialReference: 4326,
          opacity: 0,
          visible: true
        });
        if (!map.findLayerById("typhoonPathFloodChartOne"+id)) {
          map.add(aaaa);
        }
        cacheFloodTyphoonPathPath.set(id, aaaa);
        if(cacheFloodTyphoonPathPath.size===1){
          if (map.findLayerById("typhoonPathFloodChartOne"+id )) {
            map.remove(map.findLayerById("typhoonPathFloodChartOne"+id ))
          }
          aaaa.opacity=0.6;
          map.add(aaaa);
        }
      }
    })
  }else{
    let body = {
      interface: "com.ec.ws.service.def.xyyj.LayerManagerV1Service",
      method: "getLayerPlayInfoByMode",
      args: ["2",1,0,{}]
    };
    ajaxCallJson(body, '/rpc', function (res) {
      if(res.data){
        let dateTime=moment(time).add(1, 'd').format('YYYY-MM-DD 00:00:00');
        var dataTime=moment(dateTime).unix();
        var aaaa=  new StatusableWMSLayer({
          id: "typhoonPathFloodChartOne"+id,
          url: res.data.nodes[0].url,
          sublayers: [{
            name: res.data.nodes[0].layers
          }],
          fullExtent: {
            xmin: res.data.nodes[0].minx,
            xmax: res.data.nodes[0].maxx,
            ymin: res.data.nodes[0].miny,
            ymax: res.data.nodes[0].maxy,
          },
          customLayerParameters: {
            viewparams:"pubts:"+dataTime,
          },
          spatialReference: 4326,
          opacity: 0,
          visible: true
        });
        map.add(aaaa);
        cacheFloodTyphoonPathPath.set(id,aaaa);
      }
    })
  }
}

//初始化没有停编和最新一条的台风数据
function initLoadStopEditingData() {
  var level = $("#typhoon-query-win").find("select[name='level']").val();
  let params = {
    url: typhoonPathList,
    httpType: "get",
    paramMap: {year: level},
  };
  var selectNameList;
  ajaxCallJson(params, '/base/transfer', function (res) {
    if (res.flag) {
      var data = JSON.parse(JSON.parse(res.data).data);
      for (var i = 0; i < data.length; i++) {
        if (data[i].iscurrent == 0) {
        } else {
          selectNameList=(data[i].year + "年" + (data[i].tfbh).substring(2, data[i].tfbh.length) + " " + data[i].cname+" "+(data[i].iscurrent===0?"已停编":""))
          var obj = { id: data[i].ident, isCheck: true, name: selectNameList };
          // initLoadReproduceLayer(obj,true);
        }
      }
    }
  });
}
//获取所有当前没有停编的时间数组
function onLoadStopEditingTimeArray(obj) {
  let params = {
    url: typhoonPathTimeArray,
    httpType: "get",
    paramMap: {}
  };
  ajaxCallJson(params, '/base/transfer', function (res) {
    if (res.flag) {
      var data = JSON.parse(JSON.parse(res.data).data);
      let stopEditingArray=[];
      for (let i = 0; i < data.length; i++){
        let objData={
          id:"noStopEditingLayer",
          time:data[i]
        };
        stopEditingArray.push(objData);
        if(i>7){
          continue;
        }
        let objDataArray={
          id:"noStopEditingLayer",
          time:data[i]
        };
        initLayerCacheTyphoonPath(objDataArray,objDataArray.id);
      }
      if(cacheCloudTyphoonPath.size>7||cacheRadarTyphoonPath.size>7||cachePrecipitationTyphoonPath.size>7||cacheFloodTyphoonPathPath.size>7){
         playTyphoonNoStopLayerCacheData(stopEditingArray,"noStopEditingLayer",obj);
        initTyphoonPath(obj,true,true);
      }
    }
  });
}

//清除不定时缓存加载的图层
function clearTyphoonCacheMap(id,isLast) {
  if(isLast){
    if($('#typhoon-path-cloud-chart ').attr('flag')==="radar"){//云图
      if (map.findLayerById("typhoonCacheMotionCloud"+lastCheckLayer+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonCacheMotionCloud"+lastCheckLayer+lastCheckLayerCheckID))
      }
      if (map.findLayerById("typhoonCacheMotionCloudnoStopEditingLayer"+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonCacheMotionCloudnoStopEditingLayer"+lastCheckLayerCheckID))
      }
    }
    if($('#typhoon-path-radar ').attr('flag')==="cloud"){//雷达
      if (map.findLayerById("typhoonPathRadarChart"+lastCheckLayer+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonPathRadarChart"+lastCheckLayer+lastCheckLayerCheckID))
      }
      if (map.findLayerById("typhoonPathRadarChartnoStopEditingLayer"+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonPathRadarChartnoStopEditingLayer"+lastCheckLayerCheckID))
      }
    }
    if($('#check-typhoon-flood-data ').attr('flag')==="flood"){//洪水
      if (map.findLayerById("typhoonPathFloodChartOne"+lastCheckLayer+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonPathFloodChartOne"+lastCheckLayer+lastCheckLayerCheckID))
      }
      if (map.findLayerById("typhoonPathFloodChartOnenoStopEditingLayer"+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonPathFloodChartOnenoStopEditingLayer"+lastCheckLayerCheckID))
      }
    }
    if($('#check-typhoon-rain-data ').attr('flag')==="rain"){//降水
      if (map.findLayerById("typhoonPathPrecipitationChart"+lastCheckLayer+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonPathPrecipitationChart"+lastCheckLayer+lastCheckLayerCheckID))
      }
      if (map.findLayerById("typhoonPathPrecipitationChartnoStopEditingLayer"+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonPathPrecipitationChartnoStopEditingLayer"+lastCheckLayerCheckID))
      }
    }
  }else{
    if (map.findLayerById("typhoonPathFloodChartOneCheckClick"+id )) {
      map.remove(map.findLayerById("typhoonPathFloodChartOneCheckClick"+id ))
    }
    if (map.findLayerById("typhoonPathCloudChartCheckClick"+id )) {
      map.remove(map.findLayerById("typhoonPathCloudChartCheckClick"+id ))
    }
    if (map.findLayerById("typhoonPathPrecipitationChartCheckClick"+id )) {
      map.remove(map.findLayerById("typhoonPathPrecipitationChartCheckClick"+id ))
    }
    if(lastCheckLayerCheckID){//去掉最后一张云图
      if (map.findLayerById("typhoonCacheMotionCloud"+lastCheckLayer+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonCacheMotionCloud"+lastCheckLayer+lastCheckLayerCheckID))
      }
      if (map.findLayerById("typhoonPathRadarChart"+lastCheckLayer+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonPathRadarChart"+lastCheckLayer+lastCheckLayerCheckID))
      }
      if (map.findLayerById("typhoonPathPrecipitationChart"+lastCheckLayer+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonPathPrecipitationChart"+lastCheckLayer+lastCheckLayerCheckID))
      }
      if (map.findLayerById("typhoonPathFloodChartOne"+lastCheckLayer+lastCheckLayerCheckID)) {
        map.remove(map.findLayerById("typhoonPathFloodChartOne"+lastCheckLayer+lastCheckLayerCheckID))
      }
    }
    stopTyphoonPathCacheIndexMap.forEach(function(value,key){
      clearInterval(stopTyphoonPathCacheIndexMap.get(key));
    });
    stopTyphoonNoEitingPathCacheIndexMap.forEach(function(value,key){
      clearInterval(stopTyphoonNoEitingPathCacheIndexMap.get(key));
    });
    stopTyphoonNoEitingPathCacheIndexMap.delete("noStopEditingLayer");
    cacheCloudTyphoonPath.forEach(function(value,key){
      if (map.findLayerById(value.id)) {
        map.findLayerById(value.id).opacity=0;
      }
    });
    cacheRadarTyphoonPath.forEach(function(value,key){
      if (map.findLayerById(value.id)) {
        map.findLayerById(value.id).opacity=0;
      }
    });
    cachePrecipitationTyphoonPath.forEach(function(value,key){
      if (map.findLayerById(value.id)) {
        map.findLayerById(value.id).opacity=0;
      }
    });
    cacheFloodTyphoonPathPath.forEach(function(value,key){
      if (map.findLayerById(value.id)) {
        map.findLayerById(value.id).opacity=0;
      }
    });
  }
}